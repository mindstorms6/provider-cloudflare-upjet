// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OptionsInitParameters struct {

	// (String) The fit property describes how the width and height dimensions should be interpreted.
	// The fit property describes how the width and height dimensions should be interpreted.
	Fit *string `json:"fit,omitempty" tf:"fit,omitempty"`

	// (Number) Maximum height in image pixels.
	// Maximum height in image pixels.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// (String) What EXIF data should be preserved in the output image.
	// What EXIF data should be preserved in the output image.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Number) Maximum width in image pixels.
	// Maximum width in image pixels.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type OptionsObservation struct {

	// (String) The fit property describes how the width and height dimensions should be interpreted.
	// The fit property describes how the width and height dimensions should be interpreted.
	Fit *string `json:"fit,omitempty" tf:"fit,omitempty"`

	// (Number) Maximum height in image pixels.
	// Maximum height in image pixels.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// (String) What EXIF data should be preserved in the output image.
	// What EXIF data should be preserved in the output image.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Number) Maximum width in image pixels.
	// Maximum width in image pixels.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type OptionsParameters struct {

	// (String) The fit property describes how the width and height dimensions should be interpreted.
	// The fit property describes how the width and height dimensions should be interpreted.
	// +kubebuilder:validation:Optional
	Fit *string `json:"fit" tf:"fit,omitempty"`

	// (Number) Maximum height in image pixels.
	// Maximum height in image pixels.
	// +kubebuilder:validation:Optional
	Height *float64 `json:"height" tf:"height,omitempty"`

	// (String) What EXIF data should be preserved in the output image.
	// What EXIF data should be preserved in the output image.
	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata" tf:"metadata,omitempty"`

	// (Number) Maximum width in image pixels.
	// Maximum width in image pixels.
	// +kubebuilder:validation:Optional
	Width *float64 `json:"width" tf:"width,omitempty"`
}

type VariantInitParameters struct {

	// (String) Account identifier tag.
	// Account identifier tag.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) Indicates whether the variant can access an image without a signature, regardless of image access control.
	// Indicates whether the variant can access an image without a signature, regardless of image access control.
	NeverRequireSignedUrls *bool `json:"neverRequireSignedUrls,omitempty" tf:"never_require_signed_urls,omitempty"`

	// (Attributes) Allows you to define image resizing sizes for different use cases. (see below for nested schema)
	Options *OptionsInitParameters `json:"options,omitempty" tf:"options,omitempty"`

	// (Attributes) (see below for nested schema)
	Variant *VariantVariantInitParameters `json:"variant,omitempty" tf:"variant,omitempty"`
}

type VariantObservation struct {

	// (String) Account identifier tag.
	// Account identifier tag.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Indicates whether the variant can access an image without a signature, regardless of image access control.
	// Indicates whether the variant can access an image without a signature, regardless of image access control.
	NeverRequireSignedUrls *bool `json:"neverRequireSignedUrls,omitempty" tf:"never_require_signed_urls,omitempty"`

	// (Attributes) Allows you to define image resizing sizes for different use cases. (see below for nested schema)
	Options *OptionsObservation `json:"options,omitempty" tf:"options,omitempty"`

	// (Attributes) (see below for nested schema)
	Variant *VariantVariantObservation `json:"variant,omitempty" tf:"variant,omitempty"`
}

type VariantOptionsInitParameters struct {
}

type VariantOptionsObservation struct {

	// (String) The fit property describes how the width and height dimensions should be interpreted.
	// The fit property describes how the width and height dimensions should be interpreted.
	Fit *string `json:"fit,omitempty" tf:"fit,omitempty"`

	// (Number) Maximum height in image pixels.
	// Maximum height in image pixels.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// (String) What EXIF data should be preserved in the output image.
	// What EXIF data should be preserved in the output image.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Number) Maximum width in image pixels.
	// Maximum width in image pixels.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type VariantOptionsParameters struct {
}

type VariantParameters struct {

	// (String) Account identifier tag.
	// Account identifier tag.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) Indicates whether the variant can access an image without a signature, regardless of image access control.
	// Indicates whether the variant can access an image without a signature, regardless of image access control.
	// +kubebuilder:validation:Optional
	NeverRequireSignedUrls *bool `json:"neverRequireSignedUrls,omitempty" tf:"never_require_signed_urls,omitempty"`

	// (Attributes) Allows you to define image resizing sizes for different use cases. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Options *OptionsParameters `json:"options,omitempty" tf:"options,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Variant *VariantVariantParameters `json:"variant,omitempty" tf:"variant,omitempty"`
}

type VariantVariantInitParameters struct {

	// (Attributes) Allows you to define image resizing sizes for different use cases. (see below for nested schema)
	Options *VariantOptionsInitParameters `json:"options,omitempty" tf:"options,omitempty"`
}

type VariantVariantObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Indicates whether the variant can access an image without a signature, regardless of image access control.
	// Indicates whether the variant can access an image without a signature, regardless of image access control.
	NeverRequireSignedUrls *bool `json:"neverRequireSignedUrls,omitempty" tf:"never_require_signed_urls,omitempty"`

	// (Attributes) Allows you to define image resizing sizes for different use cases. (see below for nested schema)
	Options *VariantOptionsObservation `json:"options,omitempty" tf:"options,omitempty"`
}

type VariantVariantParameters struct {

	// (Attributes) Allows you to define image resizing sizes for different use cases. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Options *VariantOptionsParameters `json:"options,omitempty" tf:"options,omitempty"`
}

// VariantSpec defines the desired state of Variant
type VariantSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VariantParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VariantInitParameters `json:"initProvider,omitempty"`
}

// VariantStatus defines the observed state of Variant.
type VariantStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VariantObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Variant is the Schema for the Variants API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Variant struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.options) || (has(self.initProvider) && has(self.initProvider.options))",message="spec.forProvider.options is a required parameter"
	Spec   VariantSpec   `json:"spec"`
	Status VariantStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VariantList contains a list of Variants
type VariantList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Variant `json:"items"`
}

// Repository type metadata.
var (
	Variant_Kind             = "Variant"
	Variant_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Variant_Kind}.String()
	Variant_KindAPIVersion   = Variant_Kind + "." + CRDGroupVersion.String()
	Variant_GroupVersionKind = CRDGroupVersion.WithKind(Variant_Kind)
)

func init() {
	SchemeBuilder.Register(&Variant{}, &VariantList{})
}
