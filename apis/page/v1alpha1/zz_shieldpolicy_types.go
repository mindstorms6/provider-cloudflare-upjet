// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ShieldPolicyInitParameters struct {

	// (String) The action to take if the expression matches
	// The action to take if the expression matches
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) A description for the policy
	// A description for the policy
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether the policy is enabled
	// Whether the policy is enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The expression which must match for the policy to be applied, using the Cloudflare Firewall rule expression syntax
	// The expression which must match for the policy to be applied, using the Cloudflare Firewall rule expression syntax
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (String) The policy which will be applied
	// The policy which will be applied
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ShieldPolicyObservation struct {

	// (String) The action to take if the expression matches
	// The action to take if the expression matches
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) A description for the policy
	// A description for the policy
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether the policy is enabled
	// Whether the policy is enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The expression which must match for the policy to be applied, using the Cloudflare Firewall rule expression syntax
	// The expression which must match for the policy to be applied, using the Cloudflare Firewall rule expression syntax
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (String) Identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The policy which will be applied
	// The policy which will be applied
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ShieldPolicyParameters struct {

	// (String) The action to take if the expression matches
	// The action to take if the expression matches
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) A description for the policy
	// A description for the policy
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether the policy is enabled
	// Whether the policy is enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The expression which must match for the policy to be applied, using the Cloudflare Firewall rule expression syntax
	// The expression which must match for the policy to be applied, using the Cloudflare Firewall rule expression syntax
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (String) The policy which will be applied
	// The policy which will be applied
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// ShieldPolicySpec defines the desired state of ShieldPolicy
type ShieldPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ShieldPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ShieldPolicyInitParameters `json:"initProvider,omitempty"`
}

// ShieldPolicyStatus defines the observed state of ShieldPolicy.
type ShieldPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ShieldPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ShieldPolicy is the Schema for the ShieldPolicys API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type ShieldPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.expression) || (has(self.initProvider) && has(self.initProvider.expression))",message="spec.forProvider.expression is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.value) || (has(self.initProvider) && has(self.initProvider.value))",message="spec.forProvider.value is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   ShieldPolicySpec   `json:"spec"`
	Status ShieldPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ShieldPolicyList contains a list of ShieldPolicys
type ShieldPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ShieldPolicy `json:"items"`
}

// Repository type metadata.
var (
	ShieldPolicy_Kind             = "ShieldPolicy"
	ShieldPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ShieldPolicy_Kind}.String()
	ShieldPolicy_KindAPIVersion   = ShieldPolicy_Kind + "." + CRDGroupVersion.String()
	ShieldPolicy_GroupVersionKind = CRDGroupVersion.WithKind(ShieldPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ShieldPolicy{}, &ShieldPolicyList{})
}
