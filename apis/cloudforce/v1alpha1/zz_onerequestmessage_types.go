// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OneRequestMessageInitParameters struct {

	// (String) Identifier
	// Identifier
	AccountIdentifier *string `json:"accountIdentifier,omitempty" tf:"account_identifier,omitempty"`

	// (String) Content of message
	// Content of message
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// (String) UUID
	// UUID
	RequestIdentifier *string `json:"requestIdentifier,omitempty" tf:"request_identifier,omitempty"`
}

type OneRequestMessageObservation struct {

	// (String) Identifier
	// Identifier
	AccountIdentifier *string `json:"accountIdentifier,omitempty" tf:"account_identifier,omitempty"`

	// (String) Author of message
	// Author of message
	Author *string `json:"author,omitempty" tf:"author,omitempty"`

	// (String) Content of message
	// Content of message
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// (String) Message creation time
	// Message creation time
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	// (Number) Message ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// on request
	// Whether the message is a follow-on request
	IsFollowOnRequest *bool `json:"isFollowOnRequest,omitempty" tf:"is_follow_on_request,omitempty"`

	// (String) UUID
	// UUID
	RequestIdentifier *string `json:"requestIdentifier,omitempty" tf:"request_identifier,omitempty"`

	// (String) Message last updated time
	// Message last updated time
	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`
}

type OneRequestMessageParameters struct {

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	AccountIdentifier *string `json:"accountIdentifier,omitempty" tf:"account_identifier,omitempty"`

	// (String) Content of message
	// Content of message
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// (String) UUID
	// UUID
	// +kubebuilder:validation:Optional
	RequestIdentifier *string `json:"requestIdentifier,omitempty" tf:"request_identifier,omitempty"`
}

// OneRequestMessageSpec defines the desired state of OneRequestMessage
type OneRequestMessageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OneRequestMessageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OneRequestMessageInitParameters `json:"initProvider,omitempty"`
}

// OneRequestMessageStatus defines the observed state of OneRequestMessage.
type OneRequestMessageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OneRequestMessageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OneRequestMessage is the Schema for the OneRequestMessages API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type OneRequestMessage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountIdentifier) || (has(self.initProvider) && has(self.initProvider.accountIdentifier))",message="spec.forProvider.accountIdentifier is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.requestIdentifier) || (has(self.initProvider) && has(self.initProvider.requestIdentifier))",message="spec.forProvider.requestIdentifier is a required parameter"
	Spec   OneRequestMessageSpec   `json:"spec"`
	Status OneRequestMessageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OneRequestMessageList contains a list of OneRequestMessages
type OneRequestMessageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OneRequestMessage `json:"items"`
}

// Repository type metadata.
var (
	OneRequestMessage_Kind             = "OneRequestMessage"
	OneRequestMessage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OneRequestMessage_Kind}.String()
	OneRequestMessage_KindAPIVersion   = OneRequestMessage_Kind + "." + CRDGroupVersion.String()
	OneRequestMessage_GroupVersionKind = CRDGroupVersion.WithKind(OneRequestMessage_Kind)
)

func init() {
	SchemeBuilder.Register(&OneRequestMessage{}, &OneRequestMessageList{})
}
