// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AgentBlockingRuleInitParameters struct {

	// (Attributes) The rule configuration. (see below for nested schema)
	Configuration *ConfigurationInitParameters `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// (String) The action to apply to a matched request.
	// The action to apply to a matched request.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (String) The unique identifier of the User Agent Blocking rule.
	// The unique identifier of the User Agent Blocking rule.
	UaRuleID *string `json:"uaRuleId,omitempty" tf:"ua_rule_id,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type AgentBlockingRuleObservation struct {

	// (Attributes) The rule configuration. (see below for nested schema)
	Configuration *ConfigurationObservation `json:"configuration,omitempty" tf:"configuration,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The action to apply to a matched request.
	// The action to apply to a matched request.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (String) The unique identifier of the User Agent Blocking rule.
	// The unique identifier of the User Agent Blocking rule.
	UaRuleID *string `json:"uaRuleId,omitempty" tf:"ua_rule_id,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type AgentBlockingRuleParameters struct {

	// (Attributes) The rule configuration. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Configuration *ConfigurationParameters `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// (String) The action to apply to a matched request.
	// The action to apply to a matched request.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (String) The unique identifier of the User Agent Blocking rule.
	// The unique identifier of the User Agent Blocking rule.
	// +kubebuilder:validation:Optional
	UaRuleID *string `json:"uaRuleId,omitempty" tf:"ua_rule_id,omitempty"`

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ConfigurationInitParameters struct {

	// (String) The configuration target. You must set the target to ip when specifying an IP address in the rule.
	// The configuration target. You must set the target to `ip` when specifying an IP address in the rule.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The IP address to match. This address will be compared to the IP address of incoming requests.
	// The IP address to match. This address will be compared to the IP address of incoming requests.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConfigurationObservation struct {

	// (String) The configuration target. You must set the target to ip when specifying an IP address in the rule.
	// The configuration target. You must set the target to `ip` when specifying an IP address in the rule.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The IP address to match. This address will be compared to the IP address of incoming requests.
	// The IP address to match. This address will be compared to the IP address of incoming requests.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConfigurationParameters struct {

	// (String) The configuration target. You must set the target to ip when specifying an IP address in the rule.
	// The configuration target. You must set the target to `ip` when specifying an IP address in the rule.
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The IP address to match. This address will be compared to the IP address of incoming requests.
	// The IP address to match. This address will be compared to the IP address of incoming requests.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// AgentBlockingRuleSpec defines the desired state of AgentBlockingRule
type AgentBlockingRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AgentBlockingRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AgentBlockingRuleInitParameters `json:"initProvider,omitempty"`
}

// AgentBlockingRuleStatus defines the observed state of AgentBlockingRule.
type AgentBlockingRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AgentBlockingRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AgentBlockingRule is the Schema for the AgentBlockingRules API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type AgentBlockingRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mode) || (has(self.initProvider) && has(self.initProvider.mode))",message="spec.forProvider.mode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   AgentBlockingRuleSpec   `json:"spec"`
	Status AgentBlockingRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AgentBlockingRuleList contains a list of AgentBlockingRules
type AgentBlockingRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AgentBlockingRule `json:"items"`
}

// Repository type metadata.
var (
	AgentBlockingRule_Kind             = "AgentBlockingRule"
	AgentBlockingRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AgentBlockingRule_Kind}.String()
	AgentBlockingRule_KindAPIVersion   = AgentBlockingRule_Kind + "." + CRDGroupVersion.String()
	AgentBlockingRule_GroupVersionKind = CRDGroupVersion.WithKind(AgentBlockingRule_Kind)
)

func init() {
	SchemeBuilder.Register(&AgentBlockingRule{}, &AgentBlockingRuleList{})
}
