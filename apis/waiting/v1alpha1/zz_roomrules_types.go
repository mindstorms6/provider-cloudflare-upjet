// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoomRulesInitParameters struct {

	// (Attributes List) (see below for nested schema)
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String)
	WaitingRoomID *string `json:"waitingRoomId,omitempty" tf:"waiting_room_id,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RoomRulesObservation struct {

	// (String) The action to take when the expression matches.
	// The action to take when the expression matches.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) The description of the rule.
	// The description of the rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) When set to true, the rule is enabled.
	// When set to true, the rule is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Criteria defining when there is a match for the current rule.
	// Criteria defining when there is a match for the current rule.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (String) The ID of the rule.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	LastUpdated *string `json:"lastUpdated,omitempty" tf:"last_updated,omitempty"`

	// (Attributes List) (see below for nested schema)
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) The version of the rule.
	// The version of the rule.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// (String)
	WaitingRoomID *string `json:"waitingRoomId,omitempty" tf:"waiting_room_id,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RoomRulesParameters struct {

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	WaitingRoomID *string `json:"waitingRoomId,omitempty" tf:"waiting_room_id,omitempty"`

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RulesInitParameters struct {

	// (String) The action to take when the expression matches.
	// The action to take when the expression matches.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) The description of the rule.
	// The description of the rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) When set to true, the rule is enabled.
	// When set to true, the rule is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Criteria defining when there is a match for the current rule.
	// Criteria defining when there is a match for the current rule.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`
}

type RulesObservation struct {

	// (String) The action to take when the expression matches.
	// The action to take when the expression matches.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) The description of the rule.
	// The description of the rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) When set to true, the rule is enabled.
	// When set to true, the rule is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Criteria defining when there is a match for the current rule.
	// Criteria defining when there is a match for the current rule.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`
}

type RulesParameters struct {

	// (String) The action to take when the expression matches.
	// The action to take when the expression matches.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// (String) The description of the rule.
	// The description of the rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) When set to true, the rule is enabled.
	// When set to true, the rule is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Criteria defining when there is a match for the current rule.
	// Criteria defining when there is a match for the current rule.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression" tf:"expression,omitempty"`
}

// RoomRulesSpec defines the desired state of RoomRules
type RoomRulesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoomRulesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RoomRulesInitParameters `json:"initProvider,omitempty"`
}

// RoomRulesStatus defines the observed state of RoomRules.
type RoomRulesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoomRulesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RoomRules is the Schema for the RoomRuless API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type RoomRules struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rules) || (has(self.initProvider) && has(self.initProvider.rules))",message="spec.forProvider.rules is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.waitingRoomId) || (has(self.initProvider) && has(self.initProvider.waitingRoomId))",message="spec.forProvider.waitingRoomId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   RoomRulesSpec   `json:"spec"`
	Status RoomRulesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoomRulesList contains a list of RoomRuless
type RoomRulesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RoomRules `json:"items"`
}

// Repository type metadata.
var (
	RoomRules_Kind             = "RoomRules"
	RoomRules_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RoomRules_Kind}.String()
	RoomRules_KindAPIVersion   = RoomRules_Kind + "." + CRDGroupVersion.String()
	RoomRules_GroupVersionKind = CRDGroupVersion.WithKind(RoomRules_Kind)
)

func init() {
	SchemeBuilder.Register(&RoomRules{}, &RoomRulesList{})
}
