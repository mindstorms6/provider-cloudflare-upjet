// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagedRequestHeadersInitParameters struct {

	// (Boolean) Whether the Managed Transform is enabled.
	// Whether the Managed Transform is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The unique ID of the zone.
	// The human-readable identifier of the Managed Transform.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ManagedRequestHeadersObservation struct {

	// (List of String) The Managed Transforms that this Managed Transform conflicts with.
	// The Managed Transforms that this Managed Transform conflicts with.
	ConflictsWith []*string `json:"conflictsWith,omitempty" tf:"conflicts_with,omitempty"`

	// (Boolean) Whether the Managed Transform is enabled.
	// Whether the Managed Transform is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// enabled Managed Transforms.
	// Whether the Managed Transform conflicts with the currently-enabled Managed Transforms.
	HasConflict *bool `json:"hasConflict,omitempty" tf:"has_conflict,omitempty"`

	// (String) The unique ID of the zone.
	// The human-readable identifier of the Managed Transform.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ManagedRequestHeadersParameters struct {

	// (Boolean) Whether the Managed Transform is enabled.
	// Whether the Managed Transform is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// (String) The unique ID of the zone.
	// The human-readable identifier of the Managed Transform.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`
}

type ManagedResponseHeadersInitParameters struct {

	// (Boolean) Whether the Managed Transform is enabled.
	// Whether the Managed Transform is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The unique ID of the zone.
	// The human-readable identifier of the Managed Transform.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ManagedResponseHeadersObservation struct {

	// (List of String) The Managed Transforms that this Managed Transform conflicts with.
	// The Managed Transforms that this Managed Transform conflicts with.
	ConflictsWith []*string `json:"conflictsWith,omitempty" tf:"conflicts_with,omitempty"`

	// (Boolean) Whether the Managed Transform is enabled.
	// Whether the Managed Transform is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// enabled Managed Transforms.
	// Whether the Managed Transform conflicts with the currently-enabled Managed Transforms.
	HasConflict *bool `json:"hasConflict,omitempty" tf:"has_conflict,omitempty"`

	// (String) The unique ID of the zone.
	// The human-readable identifier of the Managed Transform.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ManagedResponseHeadersParameters struct {

	// (Boolean) Whether the Managed Transform is enabled.
	// Whether the Managed Transform is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// (String) The unique ID of the zone.
	// The human-readable identifier of the Managed Transform.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`
}

type TransformsInitParameters struct {

	// (Attributes List) The list of Managed Request Transforms. (see below for nested schema)
	ManagedRequestHeaders []ManagedRequestHeadersInitParameters `json:"managedRequestHeaders,omitempty" tf:"managed_request_headers,omitempty"`

	// (Attributes List) The list of Managed Response Transforms. (see below for nested schema)
	ManagedResponseHeaders []ManagedResponseHeadersInitParameters `json:"managedResponseHeaders,omitempty" tf:"managed_response_headers,omitempty"`

	// (String) The unique ID of the zone.
	// The unique ID of the zone.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type TransformsObservation struct {

	// (String) The unique ID of the zone.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes List) The list of Managed Request Transforms. (see below for nested schema)
	ManagedRequestHeaders []ManagedRequestHeadersObservation `json:"managedRequestHeaders,omitempty" tf:"managed_request_headers,omitempty"`

	// (Attributes List) The list of Managed Response Transforms. (see below for nested schema)
	ManagedResponseHeaders []ManagedResponseHeadersObservation `json:"managedResponseHeaders,omitempty" tf:"managed_response_headers,omitempty"`

	// (String) The unique ID of the zone.
	// The unique ID of the zone.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type TransformsParameters struct {

	// (Attributes List) The list of Managed Request Transforms. (see below for nested schema)
	// +kubebuilder:validation:Optional
	ManagedRequestHeaders []ManagedRequestHeadersParameters `json:"managedRequestHeaders,omitempty" tf:"managed_request_headers,omitempty"`

	// (Attributes List) The list of Managed Response Transforms. (see below for nested schema)
	// +kubebuilder:validation:Optional
	ManagedResponseHeaders []ManagedResponseHeadersParameters `json:"managedResponseHeaders,omitempty" tf:"managed_response_headers,omitempty"`

	// (String) The unique ID of the zone.
	// The unique ID of the zone.
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// TransformsSpec defines the desired state of Transforms
type TransformsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransformsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TransformsInitParameters `json:"initProvider,omitempty"`
}

// TransformsStatus defines the observed state of Transforms.
type TransformsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransformsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Transforms is the Schema for the Transformss API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Transforms struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.managedRequestHeaders) || (has(self.initProvider) && has(self.initProvider.managedRequestHeaders))",message="spec.forProvider.managedRequestHeaders is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.managedResponseHeaders) || (has(self.initProvider) && has(self.initProvider.managedResponseHeaders))",message="spec.forProvider.managedResponseHeaders is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   TransformsSpec   `json:"spec"`
	Status TransformsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransformsList contains a list of Transformss
type TransformsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Transforms `json:"items"`
}

// Repository type metadata.
var (
	Transforms_Kind             = "Transforms"
	Transforms_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Transforms_Kind}.String()
	Transforms_KindAPIVersion   = Transforms_Kind + "." + CRDGroupVersion.String()
	Transforms_GroupVersionKind = CRDGroupVersion.WithKind(Transforms_Kind)
)

func init() {
	SchemeBuilder.Register(&Transforms{}, &TransformsList{})
}
