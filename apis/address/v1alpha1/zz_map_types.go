// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MapInitParameters struct {

	// (String) Identifier of a Cloudflare account.
	// Identifier of a Cloudflare account.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
	// If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
	DefaultSni *string `json:"defaultSni,omitempty" tf:"default_sni,omitempty"`

	// (String) An optional description field which may be used to describe the types of IPs or zones on the map.
	// An optional description field which may be used to describe the types of IPs or zones on the map.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether the Address Map is enabled or not. Cloudflare's DNS will not respond with IP addresses on an Address Map until the map is enabled.
	// Whether the Address Map is enabled or not. Cloudflare's DNS will not respond with IP addresses on an Address Map until the map is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (List of String)
	Ips []*string `json:"ips,omitempty" tf:"ips,omitempty"`

	// (Attributes List) Zones and Accounts which will be assigned IPs on this Address Map. A zone membership will take priority over an account membership. (see below for nested schema)
	Memberships []MembershipsInitParameters `json:"memberships,omitempty" tf:"memberships,omitempty"`
}

type MapObservation struct {

	// (String) Identifier of a Cloudflare account.
	// Identifier of a Cloudflare account.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// managed maps.
	// If set to false, then the Address Map cannot be deleted via API. This is true for Cloudflare-managed maps.
	CanDelete *bool `json:"canDelete,omitempty" tf:"can_delete,omitempty"`

	// managed maps.
	// If set to false, then the IPs on the Address Map cannot be modified via the API. This is true for Cloudflare-managed maps.
	CanModifyIps *bool `json:"canModifyIps,omitempty" tf:"can_modify_ips,omitempty"`

	// (String)
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
	// If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
	DefaultSni *string `json:"defaultSni,omitempty" tf:"default_sni,omitempty"`

	// (String) An optional description field which may be used to describe the types of IPs or zones on the map.
	// An optional description field which may be used to describe the types of IPs or zones on the map.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether the Address Map is enabled or not. Cloudflare's DNS will not respond with IP addresses on an Address Map until the map is enabled.
	// Whether the Address Map is enabled or not. Cloudflare's DNS will not respond with IP addresses on an Address Map until the map is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Identifier of an Address Map.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (List of String)
	Ips []*string `json:"ips,omitempty" tf:"ips,omitempty"`

	// (Attributes List) Zones and Accounts which will be assigned IPs on this Address Map. A zone membership will take priority over an account membership. (see below for nested schema)
	Memberships []MembershipsObservation `json:"memberships,omitempty" tf:"memberships,omitempty"`

	// (String)
	ModifiedAt *string `json:"modifiedAt,omitempty" tf:"modified_at,omitempty"`
}

type MapParameters struct {

	// (String) Identifier of a Cloudflare account.
	// Identifier of a Cloudflare account.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
	// If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
	// +kubebuilder:validation:Optional
	DefaultSni *string `json:"defaultSni,omitempty" tf:"default_sni,omitempty"`

	// (String) An optional description field which may be used to describe the types of IPs or zones on the map.
	// An optional description field which may be used to describe the types of IPs or zones on the map.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether the Address Map is enabled or not. Cloudflare's DNS will not respond with IP addresses on an Address Map until the map is enabled.
	// Whether the Address Map is enabled or not. Cloudflare's DNS will not respond with IP addresses on an Address Map until the map is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (List of String)
	// +kubebuilder:validation:Optional
	Ips []*string `json:"ips,omitempty" tf:"ips,omitempty"`

	// (Attributes List) Zones and Accounts which will be assigned IPs on this Address Map. A zone membership will take priority over an account membership. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Memberships []MembershipsParameters `json:"memberships,omitempty" tf:"memberships,omitempty"`
}

type MembershipsInitParameters struct {

	// (String) The identifier for the membership (eg. a zone or account tag).
	// The identifier for the membership (eg. a zone or account tag).
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (String) The type of the membership.
	// The type of the membership.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`
}

type MembershipsObservation struct {

	// managed maps.
	// Controls whether the membership can be deleted via the API or not.
	CanDelete *bool `json:"canDelete,omitempty" tf:"can_delete,omitempty"`

	// (String)
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) The identifier for the membership (eg. a zone or account tag).
	// The identifier for the membership (eg. a zone or account tag).
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (String) The type of the membership.
	// The type of the membership.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`
}

type MembershipsParameters struct {

	// (String) The identifier for the membership (eg. a zone or account tag).
	// The identifier for the membership (eg. a zone or account tag).
	// +kubebuilder:validation:Optional
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (String) The type of the membership.
	// The type of the membership.
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`
}

// MapSpec defines the desired state of Map
type MapSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MapParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MapInitParameters `json:"initProvider,omitempty"`
}

// MapStatus defines the observed state of Map.
type MapStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MapObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Map is the Schema for the Maps API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Map struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.memberships) || (has(self.initProvider) && has(self.initProvider.memberships))",message="spec.forProvider.memberships is a required parameter"
	Spec   MapSpec   `json:"spec"`
	Status MapStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MapList contains a list of Maps
type MapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Map `json:"items"`
}

// Repository type metadata.
var (
	Map_Kind             = "Map"
	Map_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Map_Kind}.String()
	Map_KindAPIVersion   = Map_Kind + "." + CRDGroupVersion.String()
	Map_GroupVersionKind = CRDGroupVersion.WithKind(Map_Kind)
)

func init() {
	SchemeBuilder.Register(&Map{}, &MapList{})
}
