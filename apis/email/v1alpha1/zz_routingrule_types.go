// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoutingRuleActionsInitParameters struct {

	// (String) Type of supported action.
	// Type of supported action.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (List of String)
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type RoutingRuleActionsObservation struct {

	// (String) Type of supported action.
	// Type of supported action.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (List of String)
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type RoutingRuleActionsParameters struct {

	// (String) Type of supported action.
	// Type of supported action.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (List of String)
	// +kubebuilder:validation:Optional
	Value []*string `json:"value" tf:"value,omitempty"`
}

type RoutingRuleInitParameters struct {

	// (Attributes List) List actions patterns. (see below for nested schema)
	Actions []RoutingRuleActionsInitParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Boolean) Routing rule status.
	// Routing rule status.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes List) Matching patterns to forward to your actions. (see below for nested schema)
	Matchers []RoutingRuleMatchersInitParameters `json:"matchers,omitempty" tf:"matchers,omitempty"`

	// (Number) Priority of the routing rule.
	// Priority of the routing rule.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RoutingRuleMatchersInitParameters struct {

	// (String) Field for type matcher.
	// Field for type matcher.
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// (String) Type of supported action.
	// Type of matcher.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (List of String)
	// Value for matcher.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RoutingRuleMatchersObservation struct {

	// (String) Field for type matcher.
	// Field for type matcher.
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// (String) Type of supported action.
	// Type of matcher.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (List of String)
	// Value for matcher.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RoutingRuleMatchersParameters struct {

	// (String) Field for type matcher.
	// Field for type matcher.
	// +kubebuilder:validation:Optional
	Field *string `json:"field" tf:"field,omitempty"`

	// (String) Type of supported action.
	// Type of matcher.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (List of String)
	// Value for matcher.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type RoutingRuleObservation struct {

	// (Attributes List) List actions patterns. (see below for nested schema)
	Actions []RoutingRuleActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Boolean) Routing rule status.
	// Routing rule status.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Routing rule identifier.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes List) Matching patterns to forward to your actions. (see below for nested schema)
	Matchers []RoutingRuleMatchersObservation `json:"matchers,omitempty" tf:"matchers,omitempty"`

	// (Number) Priority of the routing rule.
	// Priority of the routing rule.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// (String) Routing rule tag. (Deprecated, replaced by routing rule identifier)
	// Routing rule tag. (Deprecated, replaced by routing rule identifier)
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RoutingRuleParameters struct {

	// (Attributes List) List actions patterns. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Actions []RoutingRuleActionsParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Boolean) Routing rule status.
	// Routing rule status.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes List) Matching patterns to forward to your actions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Matchers []RoutingRuleMatchersParameters `json:"matchers,omitempty" tf:"matchers,omitempty"`

	// (Number) Priority of the routing rule.
	// Priority of the routing rule.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// RoutingRuleSpec defines the desired state of RoutingRule
type RoutingRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoutingRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RoutingRuleInitParameters `json:"initProvider,omitempty"`
}

// RoutingRuleStatus defines the observed state of RoutingRule.
type RoutingRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoutingRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RoutingRule is the Schema for the RoutingRules API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type RoutingRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.actions) || (has(self.initProvider) && has(self.initProvider.actions))",message="spec.forProvider.actions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.matchers) || (has(self.initProvider) && has(self.initProvider.matchers))",message="spec.forProvider.matchers is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   RoutingRuleSpec   `json:"spec"`
	Status RoutingRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoutingRuleList contains a list of RoutingRules
type RoutingRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RoutingRule `json:"items"`
}

// Repository type metadata.
var (
	RoutingRule_Kind             = "RoutingRule"
	RoutingRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RoutingRule_Kind}.String()
	RoutingRule_KindAPIVersion   = RoutingRule_Kind + "." + CRDGroupVersion.String()
	RoutingRule_GroupVersionKind = CRDGroupVersion.WithKind(RoutingRule_Kind)
)

func init() {
	SchemeBuilder.Register(&RoutingRule{}, &RoutingRuleList{})
}
