// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionsInitParameters struct {

	// all rule.
	// Type of action for catch-all rule.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (List of String)
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type ActionsObservation struct {

	// all rule.
	// Type of action for catch-all rule.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (List of String)
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type ActionsParameters struct {

	// all rule.
	// Type of action for catch-all rule.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (List of String)
	// +kubebuilder:validation:Optional
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type MatchersInitParameters struct {

	// all rule.
	// Type of matcher. Default is 'all'.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MatchersObservation struct {

	// all rule.
	// Type of matcher. Default is 'all'.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MatchersParameters struct {

	// all rule.
	// Type of matcher. Default is 'all'.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type RoutingCatchAllInitParameters struct {

	// all routing rule. (see below for nested schema)
	Actions []ActionsInitParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Boolean) Routing rule status.
	// Routing rule status.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// all routing rule. (see below for nested schema)
	Matchers []MatchersInitParameters `json:"matchers,omitempty" tf:"matchers,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RoutingCatchAllObservation struct {

	// all routing rule. (see below for nested schema)
	Actions []ActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Boolean) Routing rule status.
	// Routing rule status.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// all routing rule. (see below for nested schema)
	Matchers []MatchersObservation `json:"matchers,omitempty" tf:"matchers,omitempty"`

	// (String) Routing rule tag. (Deprecated, replaced by routing rule identifier)
	// Routing rule tag. (Deprecated, replaced by routing rule identifier)
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RoutingCatchAllParameters struct {

	// all routing rule. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Actions []ActionsParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Boolean) Routing rule status.
	// Routing rule status.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// all routing rule. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Matchers []MatchersParameters `json:"matchers,omitempty" tf:"matchers,omitempty"`

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// RoutingCatchAllSpec defines the desired state of RoutingCatchAll
type RoutingCatchAllSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoutingCatchAllParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RoutingCatchAllInitParameters `json:"initProvider,omitempty"`
}

// RoutingCatchAllStatus defines the observed state of RoutingCatchAll.
type RoutingCatchAllStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoutingCatchAllObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RoutingCatchAll is the Schema for the RoutingCatchAlls API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type RoutingCatchAll struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.actions) || (has(self.initProvider) && has(self.initProvider.actions))",message="spec.forProvider.actions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.matchers) || (has(self.initProvider) && has(self.initProvider.matchers))",message="spec.forProvider.matchers is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   RoutingCatchAllSpec   `json:"spec"`
	Status RoutingCatchAllStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoutingCatchAllList contains a list of RoutingCatchAlls
type RoutingCatchAllList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RoutingCatchAll `json:"items"`
}

// Repository type metadata.
var (
	RoutingCatchAll_Kind             = "RoutingCatchAll"
	RoutingCatchAll_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RoutingCatchAll_Kind}.String()
	RoutingCatchAll_KindAPIVersion   = RoutingCatchAll_Kind + "." + CRDGroupVersion.String()
	RoutingCatchAll_GroupVersionKind = CRDGroupVersion.WithKind(RoutingCatchAll_Kind)
)

func init() {
	SchemeBuilder.Register(&RoutingCatchAll{}, &RoutingCatchAllList{})
}
