// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityImpersonationRegistryInitParameters struct {

	// (String) Account Identifier
	// Account Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String)
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (Boolean)
	IsEmailRegex *bool `json:"isEmailRegex,omitempty" tf:"is_email_regex,omitempty"`
}

type SecurityImpersonationRegistryObservation struct {

	// (String) Account Identifier
	// Account Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String)
	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	// (String)
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (Number)
	DirectoryID *float64 `json:"directoryId,omitempty" tf:"directory_id,omitempty"`

	// (Number)
	DirectoryNodeID *float64 `json:"directoryNodeId,omitempty" tf:"directory_node_id,omitempty"`

	// (String)
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (String)
	ExternalDirectoryNodeID *string `json:"externalDirectoryNodeId,omitempty" tf:"external_directory_node_id,omitempty"`

	// (Number) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean)
	IsEmailRegex *bool `json:"isEmailRegex,omitempty" tf:"is_email_regex,omitempty"`

	// (String)
	LastModified *string `json:"lastModified,omitempty" tf:"last_modified,omitempty"`

	// (String)
	Provenance *string `json:"provenance,omitempty" tf:"provenance,omitempty"`
}

type SecurityImpersonationRegistryParameters struct {

	// (String) Account Identifier
	// Account Identifier
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	IsEmailRegex *bool `json:"isEmailRegex,omitempty" tf:"is_email_regex,omitempty"`
}

// SecurityImpersonationRegistrySpec defines the desired state of SecurityImpersonationRegistry
type SecurityImpersonationRegistrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityImpersonationRegistryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecurityImpersonationRegistryInitParameters `json:"initProvider,omitempty"`
}

// SecurityImpersonationRegistryStatus defines the observed state of SecurityImpersonationRegistry.
type SecurityImpersonationRegistryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityImpersonationRegistryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecurityImpersonationRegistry is the Schema for the SecurityImpersonationRegistrys API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type SecurityImpersonationRegistry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.email) || (has(self.initProvider) && has(self.initProvider.email))",message="spec.forProvider.email is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.isEmailRegex) || (has(self.initProvider) && has(self.initProvider.isEmailRegex))",message="spec.forProvider.isEmailRegex is a required parameter"
	Spec   SecurityImpersonationRegistrySpec   `json:"spec"`
	Status SecurityImpersonationRegistryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityImpersonationRegistryList contains a list of SecurityImpersonationRegistrys
type SecurityImpersonationRegistryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityImpersonationRegistry `json:"items"`
}

// Repository type metadata.
var (
	SecurityImpersonationRegistry_Kind             = "SecurityImpersonationRegistry"
	SecurityImpersonationRegistry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityImpersonationRegistry_Kind}.String()
	SecurityImpersonationRegistry_KindAPIVersion   = SecurityImpersonationRegistry_Kind + "." + CRDGroupVersion.String()
	SecurityImpersonationRegistry_GroupVersionKind = CRDGroupVersion.WithKind(SecurityImpersonationRegistry_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityImpersonationRegistry{}, &SecurityImpersonationRegistryList{})
}
