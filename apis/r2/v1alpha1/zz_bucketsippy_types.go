// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketSippyInitParameters struct {

	// (String) Account ID
	// Account ID
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Name of the bucket
	// Name of the bucket
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// (Attributes) R2 bucket to copy objects to (see below for nested schema)
	Destination *DestinationInitParameters `json:"destination,omitempty" tf:"destination,omitempty"`

	// (Attributes) AWS S3 bucket to copy objects from (see below for nested schema)
	Source *SourceInitParameters `json:"source,omitempty" tf:"source,omitempty"`
}

type BucketSippyObservation struct {

	// (String) Account ID
	// Account ID
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Name of the bucket
	// Name of the bucket
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// (Attributes) R2 bucket to copy objects to (see below for nested schema)
	Destination *DestinationObservation `json:"destination,omitempty" tf:"destination,omitempty"`

	// (Boolean) State of Sippy for this bucket
	// State of Sippy for this bucket
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes) AWS S3 bucket to copy objects from (see below for nested schema)
	Source *SourceObservation `json:"source,omitempty" tf:"source,omitempty"`
}

type BucketSippyParameters struct {

	// (String) Account ID
	// Account ID
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Name of the bucket
	// Name of the bucket
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// (Attributes) R2 bucket to copy objects to (see below for nested schema)
	// +kubebuilder:validation:Optional
	Destination *DestinationParameters `json:"destination,omitempty" tf:"destination,omitempty"`

	// (Attributes) AWS S3 bucket to copy objects from (see below for nested schema)
	// +kubebuilder:validation:Optional
	Source *SourceParameters `json:"source,omitempty" tf:"source,omitempty"`
}

type DestinationInitParameters struct {

	// (String) ID of a Cloudflare API token.
	// This is the value labelled "Access Key ID" when creating an API
	// token from the R2 dashboard.
	// ID of a Cloudflare API token.
	// This is the value labelled "Access Key ID" when creating an API
	// token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
	//
	// Sippy will use this token when writing objects to R2, so it is
	// best to scope this token to the bucket you're enabling Sippy for.
	AccessKeyID *string `json:"accessKeyId,omitempty" tf:"access_key_id,omitempty"`

	// (String)
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// (String) Value of a Cloudflare API token.
	// This is the value labelled "Secret Access Key" when creating an API
	// token from the R2 dashboard.
	// Value of a Cloudflare API token.
	// This is the value labelled "Secret Access Key" when creating an API
	// token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
	//
	// Sippy will use this token when writing objects to R2, so it is
	// best to scope this token to the bucket you're enabling Sippy for.
	SecretAccessKey *string `json:"secretAccessKey,omitempty" tf:"secret_access_key,omitempty"`
}

type DestinationObservation struct {

	// (String) ID of a Cloudflare API token.
	// This is the value labelled "Access Key ID" when creating an API
	// token from the R2 dashboard.
	// ID of a Cloudflare API token.
	// This is the value labelled "Access Key ID" when creating an API
	// token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
	//
	// Sippy will use this token when writing objects to R2, so it is
	// best to scope this token to the bucket you're enabling Sippy for.
	AccessKeyID *string `json:"accessKeyId,omitempty" tf:"access_key_id,omitempty"`

	// (String)
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// (String) Value of a Cloudflare API token.
	// This is the value labelled "Secret Access Key" when creating an API
	// token from the R2 dashboard.
	// Value of a Cloudflare API token.
	// This is the value labelled "Secret Access Key" when creating an API
	// token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
	//
	// Sippy will use this token when writing objects to R2, so it is
	// best to scope this token to the bucket you're enabling Sippy for.
	SecretAccessKey *string `json:"secretAccessKey,omitempty" tf:"secret_access_key,omitempty"`
}

type DestinationParameters struct {

	// (String) ID of a Cloudflare API token.
	// This is the value labelled "Access Key ID" when creating an API
	// token from the R2 dashboard.
	// ID of a Cloudflare API token.
	// This is the value labelled "Access Key ID" when creating an API
	// token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
	//
	// Sippy will use this token when writing objects to R2, so it is
	// best to scope this token to the bucket you're enabling Sippy for.
	// +kubebuilder:validation:Optional
	AccessKeyID *string `json:"accessKeyId,omitempty" tf:"access_key_id,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// (String) Value of a Cloudflare API token.
	// This is the value labelled "Secret Access Key" when creating an API
	// token from the R2 dashboard.
	// Value of a Cloudflare API token.
	// This is the value labelled "Secret Access Key" when creating an API
	// token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
	//
	// Sippy will use this token when writing objects to R2, so it is
	// best to scope this token to the bucket you're enabling Sippy for.
	// +kubebuilder:validation:Optional
	SecretAccessKey *string `json:"secretAccessKey,omitempty" tf:"secret_access_key,omitempty"`
}

type SourceInitParameters struct {

	// (String) ID of a Cloudflare API token.
	// This is the value labelled "Access Key ID" when creating an API
	// token from the R2 dashboard.
	// Access Key ID of an IAM credential (ideally scoped to a single S3 bucket)
	AccessKeyID *string `json:"accessKeyId,omitempty" tf:"access_key_id,omitempty"`

	// (String) Name of the AWS S3 bucket
	// Name of the AWS S3 bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// (String) Client email of an IAM credential (ideally scoped to a single GCS bucket)
	// Client email of an IAM credential (ideally scoped to a single GCS bucket)
	ClientEmail *string `json:"clientEmail,omitempty" tf:"client_email,omitempty"`

	// (String) Private Key of an IAM credential (ideally scoped to a single GCS bucket)
	// Private Key of an IAM credential (ideally scoped to a single GCS bucket)
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	// (String)
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// (String) Name of the AWS availability zone
	// Name of the AWS availability zone
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) Value of a Cloudflare API token.
	// This is the value labelled "Secret Access Key" when creating an API
	// token from the R2 dashboard.
	// Secret Access Key of an IAM credential (ideally scoped to a single S3 bucket)
	SecretAccessKey *string `json:"secretAccessKey,omitempty" tf:"secret_access_key,omitempty"`
}

type SourceObservation struct {

	// (String) ID of a Cloudflare API token.
	// This is the value labelled "Access Key ID" when creating an API
	// token from the R2 dashboard.
	// Access Key ID of an IAM credential (ideally scoped to a single S3 bucket)
	AccessKeyID *string `json:"accessKeyId,omitempty" tf:"access_key_id,omitempty"`

	// (String) Name of the AWS S3 bucket
	// Name of the AWS S3 bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// (String) Client email of an IAM credential (ideally scoped to a single GCS bucket)
	// Client email of an IAM credential (ideally scoped to a single GCS bucket)
	ClientEmail *string `json:"clientEmail,omitempty" tf:"client_email,omitempty"`

	// (String) Private Key of an IAM credential (ideally scoped to a single GCS bucket)
	// Private Key of an IAM credential (ideally scoped to a single GCS bucket)
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	// (String)
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// (String) Name of the AWS availability zone
	// Name of the AWS availability zone
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) Value of a Cloudflare API token.
	// This is the value labelled "Secret Access Key" when creating an API
	// token from the R2 dashboard.
	// Secret Access Key of an IAM credential (ideally scoped to a single S3 bucket)
	SecretAccessKey *string `json:"secretAccessKey,omitempty" tf:"secret_access_key,omitempty"`
}

type SourceParameters struct {

	// (String) ID of a Cloudflare API token.
	// This is the value labelled "Access Key ID" when creating an API
	// token from the R2 dashboard.
	// Access Key ID of an IAM credential (ideally scoped to a single S3 bucket)
	// +kubebuilder:validation:Optional
	AccessKeyID *string `json:"accessKeyId,omitempty" tf:"access_key_id,omitempty"`

	// (String) Name of the AWS S3 bucket
	// Name of the AWS S3 bucket
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// (String) Client email of an IAM credential (ideally scoped to a single GCS bucket)
	// Client email of an IAM credential (ideally scoped to a single GCS bucket)
	// +kubebuilder:validation:Optional
	ClientEmail *string `json:"clientEmail,omitempty" tf:"client_email,omitempty"`

	// (String) Private Key of an IAM credential (ideally scoped to a single GCS bucket)
	// Private Key of an IAM credential (ideally scoped to a single GCS bucket)
	// +kubebuilder:validation:Optional
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// (String) Name of the AWS availability zone
	// Name of the AWS availability zone
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) Value of a Cloudflare API token.
	// This is the value labelled "Secret Access Key" when creating an API
	// token from the R2 dashboard.
	// Secret Access Key of an IAM credential (ideally scoped to a single S3 bucket)
	// +kubebuilder:validation:Optional
	SecretAccessKey *string `json:"secretAccessKey,omitempty" tf:"secret_access_key,omitempty"`
}

// BucketSippySpec defines the desired state of BucketSippy
type BucketSippySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketSippyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketSippyInitParameters `json:"initProvider,omitempty"`
}

// BucketSippyStatus defines the observed state of BucketSippy.
type BucketSippyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketSippyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BucketSippy is the Schema for the BucketSippys API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type BucketSippy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bucketName) || (has(self.initProvider) && has(self.initProvider.bucketName))",message="spec.forProvider.bucketName is a required parameter"
	Spec   BucketSippySpec   `json:"spec"`
	Status BucketSippyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketSippyList contains a list of BucketSippys
type BucketSippyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketSippy `json:"items"`
}

// Repository type metadata.
var (
	BucketSippy_Kind             = "BucketSippy"
	BucketSippy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketSippy_Kind}.String()
	BucketSippy_KindAPIVersion   = BucketSippy_Kind + "." + CRDGroupVersion.String()
	BucketSippy_GroupVersionKind = CRDGroupVersion.WithKind(BucketSippy_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketSippy{}, &BucketSippyList{})
}
