// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomDomainInitParameters struct {

	// (String) Account ID
	// Account ID
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Name of the bucket
	// Name of the bucket
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// (String) Name of the custom domain to be added
	// Name of the custom domain to be added
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) Name of the custom domain
	// Name of the custom domain
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// (Boolean) Whether to enable public bucket access at the custom domain. If undefined, the domain will be enabled.
	// Whether to enable public bucket access at the custom domain. If undefined, the domain will be enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
	// Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
	MinTLS *string `json:"minTls,omitempty" tf:"min_tls,omitempty"`

	// (Attributes) (see below for nested schema)
	Status *StatusInitParameters `json:"status,omitempty" tf:"status,omitempty"`

	// (String) Zone ID of the custom domain
	// Zone ID of the custom domain
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type CustomDomainObservation struct {

	// (String) Account ID
	// Account ID
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Name of the bucket
	// Name of the bucket
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// (String) Name of the custom domain to be added
	// Name of the custom domain to be added
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) Name of the custom domain
	// Name of the custom domain
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// (Boolean) Whether to enable public bucket access at the custom domain. If undefined, the domain will be enabled.
	// Whether to enable public bucket access at the custom domain. If undefined, the domain will be enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
	// Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
	MinTLS *string `json:"minTls,omitempty" tf:"min_tls,omitempty"`

	// (Attributes) (see below for nested schema)
	Status *StatusObservation `json:"status,omitempty" tf:"status,omitempty"`

	// (String) Zone ID of the custom domain
	// Zone ID of the custom domain
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// (String) Zone that the custom domain resides in
	// Zone that the custom domain resides in
	ZoneName *string `json:"zoneName,omitempty" tf:"zone_name,omitempty"`
}

type CustomDomainParameters struct {

	// (String) Account ID
	// Account ID
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Name of the bucket
	// Name of the bucket
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// (String) Name of the custom domain to be added
	// Name of the custom domain to be added
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) Name of the custom domain
	// Name of the custom domain
	// +kubebuilder:validation:Optional
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// (Boolean) Whether to enable public bucket access at the custom domain. If undefined, the domain will be enabled.
	// Whether to enable public bucket access at the custom domain. If undefined, the domain will be enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
	// Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
	// +kubebuilder:validation:Optional
	MinTLS *string `json:"minTls,omitempty" tf:"min_tls,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Status *StatusParameters `json:"status,omitempty" tf:"status,omitempty"`

	// (String) Zone ID of the custom domain
	// Zone ID of the custom domain
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type StatusInitParameters struct {
}

type StatusObservation struct {

	// (String) Ownership status of the domain
	// Ownership status of the domain
	Ownership *string `json:"ownership,omitempty" tf:"ownership,omitempty"`

	// (String) SSL certificate status
	// SSL certificate status
	SSL *string `json:"ssl,omitempty" tf:"ssl,omitempty"`
}

type StatusParameters struct {
}

// CustomDomainSpec defines the desired state of CustomDomain
type CustomDomainSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomDomainParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CustomDomainInitParameters `json:"initProvider,omitempty"`
}

// CustomDomainStatus defines the observed state of CustomDomain.
type CustomDomainStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomDomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CustomDomain is the Schema for the CustomDomains API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type CustomDomain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bucketName) || (has(self.initProvider) && has(self.initProvider.bucketName))",message="spec.forProvider.bucketName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domain) || (has(self.initProvider) && has(self.initProvider.domain))",message="spec.forProvider.domain is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   CustomDomainSpec   `json:"spec"`
	Status CustomDomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomDomainList contains a list of CustomDomains
type CustomDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomDomain `json:"items"`
}

// Repository type metadata.
var (
	CustomDomain_Kind             = "CustomDomain"
	CustomDomain_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomDomain_Kind}.String()
	CustomDomain_KindAPIVersion   = CustomDomain_Kind + "." + CRDGroupVersion.String()
	CustomDomain_GroupVersionKind = CRDGroupVersion.WithKind(CustomDomain_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomDomain{}, &CustomDomainList{})
}
