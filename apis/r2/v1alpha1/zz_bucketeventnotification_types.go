// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketEventNotificationInitParameters struct {

	// (String) Account ID
	// Account ID
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Name of the bucket
	// Name of the bucket
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// (String) Queue ID
	// Queue ID
	QueueID *string `json:"queueId,omitempty" tf:"queue_id,omitempty"`

	// (Attributes List) List of queues associated with the bucket. (see below for nested schema)
	Queues []QueuesInitParameters `json:"queues,omitempty" tf:"queues,omitempty"`

	// (Attributes List) Array of rules to drive notifications (see below for nested schema)
	Rules []BucketEventNotificationRulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type BucketEventNotificationObservation struct {

	// (String) Account ID
	// Account ID
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Name of the bucket
	// Name of the bucket
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Queue ID
	// Queue ID
	QueueID *string `json:"queueId,omitempty" tf:"queue_id,omitempty"`

	// (Attributes List) List of queues associated with the bucket. (see below for nested schema)
	Queues []QueuesObservation `json:"queues,omitempty" tf:"queues,omitempty"`

	// (Attributes List) Array of rules to drive notifications (see below for nested schema)
	Rules []BucketEventNotificationRulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`
}

type BucketEventNotificationParameters struct {

	// (String) Account ID
	// Account ID
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Name of the bucket
	// Name of the bucket
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// (String) Queue ID
	// Queue ID
	// +kubebuilder:validation:Optional
	QueueID *string `json:"queueId,omitempty" tf:"queue_id,omitempty"`

	// (Attributes List) List of queues associated with the bucket. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Queues []QueuesParameters `json:"queues,omitempty" tf:"queues,omitempty"`

	// (Attributes List) Array of rules to drive notifications (see below for nested schema)
	// +kubebuilder:validation:Optional
	Rules []BucketEventNotificationRulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type BucketEventNotificationRulesInitParameters struct {

	// (List of String) Array of R2 object actions that will trigger notifications
	// Array of R2 object actions that will trigger notifications
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (String) A description that can be used to identify the event notification rule after creation
	// A description that can be used to identify the event notification rule after creation
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Notifications will be sent only for objects with this prefix
	// Notifications will be sent only for objects with this prefix
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// (String) Notifications will be sent only for objects with this suffix
	// Notifications will be sent only for objects with this suffix
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`
}

type BucketEventNotificationRulesObservation struct {

	// (List of String) Array of R2 object actions that will trigger notifications
	// Array of R2 object actions that will trigger notifications
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (String) A description that can be used to identify the event notification rule after creation
	// A description that can be used to identify the event notification rule after creation
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Notifications will be sent only for objects with this prefix
	// Notifications will be sent only for objects with this prefix
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// (String) Notifications will be sent only for objects with this suffix
	// Notifications will be sent only for objects with this suffix
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`
}

type BucketEventNotificationRulesParameters struct {

	// (List of String) Array of R2 object actions that will trigger notifications
	// Array of R2 object actions that will trigger notifications
	// +kubebuilder:validation:Optional
	Actions []*string `json:"actions" tf:"actions,omitempty"`

	// (String) A description that can be used to identify the event notification rule after creation
	// A description that can be used to identify the event notification rule after creation
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Notifications will be sent only for objects with this prefix
	// Notifications will be sent only for objects with this prefix
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// (String) Notifications will be sent only for objects with this suffix
	// Notifications will be sent only for objects with this suffix
	// +kubebuilder:validation:Optional
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`
}

type QueuesInitParameters struct {

	// (Attributes List) Array of rules to drive notifications (see below for nested schema)
	Rules []QueuesRulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type QueuesObservation struct {

	// (String) Queue ID
	// Queue ID
	QueueID *string `json:"queueId,omitempty" tf:"queue_id,omitempty"`

	// (String) Name of the queue
	// Name of the queue
	QueueName *string `json:"queueName,omitempty" tf:"queue_name,omitempty"`

	// (Attributes List) Array of rules to drive notifications (see below for nested schema)
	Rules []QueuesRulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`
}

type QueuesParameters struct {

	// (Attributes List) Array of rules to drive notifications (see below for nested schema)
	// +kubebuilder:validation:Optional
	Rules []QueuesRulesParameters `json:"rules" tf:"rules,omitempty"`
}

type QueuesRulesInitParameters struct {
}

type QueuesRulesObservation struct {

	// (List of String) Array of R2 object actions that will trigger notifications
	// Array of R2 object actions that will trigger notifications
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (String) Timestamp when the rule was created
	// Timestamp when the rule was created
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) A description that can be used to identify the event notification rule after creation
	// A description that can be used to identify the event notification rule after creation
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Notifications will be sent only for objects with this prefix
	// Notifications will be sent only for objects with this prefix
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// (String) Rule ID
	// Rule ID
	RuleID *string `json:"ruleId,omitempty" tf:"rule_id,omitempty"`

	// (String) Notifications will be sent only for objects with this suffix
	// Notifications will be sent only for objects with this suffix
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`
}

type QueuesRulesParameters struct {
}

// BucketEventNotificationSpec defines the desired state of BucketEventNotification
type BucketEventNotificationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketEventNotificationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketEventNotificationInitParameters `json:"initProvider,omitempty"`
}

// BucketEventNotificationStatus defines the observed state of BucketEventNotification.
type BucketEventNotificationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketEventNotificationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BucketEventNotification is the Schema for the BucketEventNotifications API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type BucketEventNotification struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bucketName) || (has(self.initProvider) && has(self.initProvider.bucketName))",message="spec.forProvider.bucketName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.queues) || (has(self.initProvider) && has(self.initProvider.queues))",message="spec.forProvider.queues is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rules) || (has(self.initProvider) && has(self.initProvider.rules))",message="spec.forProvider.rules is a required parameter"
	Spec   BucketEventNotificationSpec   `json:"spec"`
	Status BucketEventNotificationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketEventNotificationList contains a list of BucketEventNotifications
type BucketEventNotificationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketEventNotification `json:"items"`
}

// Repository type metadata.
var (
	BucketEventNotification_Kind             = "BucketEventNotification"
	BucketEventNotification_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketEventNotification_Kind}.String()
	BucketEventNotification_KindAPIVersion   = BucketEventNotification_Kind + "." + CRDGroupVersion.String()
	BucketEventNotification_GroupVersionKind = CRDGroupVersion.WithKind(BucketEventNotification_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketEventNotification{}, &BucketEventNotificationList{})
}
