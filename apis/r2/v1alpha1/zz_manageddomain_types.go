// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagedDomainInitParameters struct {

	// (String) Account ID
	// Account ID
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Name of the bucket
	// Name of the bucket
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// (Boolean) Whether to enable public bucket access at the r2.dev domain
	// Whether to enable public bucket access at the r2.dev domain
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ManagedDomainObservation struct {

	// (String) Account ID
	// Account ID
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Bucket ID
	// Bucket ID
	BucketID *string `json:"bucketId,omitempty" tf:"bucket_id,omitempty"`

	// (String) Name of the bucket
	// Name of the bucket
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// (String) Domain name of the bucket's r2.dev domain
	// Domain name of the bucket's r2.dev domain
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (Boolean) Whether to enable public bucket access at the r2.dev domain
	// Whether to enable public bucket access at the r2.dev domain
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ManagedDomainParameters struct {

	// (String) Account ID
	// Account ID
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Name of the bucket
	// Name of the bucket
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// (Boolean) Whether to enable public bucket access at the r2.dev domain
	// Whether to enable public bucket access at the r2.dev domain
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

// ManagedDomainSpec defines the desired state of ManagedDomain
type ManagedDomainSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedDomainParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagedDomainInitParameters `json:"initProvider,omitempty"`
}

// ManagedDomainStatus defines the observed state of ManagedDomain.
type ManagedDomainStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedDomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ManagedDomain is the Schema for the ManagedDomains API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type ManagedDomain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bucketName) || (has(self.initProvider) && has(self.initProvider.bucketName))",message="spec.forProvider.bucketName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	Spec   ManagedDomainSpec   `json:"spec"`
	Status ManagedDomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedDomainList contains a list of ManagedDomains
type ManagedDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedDomain `json:"items"`
}

// Repository type metadata.
var (
	ManagedDomain_Kind             = "ManagedDomain"
	ManagedDomain_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedDomain_Kind}.String()
	ManagedDomain_KindAPIVersion   = ManagedDomain_Kind + "." + CRDGroupVersion.String()
	ManagedDomain_GroupVersionKind = CRDGroupVersion.WithKind(ManagedDomain_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedDomain{}, &ManagedDomainList{})
}
