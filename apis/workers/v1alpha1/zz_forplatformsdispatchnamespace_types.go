// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ForPlatformsDispatchNamespaceInitParameters struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`
}

type ForPlatformsDispatchNamespaceObservation struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Identifier
	// Identifier
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// (String) When the script was created.
	// When the script was created.
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (String) Name of the Workers for Platforms dispatch namespace.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Identifier
	// Identifier
	ModifiedBy *string `json:"modifiedBy,omitempty" tf:"modified_by,omitempty"`

	// (String) When the script was last modified.
	// When the script was last modified.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (String) API Resource UUID tag.
	// API Resource UUID tag.
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// (String) Name of the Workers for Platforms dispatch namespace.
	// Name of the Workers for Platforms dispatch namespace.
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`

	// (Number) The current number of scripts in this Dispatch Namespace
	// The current number of scripts in this Dispatch Namespace
	ScriptCount *float64 `json:"scriptCount,omitempty" tf:"script_count,omitempty"`
}

type ForPlatformsDispatchNamespaceParameters struct {

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`
}

// ForPlatformsDispatchNamespaceSpec defines the desired state of ForPlatformsDispatchNamespace
type ForPlatformsDispatchNamespaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ForPlatformsDispatchNamespaceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ForPlatformsDispatchNamespaceInitParameters `json:"initProvider,omitempty"`
}

// ForPlatformsDispatchNamespaceStatus defines the observed state of ForPlatformsDispatchNamespace.
type ForPlatformsDispatchNamespaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ForPlatformsDispatchNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ForPlatformsDispatchNamespace is the Schema for the ForPlatformsDispatchNamespaces API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type ForPlatformsDispatchNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	Spec   ForPlatformsDispatchNamespaceSpec   `json:"spec"`
	Status ForPlatformsDispatchNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ForPlatformsDispatchNamespaceList contains a list of ForPlatformsDispatchNamespaces
type ForPlatformsDispatchNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ForPlatformsDispatchNamespace `json:"items"`
}

// Repository type metadata.
var (
	ForPlatformsDispatchNamespace_Kind             = "ForPlatformsDispatchNamespace"
	ForPlatformsDispatchNamespace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ForPlatformsDispatchNamespace_Kind}.String()
	ForPlatformsDispatchNamespace_KindAPIVersion   = ForPlatformsDispatchNamespace_Kind + "." + CRDGroupVersion.String()
	ForPlatformsDispatchNamespace_GroupVersionKind = CRDGroupVersion.WithKind(ForPlatformsDispatchNamespace_Kind)
)

func init() {
	SchemeBuilder.Register(&ForPlatformsDispatchNamespace{}, &ForPlatformsDispatchNamespaceList{})
}
