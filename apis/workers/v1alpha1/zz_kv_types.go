// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KvInitParameters struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// whitespace characters are valid. Use percent-encoding to define key names as part of a URL.
	// A key's name. The name may be at most 512 bytes. All printable, non-whitespace characters are valid. Use percent-encoding to define key names as part of a URL.
	KeyName *string `json:"keyName,omitempty" tf:"key_name,omitempty"`

	// (String) Arbitrary JSON to be associated with a key/value pair.
	// Arbitrary JSON to be associated with a key/value pair.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) Namespace identifier tag.
	// Namespace identifier tag.
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// (String) A byte sequence to be stored, up to 25 MiB in length.
	// A byte sequence to be stored, up to 25 MiB in length.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type KvObservation struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// whitespace characters are valid. Use percent-encoding to define key names as part of a URL.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// whitespace characters are valid. Use percent-encoding to define key names as part of a URL.
	// A key's name. The name may be at most 512 bytes. All printable, non-whitespace characters are valid. Use percent-encoding to define key names as part of a URL.
	KeyName *string `json:"keyName,omitempty" tf:"key_name,omitempty"`

	// (String) Arbitrary JSON to be associated with a key/value pair.
	// Arbitrary JSON to be associated with a key/value pair.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) Namespace identifier tag.
	// Namespace identifier tag.
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// (String) A byte sequence to be stored, up to 25 MiB in length.
	// A byte sequence to be stored, up to 25 MiB in length.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type KvParameters struct {

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// whitespace characters are valid. Use percent-encoding to define key names as part of a URL.
	// A key's name. The name may be at most 512 bytes. All printable, non-whitespace characters are valid. Use percent-encoding to define key names as part of a URL.
	// +kubebuilder:validation:Optional
	KeyName *string `json:"keyName,omitempty" tf:"key_name,omitempty"`

	// (String) Arbitrary JSON to be associated with a key/value pair.
	// Arbitrary JSON to be associated with a key/value pair.
	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) Namespace identifier tag.
	// Namespace identifier tag.
	// +kubebuilder:validation:Optional
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// (String) A byte sequence to be stored, up to 25 MiB in length.
	// A byte sequence to be stored, up to 25 MiB in length.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// KvSpec defines the desired state of Kv
type KvSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KvParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider KvInitParameters `json:"initProvider,omitempty"`
}

// KvStatus defines the observed state of Kv.
type KvStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KvObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Kv is the Schema for the Kvs API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Kv struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.keyName) || (has(self.initProvider) && has(self.initProvider.keyName))",message="spec.forProvider.keyName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.namespaceId) || (has(self.initProvider) && has(self.initProvider.namespaceId))",message="spec.forProvider.namespaceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.value) || (has(self.initProvider) && has(self.initProvider.value))",message="spec.forProvider.value is a required parameter"
	Spec   KvSpec   `json:"spec"`
	Status KvStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KvList contains a list of Kvs
type KvList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Kv `json:"items"`
}

// Repository type metadata.
var (
	Kv_Kind             = "Kv"
	Kv_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Kv_Kind}.String()
	Kv_KindAPIVersion   = Kv_Kind + "." + CRDGroupVersion.String()
	Kv_GroupVersionKind = CRDGroupVersion.WithKind(Kv_Kind)
)

func init() {
	SchemeBuilder.Register(&Kv{}, &KvList{})
}
