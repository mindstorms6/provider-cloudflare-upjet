// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ErrorsInitParameters struct {
}

type ErrorsObservation struct {

	// (Number)
	Code *float64 `json:"code,omitempty" tf:"code,omitempty"`

	// (String)
	Message *string `json:"message,omitempty" tf:"message,omitempty"`
}

type ErrorsParameters struct {
}

type MessagesInitParameters struct {
}

type MessagesObservation struct {

	// (Number)
	Code *float64 `json:"code,omitempty" tf:"code,omitempty"`

	// (String)
	Message *string `json:"message,omitempty" tf:"message,omitempty"`
}

type MessagesParameters struct {
}

type RouteInitParameters struct {

	// (Attributes List) (see below for nested schema)
	Errors []ErrorsInitParameters `json:"errors,omitempty" tf:"errors,omitempty"`

	// (Attributes List) (see below for nested schema)
	Messages []MessagesInitParameters `json:"messages,omitempty" tf:"messages,omitempty"`

	// (String)
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// (String) Identifier
	// Identifier
	RouteID *string `json:"routeId,omitempty" tf:"route_id,omitempty"`

	// (String) Name of the script, used in URLs and route configuration.
	// Name of the script, used in URLs and route configuration.
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RouteObservation struct {

	// (Attributes List) (see below for nested schema)
	Errors []ErrorsObservation `json:"errors,omitempty" tf:"errors,omitempty"`

	// (String) Identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes List) (see below for nested schema)
	Messages []MessagesObservation `json:"messages,omitempty" tf:"messages,omitempty"`

	// (String)
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// (String) Identifier
	// Identifier
	RouteID *string `json:"routeId,omitempty" tf:"route_id,omitempty"`

	// (String) Name of the script, used in URLs and route configuration.
	// Name of the script, used in URLs and route configuration.
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// (Boolean) Whether the API call was successful
	// Whether the API call was successful
	Success *bool `json:"success,omitempty" tf:"success,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RouteParameters struct {

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Errors []ErrorsParameters `json:"errors,omitempty" tf:"errors,omitempty"`

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Messages []MessagesParameters `json:"messages,omitempty" tf:"messages,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	RouteID *string `json:"routeId,omitempty" tf:"route_id,omitempty"`

	// (String) Name of the script, used in URLs and route configuration.
	// Name of the script, used in URLs and route configuration.
	// +kubebuilder:validation:Optional
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// RouteSpec defines the desired state of Route
type RouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RouteInitParameters `json:"initProvider,omitempty"`
}

// RouteStatus defines the observed state of Route.
type RouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Route is the Schema for the Routes API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Route struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.errors) || (has(self.initProvider) && has(self.initProvider.errors))",message="spec.forProvider.errors is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.messages) || (has(self.initProvider) && has(self.initProvider.messages))",message="spec.forProvider.messages is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.pattern) || (has(self.initProvider) && has(self.initProvider.pattern))",message="spec.forProvider.pattern is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   RouteSpec   `json:"spec"`
	Status RouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteList contains a list of Routes
type RouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route `json:"items"`
}

// Repository type metadata.
var (
	Route_Kind             = "Route"
	Route_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Route_Kind}.String()
	Route_KindAPIVersion   = Route_Kind + "." + CRDGroupVersion.String()
	Route_GroupVersionKind = CRDGroupVersion.WithKind(Route_Kind)
)

func init() {
	SchemeBuilder.Register(&Route{}, &RouteList{})
}
