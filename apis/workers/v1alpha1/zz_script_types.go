// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssetsInitParameters struct {

	// (Attributes) Configuration for assets within a Worker. (see below for nested schema)
	Config *ConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// (String) Token provided upon successful upload of all files from a registered manifest.
	// Token provided upon successful upload of all files from a registered manifest.
	Jwt *string `json:"jwt,omitempty" tf:"jwt,omitempty"`
}

type AssetsObservation struct {

	// (Attributes) Configuration for assets within a Worker. (see below for nested schema)
	Config *ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// (String) Token provided upon successful upload of all files from a registered manifest.
	// Token provided upon successful upload of all files from a registered manifest.
	Jwt *string `json:"jwt,omitempty" tf:"jwt,omitempty"`
}

type AssetsParameters struct {

	// (Attributes) Configuration for assets within a Worker. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Config *ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// (String) Token provided upon successful upload of all files from a registered manifest.
	// Token provided upon successful upload of all files from a registered manifest.
	// +kubebuilder:validation:Optional
	Jwt *string `json:"jwt,omitempty" tf:"jwt,omitempty"`
}

type BindingsInitParameters struct {

	// (String) R2 bucket to bind to.
	// R2 bucket to bind to.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// (String) Identifier of the certificate to bind to.
	// Identifier of the certificate to bind to.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// (String) The exported class name of the Durable Object.
	// The exported class name of the Durable Object.
	ClassName *string `json:"className,omitempty" tf:"class_name,omitempty"`

	// (String) The dataset name to bind to.
	// The dataset name to bind to.
	Dataset *string `json:"dataset,omitempty" tf:"dataset,omitempty"`

	// (String) The environment of the script_name to bind to.
	// The environment of the script_name to bind to.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Name of the script, used in URLs and route configuration.
	// Identifier of the D1 database to bind to.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of the Vectorize index to bind to.
	// Name of the Vectorize index to bind to.
	IndexName *string `json:"indexName,omitempty" tf:"index_name,omitempty"`

	// (String) JSON data to use.
	// JSON data to use.
	JSON *string `json:"json,omitempty" tf:"json,omitempty"`

	// (String) A JavaScript variable name for the binding.
	// A JavaScript variable name for the binding.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Namespace to bind to.
	// Namespace to bind to.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) Namespace identifier tag.
	// Namespace identifier tag.
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// (Attributes) Outbound worker. (see below for nested schema)
	Outbound *OutboundInitParameters `json:"outbound,omitempty" tf:"outbound,omitempty"`

	// (String) Name of the Queue to bind to.
	// Name of the Queue to bind to.
	QueueName *string `json:"queueName,omitempty" tf:"queue_name,omitempty"`

	// (String) Name of the script, used in URLs and route configuration.
	// The script where the Durable Object is defined, if it is external to this Worker.
	ScriptName *string `json:"scriptName,omitempty" tf:"script_name,omitempty"`

	// (String) Name of Worker to bind to.
	// Name of Worker to bind to.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// (String) The text value to use.
	// The text value to use.
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// (String) The kind of resource that the binding provides.
	// The kind of resource that the binding provides.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BindingsObservation struct {

	// (String) R2 bucket to bind to.
	// R2 bucket to bind to.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// (String) Identifier of the certificate to bind to.
	// Identifier of the certificate to bind to.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// (String) The exported class name of the Durable Object.
	// The exported class name of the Durable Object.
	ClassName *string `json:"className,omitempty" tf:"class_name,omitempty"`

	// (String) The dataset name to bind to.
	// The dataset name to bind to.
	Dataset *string `json:"dataset,omitempty" tf:"dataset,omitempty"`

	// (String) The environment of the script_name to bind to.
	// The environment of the script_name to bind to.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Name of the script, used in URLs and route configuration.
	// Identifier of the D1 database to bind to.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of the Vectorize index to bind to.
	// Name of the Vectorize index to bind to.
	IndexName *string `json:"indexName,omitempty" tf:"index_name,omitempty"`

	// (String) JSON data to use.
	// JSON data to use.
	JSON *string `json:"json,omitempty" tf:"json,omitempty"`

	// (String) A JavaScript variable name for the binding.
	// A JavaScript variable name for the binding.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Namespace to bind to.
	// Namespace to bind to.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) Namespace identifier tag.
	// Namespace identifier tag.
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// (Attributes) Outbound worker. (see below for nested schema)
	Outbound *OutboundObservation `json:"outbound,omitempty" tf:"outbound,omitempty"`

	// (String) Name of the Queue to bind to.
	// Name of the Queue to bind to.
	QueueName *string `json:"queueName,omitempty" tf:"queue_name,omitempty"`

	// (String) Name of the script, used in URLs and route configuration.
	// The script where the Durable Object is defined, if it is external to this Worker.
	ScriptName *string `json:"scriptName,omitempty" tf:"script_name,omitempty"`

	// (String) Name of Worker to bind to.
	// Name of Worker to bind to.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// (String) The text value to use.
	// The text value to use.
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// (String) The kind of resource that the binding provides.
	// The kind of resource that the binding provides.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BindingsParameters struct {

	// (String) R2 bucket to bind to.
	// R2 bucket to bind to.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// (String) Identifier of the certificate to bind to.
	// Identifier of the certificate to bind to.
	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// (String) The exported class name of the Durable Object.
	// The exported class name of the Durable Object.
	// +kubebuilder:validation:Optional
	ClassName *string `json:"className,omitempty" tf:"class_name,omitempty"`

	// (String) The dataset name to bind to.
	// The dataset name to bind to.
	// +kubebuilder:validation:Optional
	Dataset *string `json:"dataset,omitempty" tf:"dataset,omitempty"`

	// (String) The environment of the script_name to bind to.
	// The environment of the script_name to bind to.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Name of the script, used in URLs and route configuration.
	// Identifier of the D1 database to bind to.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of the Vectorize index to bind to.
	// Name of the Vectorize index to bind to.
	// +kubebuilder:validation:Optional
	IndexName *string `json:"indexName,omitempty" tf:"index_name,omitempty"`

	// (String) JSON data to use.
	// JSON data to use.
	// +kubebuilder:validation:Optional
	JSON *string `json:"json,omitempty" tf:"json,omitempty"`

	// (String) A JavaScript variable name for the binding.
	// A JavaScript variable name for the binding.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) Namespace to bind to.
	// Namespace to bind to.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) Namespace identifier tag.
	// Namespace identifier tag.
	// +kubebuilder:validation:Optional
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`

	// (Attributes) Outbound worker. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Outbound *OutboundParameters `json:"outbound,omitempty" tf:"outbound,omitempty"`

	// (String) Name of the Queue to bind to.
	// Name of the Queue to bind to.
	// +kubebuilder:validation:Optional
	QueueName *string `json:"queueName,omitempty" tf:"queue_name,omitempty"`

	// (String) Name of the script, used in URLs and route configuration.
	// The script where the Durable Object is defined, if it is external to this Worker.
	// +kubebuilder:validation:Optional
	ScriptName *string `json:"scriptName,omitempty" tf:"script_name,omitempty"`

	// (String) Name of Worker to bind to.
	// Name of Worker to bind to.
	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// (String) The text value to use.
	// The text value to use.
	// +kubebuilder:validation:Optional
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// (String) The kind of resource that the binding provides.
	// The kind of resource that the binding provides.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ConfigInitParameters struct {

	// (String) Determines the redirects and rewrites of requests for HTML content.
	// Determines the redirects and rewrites of requests for HTML content.
	HTMLHandling *string `json:"htmlHandling,omitempty" tf:"html_handling,omitempty"`

	// (String) Determines the response when a request does not match a static asset, and there is no Worker script.
	// Determines the response when a request does not match a static asset, and there is no Worker script.
	NotFoundHandling *string `json:"notFoundHandling,omitempty" tf:"not_found_handling,omitempty"`

	// (Boolean) When true, requests will always invoke the Worker script. Otherwise, attempt to serve an asset matching the request, falling back to the Worker script.
	// When true, requests will always invoke the Worker script. Otherwise, attempt to serve an asset matching the request, falling back to the Worker script.
	RunWorkerFirst *bool `json:"runWorkerFirst,omitempty" tf:"run_worker_first,omitempty"`

	// (Boolean) When true and the incoming request matches an asset, that will be served instead of invoking the Worker script. When false, requests will always invoke the Worker script.
	// When true and the incoming request matches an asset, that will be served instead of invoking the Worker script. When false, requests will always invoke the Worker script.
	ServeDirectly *bool `json:"serveDirectly,omitempty" tf:"serve_directly,omitempty"`
}

type ConfigObservation struct {

	// (String) Determines the redirects and rewrites of requests for HTML content.
	// Determines the redirects and rewrites of requests for HTML content.
	HTMLHandling *string `json:"htmlHandling,omitempty" tf:"html_handling,omitempty"`

	// (String) Determines the response when a request does not match a static asset, and there is no Worker script.
	// Determines the response when a request does not match a static asset, and there is no Worker script.
	NotFoundHandling *string `json:"notFoundHandling,omitempty" tf:"not_found_handling,omitempty"`

	// (Boolean) When true, requests will always invoke the Worker script. Otherwise, attempt to serve an asset matching the request, falling back to the Worker script.
	// When true, requests will always invoke the Worker script. Otherwise, attempt to serve an asset matching the request, falling back to the Worker script.
	RunWorkerFirst *bool `json:"runWorkerFirst,omitempty" tf:"run_worker_first,omitempty"`

	// (Boolean) When true and the incoming request matches an asset, that will be served instead of invoking the Worker script. When false, requests will always invoke the Worker script.
	// When true and the incoming request matches an asset, that will be served instead of invoking the Worker script. When false, requests will always invoke the Worker script.
	ServeDirectly *bool `json:"serveDirectly,omitempty" tf:"serve_directly,omitempty"`
}

type ConfigParameters struct {

	// (String) Determines the redirects and rewrites of requests for HTML content.
	// Determines the redirects and rewrites of requests for HTML content.
	// +kubebuilder:validation:Optional
	HTMLHandling *string `json:"htmlHandling,omitempty" tf:"html_handling,omitempty"`

	// (String) Determines the response when a request does not match a static asset, and there is no Worker script.
	// Determines the response when a request does not match a static asset, and there is no Worker script.
	// +kubebuilder:validation:Optional
	NotFoundHandling *string `json:"notFoundHandling,omitempty" tf:"not_found_handling,omitempty"`

	// (Boolean) When true, requests will always invoke the Worker script. Otherwise, attempt to serve an asset matching the request, falling back to the Worker script.
	// When true, requests will always invoke the Worker script. Otherwise, attempt to serve an asset matching the request, falling back to the Worker script.
	// +kubebuilder:validation:Optional
	RunWorkerFirst *bool `json:"runWorkerFirst,omitempty" tf:"run_worker_first,omitempty"`

	// (Boolean) When true and the incoming request matches an asset, that will be served instead of invoking the Worker script. When false, requests will always invoke the Worker script.
	// When true and the incoming request matches an asset, that will be served instead of invoking the Worker script. When false, requests will always invoke the Worker script.
	// +kubebuilder:validation:Optional
	ServeDirectly *bool `json:"serveDirectly,omitempty" tf:"serve_directly,omitempty"`
}

type MigrationsInitParameters struct {

	// (List of String) A list of classes to delete Durable Object namespaces from.
	// A list of classes to delete Durable Object namespaces from.
	DeletedClasses []*string `json:"deletedClasses,omitempty" tf:"deleted_classes,omitempty"`

	// (List of String) A list of classes to create Durable Object namespaces from.
	// A list of classes to create Durable Object namespaces from.
	NewClasses []*string `json:"newClasses,omitempty" tf:"new_classes,omitempty"`

	// (List of String) A list of classes to create Durable Object namespaces with SQLite from.
	// A list of classes to create Durable Object namespaces with SQLite from.
	NewSqliteClasses []*string `json:"newSqliteClasses,omitempty" tf:"new_sqlite_classes,omitempty"`

	// (String) Tag to set as the latest migration tag.
	// Tag to set as the latest migration tag.
	NewTag *string `json:"newTag,omitempty" tf:"new_tag,omitempty"`

	// (String) Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.
	// Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.
	OldTag *string `json:"oldTag,omitempty" tf:"old_tag,omitempty"`

	// (Attributes List) A list of classes with Durable Object namespaces that were renamed. (see below for nested schema)
	RenamedClasses []RenamedClassesInitParameters `json:"renamedClasses,omitempty" tf:"renamed_classes,omitempty"`

	// (Attributes List) Migrations to apply in order. (see below for nested schema)
	Steps []StepsInitParameters `json:"steps,omitempty" tf:"steps,omitempty"`

	// (Attributes List) A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker. (see below for nested schema)
	TransferredClasses []MigrationsTransferredClassesInitParameters `json:"transferredClasses,omitempty" tf:"transferred_classes,omitempty"`
}

type MigrationsObservation struct {

	// (List of String) A list of classes to delete Durable Object namespaces from.
	// A list of classes to delete Durable Object namespaces from.
	DeletedClasses []*string `json:"deletedClasses,omitempty" tf:"deleted_classes,omitempty"`

	// (List of String) A list of classes to create Durable Object namespaces from.
	// A list of classes to create Durable Object namespaces from.
	NewClasses []*string `json:"newClasses,omitempty" tf:"new_classes,omitempty"`

	// (List of String) A list of classes to create Durable Object namespaces with SQLite from.
	// A list of classes to create Durable Object namespaces with SQLite from.
	NewSqliteClasses []*string `json:"newSqliteClasses,omitempty" tf:"new_sqlite_classes,omitempty"`

	// (String) Tag to set as the latest migration tag.
	// Tag to set as the latest migration tag.
	NewTag *string `json:"newTag,omitempty" tf:"new_tag,omitempty"`

	// (String) Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.
	// Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.
	OldTag *string `json:"oldTag,omitempty" tf:"old_tag,omitempty"`

	// (Attributes List) A list of classes with Durable Object namespaces that were renamed. (see below for nested schema)
	RenamedClasses []RenamedClassesObservation `json:"renamedClasses,omitempty" tf:"renamed_classes,omitempty"`

	// (Attributes List) Migrations to apply in order. (see below for nested schema)
	Steps []StepsObservation `json:"steps,omitempty" tf:"steps,omitempty"`

	// (Attributes List) A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker. (see below for nested schema)
	TransferredClasses []MigrationsTransferredClassesObservation `json:"transferredClasses,omitempty" tf:"transferred_classes,omitempty"`
}

type MigrationsParameters struct {

	// (List of String) A list of classes to delete Durable Object namespaces from.
	// A list of classes to delete Durable Object namespaces from.
	// +kubebuilder:validation:Optional
	DeletedClasses []*string `json:"deletedClasses,omitempty" tf:"deleted_classes,omitempty"`

	// (List of String) A list of classes to create Durable Object namespaces from.
	// A list of classes to create Durable Object namespaces from.
	// +kubebuilder:validation:Optional
	NewClasses []*string `json:"newClasses,omitempty" tf:"new_classes,omitempty"`

	// (List of String) A list of classes to create Durable Object namespaces with SQLite from.
	// A list of classes to create Durable Object namespaces with SQLite from.
	// +kubebuilder:validation:Optional
	NewSqliteClasses []*string `json:"newSqliteClasses,omitempty" tf:"new_sqlite_classes,omitempty"`

	// (String) Tag to set as the latest migration tag.
	// Tag to set as the latest migration tag.
	// +kubebuilder:validation:Optional
	NewTag *string `json:"newTag,omitempty" tf:"new_tag,omitempty"`

	// (String) Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.
	// Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.
	// +kubebuilder:validation:Optional
	OldTag *string `json:"oldTag,omitempty" tf:"old_tag,omitempty"`

	// (Attributes List) A list of classes with Durable Object namespaces that were renamed. (see below for nested schema)
	// +kubebuilder:validation:Optional
	RenamedClasses []RenamedClassesParameters `json:"renamedClasses" tf:"renamed_classes,omitempty"`

	// (Attributes List) Migrations to apply in order. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Steps []StepsParameters `json:"steps" tf:"steps,omitempty"`

	// (Attributes List) A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker. (see below for nested schema)
	// +kubebuilder:validation:Optional
	TransferredClasses []MigrationsTransferredClassesParameters `json:"transferredClasses" tf:"transferred_classes,omitempty"`
}

type MigrationsTransferredClassesInitParameters struct {

	// (String)
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String)
	FromScript *string `json:"fromScript,omitempty" tf:"from_script,omitempty"`

	// (String)
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

type MigrationsTransferredClassesObservation struct {

	// (String)
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String)
	FromScript *string `json:"fromScript,omitempty" tf:"from_script,omitempty"`

	// (String)
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

type MigrationsTransferredClassesParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	FromScript *string `json:"fromScript,omitempty" tf:"from_script,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

type ObservabilityInitParameters struct {

	// (Boolean) Whether observability is enabled for the Worker.
	// Whether observability is enabled for the Worker.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.
	// The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.
	HeadSamplingRate *float64 `json:"headSamplingRate,omitempty" tf:"head_sampling_rate,omitempty"`
}

type ObservabilityObservation struct {

	// (Boolean) Whether observability is enabled for the Worker.
	// Whether observability is enabled for the Worker.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.
	// The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.
	HeadSamplingRate *float64 `json:"headSamplingRate,omitempty" tf:"head_sampling_rate,omitempty"`
}

type ObservabilityParameters struct {

	// (Boolean) Whether observability is enabled for the Worker.
	// Whether observability is enabled for the Worker.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// (Number) The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.
	// The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.
	// +kubebuilder:validation:Optional
	HeadSamplingRate *float64 `json:"headSamplingRate,omitempty" tf:"head_sampling_rate,omitempty"`
}

type OutboundInitParameters struct {

	// (List of String) Pass information from the Dispatch Worker to the Outbound Worker through the parameters.
	// Pass information from the Dispatch Worker to the Outbound Worker through the parameters.
	Params []*string `json:"params,omitempty" tf:"params,omitempty"`

	// (Attributes) Outbound worker. (see below for nested schema)
	Worker *WorkerInitParameters `json:"worker,omitempty" tf:"worker,omitempty"`
}

type OutboundObservation struct {

	// (List of String) Pass information from the Dispatch Worker to the Outbound Worker through the parameters.
	// Pass information from the Dispatch Worker to the Outbound Worker through the parameters.
	Params []*string `json:"params,omitempty" tf:"params,omitempty"`

	// (Attributes) Outbound worker. (see below for nested schema)
	Worker *WorkerObservation `json:"worker,omitempty" tf:"worker,omitempty"`
}

type OutboundParameters struct {

	// (List of String) Pass information from the Dispatch Worker to the Outbound Worker through the parameters.
	// Pass information from the Dispatch Worker to the Outbound Worker through the parameters.
	// +kubebuilder:validation:Optional
	Params []*string `json:"params,omitempty" tf:"params,omitempty"`

	// (Attributes) Outbound worker. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Worker *WorkerParameters `json:"worker,omitempty" tf:"worker,omitempty"`
}

type PlacementInitParameters struct {

	// (String) Enables Smart Placement.
	// Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type PlacementObservation struct {

	// (String) Enables Smart Placement.
	// Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (String) Status of Smart Placement.
	// Status of [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type PlacementParameters struct {

	// (String) Enables Smart Placement.
	// Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type RenamedClassesInitParameters struct {

	// (String)
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String)
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

type RenamedClassesObservation struct {

	// (String)
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String)
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

type RenamedClassesParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

type ScriptInitParameters struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) Configuration for assets within a Worker (see below for nested schema)
	Assets *AssetsInitParameters `json:"assets,omitempty" tf:"assets,omitempty"`

	// upload-metadata/#bindings. (see below for nested schema)
	Bindings []BindingsInitParameters `json:"bindings,omitempty" tf:"bindings,omitempty"`

	// (String) Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the fetch event). Indicates a service worker syntax Worker.
	// Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
	BodyPart *string `json:"bodyPart,omitempty" tf:"body_part,omitempty"`

	// (String) Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate *string `json:"compatibilityDate,omitempty" tf:"compatibility_date,omitempty"`

	// (List of String) Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a compatibility_date.
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
	CompatibilityFlags []*string `json:"compatibilityFlags,omitempty" tf:"compatibility_flags,omitempty"`

	// (String) Module or Service Worker contents of the Worker.
	// Module or Service Worker contents of the Worker.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// (Boolean) Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
	// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
	KeepAssets *bool `json:"keepAssets,omitempty" tf:"keep_assets,omitempty"`

	// (List of String) List of binding types to keep from previous_upload.
	// List of binding types to keep from previous_upload.
	KeepBindings []*string `json:"keepBindings,omitempty" tf:"keep_bindings,omitempty"`

	// (String) Name of the part in the multipart request that contains the main module (e.g. the file exporting a fetch handler). Indicates a module syntax Worker.
	// Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
	MainModule *string `json:"mainModule,omitempty" tf:"main_module,omitempty"`

	// (Attributes) Migrations to apply for Durable Objects associated with this Worker. (see below for nested schema)
	Migrations *MigrationsInitParameters `json:"migrations,omitempty" tf:"migrations,omitempty"`

	// (Attributes) Observability settings for the Worker. (see below for nested schema)
	Observability *ObservabilityInitParameters `json:"observability,omitempty" tf:"observability,omitempty"`

	// (Attributes) Configuration for Smart Placement. (see below for nested schema)
	Placement *PlacementInitParameters `json:"placement,omitempty" tf:"placement,omitempty"`

	// (String) Name of the script, used in URLs and route configuration.
	// Name of the script, used in URLs and route configuration.
	ScriptName *string `json:"scriptName,omitempty" tf:"script_name,omitempty"`

	// (Attributes List) List of Workers that will consume logs from the attached Worker. (see below for nested schema)
	TailConsumers []TailConsumersInitParameters `json:"tailConsumers,omitempty" tf:"tail_consumers,omitempty"`
}

type ScriptObservation struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) Configuration for assets within a Worker (see below for nested schema)
	Assets *AssetsObservation `json:"assets,omitempty" tf:"assets,omitempty"`

	// upload-metadata/#bindings. (see below for nested schema)
	Bindings []BindingsObservation `json:"bindings,omitempty" tf:"bindings,omitempty"`

	// (String) Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the fetch event). Indicates a service worker syntax Worker.
	// Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
	BodyPart *string `json:"bodyPart,omitempty" tf:"body_part,omitempty"`

	// (String) Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate *string `json:"compatibilityDate,omitempty" tf:"compatibility_date,omitempty"`

	// (List of String) Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a compatibility_date.
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
	CompatibilityFlags []*string `json:"compatibilityFlags,omitempty" tf:"compatibility_flags,omitempty"`

	// (String) Module or Service Worker contents of the Worker.
	// Module or Service Worker contents of the Worker.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// (String) When the script was created.
	// When the script was created.
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// None-Match header when updating.
	// Hashed script content, can be used in a If-None-Match header when updating.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// (Boolean) Whether a Worker contains assets.
	// Whether a Worker contains assets.
	HasAssets *bool `json:"hasAssets,omitempty" tf:"has_assets,omitempty"`

	// (Boolean) Whether a Worker contains modules.
	// Whether a Worker contains modules.
	HasModules *bool `json:"hasModules,omitempty" tf:"has_modules,omitempty"`

	// (String) Name of the script, used in URLs and route configuration.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
	// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
	KeepAssets *bool `json:"keepAssets,omitempty" tf:"keep_assets,omitempty"`

	// (List of String) List of binding types to keep from previous_upload.
	// List of binding types to keep from previous_upload.
	KeepBindings []*string `json:"keepBindings,omitempty" tf:"keep_bindings,omitempty"`

	// (Boolean) Whether Logpush is turned on for the Worker.
	// Whether Logpush is turned on for the Worker.
	Logpush *bool `json:"logpush,omitempty" tf:"logpush,omitempty"`

	// (String) Name of the part in the multipart request that contains the main module (e.g. the file exporting a fetch handler). Indicates a module syntax Worker.
	// Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
	MainModule *string `json:"mainModule,omitempty" tf:"main_module,omitempty"`

	// (Attributes) Migrations to apply for Durable Objects associated with this Worker. (see below for nested schema)
	Migrations *MigrationsObservation `json:"migrations,omitempty" tf:"migrations,omitempty"`

	// (String) When the script was last modified.
	// When the script was last modified.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (Attributes) Observability settings for the Worker. (see below for nested schema)
	Observability *ObservabilityObservation `json:"observability,omitempty" tf:"observability,omitempty"`

	// (Attributes) Configuration for Smart Placement. (see below for nested schema)
	Placement *PlacementObservation `json:"placement,omitempty" tf:"placement,omitempty"`

	// (String) Name of the script, used in URLs and route configuration.
	// Name of the script, used in URLs and route configuration.
	ScriptName *string `json:"scriptName,omitempty" tf:"script_name,omitempty"`

	// (Number)
	StartupTimeMs *float64 `json:"startupTimeMs,omitempty" tf:"startup_time_ms,omitempty"`

	// (Attributes List) List of Workers that will consume logs from the attached Worker. (see below for nested schema)
	TailConsumers []TailConsumersObservation `json:"tailConsumers,omitempty" tf:"tail_consumers,omitempty"`

	// (String) Usage model for the Worker invocations.
	// Usage model for the Worker invocations.
	UsageModel *string `json:"usageModel,omitempty" tf:"usage_model,omitempty"`
}

type ScriptParameters struct {

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) Configuration for assets within a Worker (see below for nested schema)
	// +kubebuilder:validation:Optional
	Assets *AssetsParameters `json:"assets,omitempty" tf:"assets,omitempty"`

	// upload-metadata/#bindings. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Bindings []BindingsParameters `json:"bindings,omitempty" tf:"bindings,omitempty"`

	// (String) Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the fetch event). Indicates a service worker syntax Worker.
	// Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
	// +kubebuilder:validation:Optional
	BodyPart *string `json:"bodyPart,omitempty" tf:"body_part,omitempty"`

	// (String) Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	// +kubebuilder:validation:Optional
	CompatibilityDate *string `json:"compatibilityDate,omitempty" tf:"compatibility_date,omitempty"`

	// (List of String) Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a compatibility_date.
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
	// +kubebuilder:validation:Optional
	CompatibilityFlags []*string `json:"compatibilityFlags,omitempty" tf:"compatibility_flags,omitempty"`

	// (String) Module or Service Worker contents of the Worker.
	// Module or Service Worker contents of the Worker.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// (Boolean) Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
	// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
	// +kubebuilder:validation:Optional
	KeepAssets *bool `json:"keepAssets,omitempty" tf:"keep_assets,omitempty"`

	// (List of String) List of binding types to keep from previous_upload.
	// List of binding types to keep from previous_upload.
	// +kubebuilder:validation:Optional
	KeepBindings []*string `json:"keepBindings,omitempty" tf:"keep_bindings,omitempty"`

	// (String) Name of the part in the multipart request that contains the main module (e.g. the file exporting a fetch handler). Indicates a module syntax Worker.
	// Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
	// +kubebuilder:validation:Optional
	MainModule *string `json:"mainModule,omitempty" tf:"main_module,omitempty"`

	// (Attributes) Migrations to apply for Durable Objects associated with this Worker. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Migrations *MigrationsParameters `json:"migrations,omitempty" tf:"migrations,omitempty"`

	// (Attributes) Observability settings for the Worker. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Observability *ObservabilityParameters `json:"observability,omitempty" tf:"observability,omitempty"`

	// (Attributes) Configuration for Smart Placement. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Placement *PlacementParameters `json:"placement,omitempty" tf:"placement,omitempty"`

	// (String) Name of the script, used in URLs and route configuration.
	// Name of the script, used in URLs and route configuration.
	// +kubebuilder:validation:Optional
	ScriptName *string `json:"scriptName,omitempty" tf:"script_name,omitempty"`

	// (Attributes List) List of Workers that will consume logs from the attached Worker. (see below for nested schema)
	// +kubebuilder:validation:Optional
	TailConsumers []TailConsumersParameters `json:"tailConsumers,omitempty" tf:"tail_consumers,omitempty"`
}

type StepsInitParameters struct {

	// (List of String) A list of classes to delete Durable Object namespaces from.
	// A list of classes to delete Durable Object namespaces from.
	DeletedClasses []*string `json:"deletedClasses,omitempty" tf:"deleted_classes,omitempty"`

	// (List of String) A list of classes to create Durable Object namespaces from.
	// A list of classes to create Durable Object namespaces from.
	NewClasses []*string `json:"newClasses,omitempty" tf:"new_classes,omitempty"`

	// (List of String) A list of classes to create Durable Object namespaces with SQLite from.
	// A list of classes to create Durable Object namespaces with SQLite from.
	NewSqliteClasses []*string `json:"newSqliteClasses,omitempty" tf:"new_sqlite_classes,omitempty"`

	// (Attributes List) A list of classes with Durable Object namespaces that were renamed. (see below for nested schema)
	RenamedClasses []StepsRenamedClassesInitParameters `json:"renamedClasses,omitempty" tf:"renamed_classes,omitempty"`

	// (Attributes List) A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker. (see below for nested schema)
	TransferredClasses []TransferredClassesInitParameters `json:"transferredClasses,omitempty" tf:"transferred_classes,omitempty"`
}

type StepsObservation struct {

	// (List of String) A list of classes to delete Durable Object namespaces from.
	// A list of classes to delete Durable Object namespaces from.
	DeletedClasses []*string `json:"deletedClasses,omitempty" tf:"deleted_classes,omitempty"`

	// (List of String) A list of classes to create Durable Object namespaces from.
	// A list of classes to create Durable Object namespaces from.
	NewClasses []*string `json:"newClasses,omitempty" tf:"new_classes,omitempty"`

	// (List of String) A list of classes to create Durable Object namespaces with SQLite from.
	// A list of classes to create Durable Object namespaces with SQLite from.
	NewSqliteClasses []*string `json:"newSqliteClasses,omitempty" tf:"new_sqlite_classes,omitempty"`

	// (Attributes List) A list of classes with Durable Object namespaces that were renamed. (see below for nested schema)
	RenamedClasses []StepsRenamedClassesObservation `json:"renamedClasses,omitempty" tf:"renamed_classes,omitempty"`

	// (Attributes List) A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker. (see below for nested schema)
	TransferredClasses []TransferredClassesObservation `json:"transferredClasses,omitempty" tf:"transferred_classes,omitempty"`
}

type StepsParameters struct {

	// (List of String) A list of classes to delete Durable Object namespaces from.
	// A list of classes to delete Durable Object namespaces from.
	// +kubebuilder:validation:Optional
	DeletedClasses []*string `json:"deletedClasses,omitempty" tf:"deleted_classes,omitempty"`

	// (List of String) A list of classes to create Durable Object namespaces from.
	// A list of classes to create Durable Object namespaces from.
	// +kubebuilder:validation:Optional
	NewClasses []*string `json:"newClasses,omitempty" tf:"new_classes,omitempty"`

	// (List of String) A list of classes to create Durable Object namespaces with SQLite from.
	// A list of classes to create Durable Object namespaces with SQLite from.
	// +kubebuilder:validation:Optional
	NewSqliteClasses []*string `json:"newSqliteClasses,omitempty" tf:"new_sqlite_classes,omitempty"`

	// (Attributes List) A list of classes with Durable Object namespaces that were renamed. (see below for nested schema)
	// +kubebuilder:validation:Optional
	RenamedClasses []StepsRenamedClassesParameters `json:"renamedClasses" tf:"renamed_classes,omitempty"`

	// (Attributes List) A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker. (see below for nested schema)
	// +kubebuilder:validation:Optional
	TransferredClasses []TransferredClassesParameters `json:"transferredClasses" tf:"transferred_classes,omitempty"`
}

type StepsRenamedClassesInitParameters struct {

	// (String)
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String)
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

type StepsRenamedClassesObservation struct {

	// (String)
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String)
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

type StepsRenamedClassesParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

type TailConsumersInitParameters struct {

	// (String) The environment of the script_name to bind to.
	// Optional environment if the Worker utilizes one.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Namespace to bind to.
	// Optional dispatch namespace the script belongs to.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) Name of Worker to bind to.
	// Name of Worker that is to be the consumer.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type TailConsumersObservation struct {

	// (String) The environment of the script_name to bind to.
	// Optional environment if the Worker utilizes one.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Namespace to bind to.
	// Optional dispatch namespace the script belongs to.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) Name of Worker to bind to.
	// Name of Worker that is to be the consumer.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type TailConsumersParameters struct {

	// (String) The environment of the script_name to bind to.
	// Optional environment if the Worker utilizes one.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Namespace to bind to.
	// Optional dispatch namespace the script belongs to.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// (String) Name of Worker to bind to.
	// Name of Worker that is to be the consumer.
	// +kubebuilder:validation:Optional
	Service *string `json:"service" tf:"service,omitempty"`
}

type TransferredClassesInitParameters struct {

	// (String)
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String)
	FromScript *string `json:"fromScript,omitempty" tf:"from_script,omitempty"`

	// (String)
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

type TransferredClassesObservation struct {

	// (String)
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String)
	FromScript *string `json:"fromScript,omitempty" tf:"from_script,omitempty"`

	// (String)
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

type TransferredClassesParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	FromScript *string `json:"fromScript,omitempty" tf:"from_script,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

type WorkerInitParameters struct {

	// (String) The environment of the script_name to bind to.
	// Environment of the outbound worker.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Name of Worker to bind to.
	// Name of the outbound worker.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type WorkerObservation struct {

	// (String) The environment of the script_name to bind to.
	// Environment of the outbound worker.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Name of Worker to bind to.
	// Name of the outbound worker.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type WorkerParameters struct {

	// (String) The environment of the script_name to bind to.
	// Environment of the outbound worker.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Name of Worker to bind to.
	// Name of the outbound worker.
	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

// ScriptSpec defines the desired state of Script
type ScriptSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScriptParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ScriptInitParameters `json:"initProvider,omitempty"`
}

// ScriptStatus defines the observed state of Script.
type ScriptStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScriptObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Script is the Schema for the Scripts API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Script struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bindings) || (has(self.initProvider) && has(self.initProvider.bindings))",message="spec.forProvider.bindings is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.content) || (has(self.initProvider) && has(self.initProvider.content))",message="spec.forProvider.content is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.observability) || (has(self.initProvider) && has(self.initProvider.observability))",message="spec.forProvider.observability is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scriptName) || (has(self.initProvider) && has(self.initProvider.scriptName))",message="spec.forProvider.scriptName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tailConsumers) || (has(self.initProvider) && has(self.initProvider.tailConsumers))",message="spec.forProvider.tailConsumers is a required parameter"
	Spec   ScriptSpec   `json:"spec"`
	Status ScriptStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScriptList contains a list of Scripts
type ScriptList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Script `json:"items"`
}

// Repository type metadata.
var (
	Script_Kind             = "Script"
	Script_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Script_Kind}.String()
	Script_KindAPIVersion   = Script_Kind + "." + CRDGroupVersion.String()
	Script_GroupVersionKind = CRDGroupVersion.WithKind(Script_Kind)
)

func init() {
	SchemeBuilder.Register(&Script{}, &ScriptList{})
}
