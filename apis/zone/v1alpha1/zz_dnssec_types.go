// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DNSSECInitParameters struct {

	// signer DNSSEC is enabled on the zone, allowing multiple
	// providers to serve a DNSSEC-signed zone at the same time.
	// This is required for DNSKEY records (except those automatically
	// generated by Cloudflare) to be added to the zone.
	// If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
	// providers to serve a DNSSEC-signed zone at the same time.
	// This is required for DNSKEY records (except those automatically
	// generated by Cloudflare) to be added to the zone.
	//
	// See [Multi-signer DNSSEC](https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/) for details.
	DNSSECMultiSigner *bool `json:"dnssecMultiSigner,omitempty" tf:"dnssec_multi_signer,omitempty"`

	// signed zone
	// including signatures from an external provider, without requiring
	// Cloudflare to sign any records on the fly.
	// If true, allows Cloudflare to transfer in a DNSSEC-signed zone
	// including signatures from an external provider, without requiring
	// Cloudflare to sign any records on the fly.
	//
	// Note that this feature has some limitations.
	// See [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for details.
	DNSSECPresigned *bool `json:"dnssecPresigned,omitempty" tf:"dnssec_presigned,omitempty"`

	// desired state and presence of necessary records.
	// Status of DNSSEC, based on user-desired state and presence of necessary records.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type DNSSECObservation struct {

	// (String) Algorithm key code.
	// Algorithm key code.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// signer DNSSEC is enabled on the zone, allowing multiple
	// providers to serve a DNSSEC-signed zone at the same time.
	// This is required for DNSKEY records (except those automatically
	// generated by Cloudflare) to be added to the zone.
	// If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
	// providers to serve a DNSSEC-signed zone at the same time.
	// This is required for DNSKEY records (except those automatically
	// generated by Cloudflare) to be added to the zone.
	//
	// See [Multi-signer DNSSEC](https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/) for details.
	DNSSECMultiSigner *bool `json:"dnssecMultiSigner,omitempty" tf:"dnssec_multi_signer,omitempty"`

	// signed zone
	// including signatures from an external provider, without requiring
	// Cloudflare to sign any records on the fly.
	// If true, allows Cloudflare to transfer in a DNSSEC-signed zone
	// including signatures from an external provider, without requiring
	// Cloudflare to sign any records on the fly.
	//
	// Note that this feature has some limitations.
	// See [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for details.
	DNSSECPresigned *bool `json:"dnssecPresigned,omitempty" tf:"dnssec_presigned,omitempty"`

	// (String) Digest hash.
	// Digest hash.
	Digest *string `json:"digest,omitempty" tf:"digest,omitempty"`

	// (String) Type of digest algorithm.
	// Type of digest algorithm.
	DigestAlgorithm *string `json:"digestAlgorithm,omitempty" tf:"digest_algorithm,omitempty"`

	// (String) Coded type for digest algorithm.
	// Coded type for digest algorithm.
	DigestType *string `json:"digestType,omitempty" tf:"digest_type,omitempty"`

	// (String) Full DS record.
	// Full DS record.
	Ds *string `json:"ds,omitempty" tf:"ds,omitempty"`

	// (Number) Flag for DNSSEC record.
	// Flag for DNSSEC record.
	Flags *float64 `json:"flags,omitempty" tf:"flags,omitempty"`

	// (String) Identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) Code for key tag.
	// Code for key tag.
	KeyTag *float64 `json:"keyTag,omitempty" tf:"key_tag,omitempty"`

	// (String) Algorithm key type.
	// Algorithm key type.
	KeyType *string `json:"keyType,omitempty" tf:"key_type,omitempty"`

	// (String) When DNSSEC was last modified.
	// When DNSSEC was last modified.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (String) Public key for DS record.
	// Public key for DS record.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// desired state and presence of necessary records.
	// Status of DNSSEC, based on user-desired state and presence of necessary records.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type DNSSECParameters struct {

	// signer DNSSEC is enabled on the zone, allowing multiple
	// providers to serve a DNSSEC-signed zone at the same time.
	// This is required for DNSKEY records (except those automatically
	// generated by Cloudflare) to be added to the zone.
	// If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
	// providers to serve a DNSSEC-signed zone at the same time.
	// This is required for DNSKEY records (except those automatically
	// generated by Cloudflare) to be added to the zone.
	//
	// See [Multi-signer DNSSEC](https://developers.cloudflare.com/dns/dnssec/multi-signer-dnssec/) for details.
	// +kubebuilder:validation:Optional
	DNSSECMultiSigner *bool `json:"dnssecMultiSigner,omitempty" tf:"dnssec_multi_signer,omitempty"`

	// signed zone
	// including signatures from an external provider, without requiring
	// Cloudflare to sign any records on the fly.
	// If true, allows Cloudflare to transfer in a DNSSEC-signed zone
	// including signatures from an external provider, without requiring
	// Cloudflare to sign any records on the fly.
	//
	// Note that this feature has some limitations.
	// See [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for details.
	// +kubebuilder:validation:Optional
	DNSSECPresigned *bool `json:"dnssecPresigned,omitempty" tf:"dnssec_presigned,omitempty"`

	// desired state and presence of necessary records.
	// Status of DNSSEC, based on user-desired state and presence of necessary records.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// DNSSECSpec defines the desired state of DNSSEC
type DNSSECSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DNSSECParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DNSSECInitParameters `json:"initProvider,omitempty"`
}

// DNSSECStatus defines the observed state of DNSSEC.
type DNSSECStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DNSSECObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DNSSEC is the Schema for the DNSSECs API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type DNSSEC struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   DNSSECSpec   `json:"spec"`
	Status DNSSECStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DNSSECList contains a list of DNSSECs
type DNSSECList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DNSSEC `json:"items"`
}

// Repository type metadata.
var (
	DNSSEC_Kind             = "DNSSEC"
	DNSSEC_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DNSSEC_Kind}.String()
	DNSSEC_KindAPIVersion   = DNSSEC_Kind + "." + CRDGroupVersion.String()
	DNSSEC_GroupVersionKind = CRDGroupVersion.WithKind(DNSSEC_Kind)
)

func init() {
	SchemeBuilder.Register(&DNSSEC{}, &DNSSECList{})
}
