// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GreTunnelInitParameters struct {

	// (Attributes) (see below for nested schema)
	HealthCheck *HealthCheckInitParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`
}

type GreTunnelObservation struct {

	// (String) The IP address assigned to the Cloudflare side of the GRE tunnel.
	// The IP address assigned to the Cloudflare side of the GRE tunnel.
	CloudflareGreEndpoint *string `json:"cloudflareGreEndpoint,omitempty" tf:"cloudflare_gre_endpoint,omitempty"`

	// (String) The date and time the tunnel was created.
	// The date and time the tunnel was created.
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (String) The IP address assigned to the customer side of the GRE tunnel.
	// The IP address assigned to the customer side of the GRE tunnel.
	CustomerGreEndpoint *string `json:"customerGreEndpoint,omitempty" tf:"customer_gre_endpoint,omitempty"`

	// (String) An optional description of the GRE tunnel.
	// An optional description of the GRE tunnel.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Attributes) (see below for nested schema)
	HealthCheck *HealthCheckObservation `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// (String) Tunnel identifier tag.
	// Tunnel identifier tag.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	InterfaceAddress *string `json:"interfaceAddress,omitempty" tf:"interface_address,omitempty"`

	// (String) The date and time the tunnel was last modified.
	// The date and time the tunnel was last modified.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (Number) Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	// Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// (String) The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
	// The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) Time To Live (TTL) in number of hops of the GRE tunnel.
	// Time To Live (TTL) in number of hops of the GRE tunnel.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type GreTunnelParameters struct {

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	HealthCheck *HealthCheckParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`
}

type GreTunnelsHealthCheckInitParameters struct {

	// magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false. (see below for nested schema)
	Target *HealthCheckTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`
}

type GreTunnelsHealthCheckObservation struct {

	// (String) The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
	// The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// (Boolean) Determines whether to run healthchecks for a tunnel.
	// Determines whether to run healthchecks for a tunnel.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) How frequent the health check is run. The default value is mid.
	// How frequent the health check is run. The default value is `mid`.
	Rate *string `json:"rate,omitempty" tf:"rate,omitempty"`

	// magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false. (see below for nested schema)
	Target *HealthCheckTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of healthcheck to run, reply or request. The default value is reply.
	// The type of healthcheck to run, reply or request. The default value is `reply`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type GreTunnelsHealthCheckParameters struct {

	// magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Target *HealthCheckTargetParameters `json:"target,omitempty" tf:"target,omitempty"`
}

type GreTunnelsInitParameters struct {

	// (Attributes) (see below for nested schema)
	HealthCheck *GreTunnelsHealthCheckInitParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`
}

type GreTunnelsObservation struct {

	// (String) The IP address assigned to the Cloudflare side of the GRE tunnel.
	// The IP address assigned to the Cloudflare side of the GRE tunnel.
	CloudflareGreEndpoint *string `json:"cloudflareGreEndpoint,omitempty" tf:"cloudflare_gre_endpoint,omitempty"`

	// (String) The date and time the tunnel was created.
	// The date and time the tunnel was created.
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (String) The IP address assigned to the customer side of the GRE tunnel.
	// The IP address assigned to the customer side of the GRE tunnel.
	CustomerGreEndpoint *string `json:"customerGreEndpoint,omitempty" tf:"customer_gre_endpoint,omitempty"`

	// (String) An optional description of the GRE tunnel.
	// An optional description of the GRE tunnel.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Attributes) (see below for nested schema)
	HealthCheck *GreTunnelsHealthCheckObservation `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// (String) Tunnel identifier tag.
	// Tunnel identifier tag.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	InterfaceAddress *string `json:"interfaceAddress,omitempty" tf:"interface_address,omitempty"`

	// (String) The date and time the tunnel was last modified.
	// The date and time the tunnel was last modified.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (Number) Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	// Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// (String) The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
	// The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) Time To Live (TTL) in number of hops of the GRE tunnel.
	// Time To Live (TTL) in number of hops of the GRE tunnel.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type GreTunnelsParameters struct {

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	HealthCheck *GreTunnelsHealthCheckParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`
}

type HealthCheckInitParameters struct {

	// magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false. (see below for nested schema)
	Target *TargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`
}

type HealthCheckObservation struct {

	// (String) The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
	// The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// (Boolean) Determines whether to run healthchecks for a tunnel.
	// Determines whether to run healthchecks for a tunnel.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) How frequent the health check is run. The default value is mid.
	// How frequent the health check is run. The default value is `mid`.
	Rate *string `json:"rate,omitempty" tf:"rate,omitempty"`

	// magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false. (see below for nested schema)
	Target *TargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of healthcheck to run, reply or request. The default value is reply.
	// The type of healthcheck to run, reply or request. The default value is `reply`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type HealthCheckParameters struct {

	// magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Target *TargetParameters `json:"target,omitempty" tf:"target,omitempty"`
}

type HealthCheckTargetInitParameters struct {
}

type HealthCheckTargetObservation struct {

	// (String) The effective health check target. If 'saved' is empty, then this field will be populated with the calculated default value on GET requests. Ignored in POST, PUT, and PATCH requests.
	// The effective health check target. If 'saved' is empty, then this field will be populated with the calculated default value on GET requests. Ignored in POST, PUT, and PATCH requests.
	Effective *string `json:"effective,omitempty" tf:"effective,omitempty"`

	// (String) The saved health check target. Setting the value to the empty string indicates that the calculated default value will be used.
	// The saved health check target. Setting the value to the empty string indicates that the calculated default value will be used.
	Saved *string `json:"saved,omitempty" tf:"saved,omitempty"`
}

type HealthCheckTargetParameters struct {
}

type ModifiedGreTunnelHealthCheckInitParameters struct {

	// magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false. (see below for nested schema)
	Target *ModifiedGreTunnelHealthCheckTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`
}

type ModifiedGreTunnelHealthCheckObservation struct {

	// (String) The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
	// The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// (Boolean) Determines whether to run healthchecks for a tunnel.
	// Determines whether to run healthchecks for a tunnel.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) How frequent the health check is run. The default value is mid.
	// How frequent the health check is run. The default value is `mid`.
	Rate *string `json:"rate,omitempty" tf:"rate,omitempty"`

	// magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false. (see below for nested schema)
	Target *ModifiedGreTunnelHealthCheckTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of healthcheck to run, reply or request. The default value is reply.
	// The type of healthcheck to run, reply or request. The default value is `reply`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ModifiedGreTunnelHealthCheckParameters struct {

	// magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Target *ModifiedGreTunnelHealthCheckTargetParameters `json:"target,omitempty" tf:"target,omitempty"`
}

type ModifiedGreTunnelHealthCheckTargetInitParameters struct {
}

type ModifiedGreTunnelHealthCheckTargetObservation struct {

	// (String) The effective health check target. If 'saved' is empty, then this field will be populated with the calculated default value on GET requests. Ignored in POST, PUT, and PATCH requests.
	// The effective health check target. If 'saved' is empty, then this field will be populated with the calculated default value on GET requests. Ignored in POST, PUT, and PATCH requests.
	Effective *string `json:"effective,omitempty" tf:"effective,omitempty"`

	// (String) The saved health check target. Setting the value to the empty string indicates that the calculated default value will be used.
	// The saved health check target. Setting the value to the empty string indicates that the calculated default value will be used.
	Saved *string `json:"saved,omitempty" tf:"saved,omitempty"`
}

type ModifiedGreTunnelHealthCheckTargetParameters struct {
}

type ModifiedGreTunnelInitParameters struct {

	// (Attributes) (see below for nested schema)
	HealthCheck *ModifiedGreTunnelHealthCheckInitParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`
}

type ModifiedGreTunnelObservation struct {

	// (String) The IP address assigned to the Cloudflare side of the GRE tunnel.
	// The IP address assigned to the Cloudflare side of the GRE tunnel.
	CloudflareGreEndpoint *string `json:"cloudflareGreEndpoint,omitempty" tf:"cloudflare_gre_endpoint,omitempty"`

	// (String) The date and time the tunnel was created.
	// The date and time the tunnel was created.
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (String) The IP address assigned to the customer side of the GRE tunnel.
	// The IP address assigned to the customer side of the GRE tunnel.
	CustomerGreEndpoint *string `json:"customerGreEndpoint,omitempty" tf:"customer_gre_endpoint,omitempty"`

	// (String) An optional description of the GRE tunnel.
	// An optional description of the GRE tunnel.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Attributes) (see below for nested schema)
	HealthCheck *ModifiedGreTunnelHealthCheckObservation `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// (String) Tunnel identifier tag.
	// Tunnel identifier tag.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	InterfaceAddress *string `json:"interfaceAddress,omitempty" tf:"interface_address,omitempty"`

	// (String) The date and time the tunnel was last modified.
	// The date and time the tunnel was last modified.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (Number) Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	// Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// (String) The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
	// The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) Time To Live (TTL) in number of hops of the GRE tunnel.
	// Time To Live (TTL) in number of hops of the GRE tunnel.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type ModifiedGreTunnelParameters struct {

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	HealthCheck *ModifiedGreTunnelHealthCheckParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`
}

type TargetInitParameters struct {
}

type TargetObservation struct {

	// (String) The effective health check target. If 'saved' is empty, then this field will be populated with the calculated default value on GET requests. Ignored in POST, PUT, and PATCH requests.
	// The effective health check target. If 'saved' is empty, then this field will be populated with the calculated default value on GET requests. Ignored in POST, PUT, and PATCH requests.
	Effective *string `json:"effective,omitempty" tf:"effective,omitempty"`

	// (String) The saved health check target. Setting the value to the empty string indicates that the calculated default value will be used.
	// The saved health check target. Setting the value to the empty string indicates that the calculated default value will be used.
	Saved *string `json:"saved,omitempty" tf:"saved,omitempty"`
}

type TargetParameters struct {
}

type WanGreTunnelHealthCheckInitParameters struct {

	// (String) The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
	// The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// (Boolean) Determines whether to run healthchecks for a tunnel.
	// Determines whether to run healthchecks for a tunnel.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) How frequent the health check is run. The default value is mid.
	// How frequent the health check is run. The default value is `mid`.
	Rate *string `json:"rate,omitempty" tf:"rate,omitempty"`

	// magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false. (see below for nested schema)
	Target *WanGreTunnelHealthCheckTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of healthcheck to run, reply or request. The default value is reply.
	// The type of healthcheck to run, reply or request. The default value is `reply`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type WanGreTunnelHealthCheckObservation struct {

	// (String) The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
	// The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// (Boolean) Determines whether to run healthchecks for a tunnel.
	// Determines whether to run healthchecks for a tunnel.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) How frequent the health check is run. The default value is mid.
	// How frequent the health check is run. The default value is `mid`.
	Rate *string `json:"rate,omitempty" tf:"rate,omitempty"`

	// magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false. (see below for nested schema)
	Target *WanGreTunnelHealthCheckTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of healthcheck to run, reply or request. The default value is reply.
	// The type of healthcheck to run, reply or request. The default value is `reply`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type WanGreTunnelHealthCheckParameters struct {

	// (String) The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
	// The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
	// +kubebuilder:validation:Optional
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// (Boolean) Determines whether to run healthchecks for a tunnel.
	// Determines whether to run healthchecks for a tunnel.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) How frequent the health check is run. The default value is mid.
	// How frequent the health check is run. The default value is `mid`.
	// +kubebuilder:validation:Optional
	Rate *string `json:"rate,omitempty" tf:"rate,omitempty"`

	// magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Target *WanGreTunnelHealthCheckTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of healthcheck to run, reply or request. The default value is reply.
	// The type of healthcheck to run, reply or request. The default value is `reply`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type WanGreTunnelHealthCheckTargetInitParameters struct {

	// (String) The saved health check target. Setting the value to the empty string indicates that the calculated default value will be used.
	// The saved health check target. Setting the value to the empty string indicates that the calculated default value will be used.
	Saved *string `json:"saved,omitempty" tf:"saved,omitempty"`
}

type WanGreTunnelHealthCheckTargetObservation struct {

	// (String) The effective health check target. If 'saved' is empty, then this field will be populated with the calculated default value on GET requests. Ignored in POST, PUT, and PATCH requests.
	// The effective health check target. If 'saved' is empty, then this field will be populated with the calculated default value on GET requests. Ignored in POST, PUT, and PATCH requests.
	Effective *string `json:"effective,omitempty" tf:"effective,omitempty"`

	// (String) The saved health check target. Setting the value to the empty string indicates that the calculated default value will be used.
	// The saved health check target. Setting the value to the empty string indicates that the calculated default value will be used.
	Saved *string `json:"saved,omitempty" tf:"saved,omitempty"`
}

type WanGreTunnelHealthCheckTargetParameters struct {

	// (String) The saved health check target. Setting the value to the empty string indicates that the calculated default value will be used.
	// The saved health check target. Setting the value to the empty string indicates that the calculated default value will be used.
	// +kubebuilder:validation:Optional
	Saved *string `json:"saved,omitempty" tf:"saved,omitempty"`
}

type WanGreTunnelInitParameters struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The IP address assigned to the Cloudflare side of the GRE tunnel.
	// The IP address assigned to the Cloudflare side of the GRE tunnel.
	CloudflareGreEndpoint *string `json:"cloudflareGreEndpoint,omitempty" tf:"cloudflare_gre_endpoint,omitempty"`

	// (String) The IP address assigned to the customer side of the GRE tunnel.
	// The IP address assigned to the customer side of the GRE tunnel.
	CustomerGreEndpoint *string `json:"customerGreEndpoint,omitempty" tf:"customer_gre_endpoint,omitempty"`

	// (String) An optional description of the GRE tunnel.
	// An optional description of the GRE tunnel.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Attributes) (see below for nested schema)
	GreTunnel *GreTunnelInitParameters `json:"greTunnel,omitempty" tf:"gre_tunnel,omitempty"`

	// (String) Identifier
	// Identifier
	GreTunnelID *string `json:"greTunnelId,omitempty" tf:"gre_tunnel_id,omitempty"`

	// (Attributes List) (see below for nested schema)
	GreTunnels []GreTunnelsInitParameters `json:"greTunnels,omitempty" tf:"gre_tunnels,omitempty"`

	// (Attributes) (see below for nested schema)
	HealthCheck *WanGreTunnelHealthCheckInitParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	InterfaceAddress *string `json:"interfaceAddress,omitempty" tf:"interface_address,omitempty"`

	// (Attributes) (see below for nested schema)
	ModifiedGreTunnel *ModifiedGreTunnelInitParameters `json:"modifiedGreTunnel,omitempty" tf:"modified_gre_tunnel,omitempty"`

	// (Number) Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	// Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// (Number) Time To Live (TTL) in number of hops of the GRE tunnel.
	// Time To Live (TTL) in number of hops of the GRE tunnel.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type WanGreTunnelObservation struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The IP address assigned to the Cloudflare side of the GRE tunnel.
	// The IP address assigned to the Cloudflare side of the GRE tunnel.
	CloudflareGreEndpoint *string `json:"cloudflareGreEndpoint,omitempty" tf:"cloudflare_gre_endpoint,omitempty"`

	// (String) The IP address assigned to the customer side of the GRE tunnel.
	// The IP address assigned to the customer side of the GRE tunnel.
	CustomerGreEndpoint *string `json:"customerGreEndpoint,omitempty" tf:"customer_gre_endpoint,omitempty"`

	// (String) An optional description of the GRE tunnel.
	// An optional description of the GRE tunnel.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Attributes) (see below for nested schema)
	GreTunnel *GreTunnelObservation `json:"greTunnel,omitempty" tf:"gre_tunnel,omitempty"`

	// (String) Identifier
	// Identifier
	GreTunnelID *string `json:"greTunnelId,omitempty" tf:"gre_tunnel_id,omitempty"`

	// (Attributes List) (see below for nested schema)
	GreTunnels []GreTunnelsObservation `json:"greTunnels,omitempty" tf:"gre_tunnels,omitempty"`

	// (Attributes) (see below for nested schema)
	HealthCheck *WanGreTunnelHealthCheckObservation `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// (String) Tunnel identifier tag.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	InterfaceAddress *string `json:"interfaceAddress,omitempty" tf:"interface_address,omitempty"`

	// (Boolean)
	Modified *bool `json:"modified,omitempty" tf:"modified,omitempty"`

	// (Attributes) (see below for nested schema)
	ModifiedGreTunnel *ModifiedGreTunnelObservation `json:"modifiedGreTunnel,omitempty" tf:"modified_gre_tunnel,omitempty"`

	// (Number) Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	// Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// (Number) Time To Live (TTL) in number of hops of the GRE tunnel.
	// Time To Live (TTL) in number of hops of the GRE tunnel.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type WanGreTunnelParameters struct {

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The IP address assigned to the Cloudflare side of the GRE tunnel.
	// The IP address assigned to the Cloudflare side of the GRE tunnel.
	// +kubebuilder:validation:Optional
	CloudflareGreEndpoint *string `json:"cloudflareGreEndpoint,omitempty" tf:"cloudflare_gre_endpoint,omitempty"`

	// (String) The IP address assigned to the customer side of the GRE tunnel.
	// The IP address assigned to the customer side of the GRE tunnel.
	// +kubebuilder:validation:Optional
	CustomerGreEndpoint *string `json:"customerGreEndpoint,omitempty" tf:"customer_gre_endpoint,omitempty"`

	// (String) An optional description of the GRE tunnel.
	// An optional description of the GRE tunnel.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	GreTunnel *GreTunnelParameters `json:"greTunnel,omitempty" tf:"gre_tunnel,omitempty"`

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	GreTunnelID *string `json:"greTunnelId,omitempty" tf:"gre_tunnel_id,omitempty"`

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	GreTunnels []GreTunnelsParameters `json:"greTunnels,omitempty" tf:"gre_tunnels,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	HealthCheck *WanGreTunnelHealthCheckParameters `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	// +kubebuilder:validation:Optional
	InterfaceAddress *string `json:"interfaceAddress,omitempty" tf:"interface_address,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	ModifiedGreTunnel *ModifiedGreTunnelParameters `json:"modifiedGreTunnel,omitempty" tf:"modified_gre_tunnel,omitempty"`

	// (Number) Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	// Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	// +kubebuilder:validation:Optional
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// (Number) Time To Live (TTL) in number of hops of the GRE tunnel.
	// Time To Live (TTL) in number of hops of the GRE tunnel.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

// WanGreTunnelSpec defines the desired state of WanGreTunnel
type WanGreTunnelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WanGreTunnelParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WanGreTunnelInitParameters `json:"initProvider,omitempty"`
}

// WanGreTunnelStatus defines the observed state of WanGreTunnel.
type WanGreTunnelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WanGreTunnelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// WanGreTunnel is the Schema for the WanGreTunnels API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type WanGreTunnel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.greTunnels) || (has(self.initProvider) && has(self.initProvider.greTunnels))",message="spec.forProvider.greTunnels is a required parameter"
	Spec   WanGreTunnelSpec   `json:"spec"`
	Status WanGreTunnelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WanGreTunnelList contains a list of WanGreTunnels
type WanGreTunnelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WanGreTunnel `json:"items"`
}

// Repository type metadata.
var (
	WanGreTunnel_Kind             = "WanGreTunnel"
	WanGreTunnel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WanGreTunnel_Kind}.String()
	WanGreTunnel_KindAPIVersion   = WanGreTunnel_Kind + "." + CRDGroupVersion.String()
	WanGreTunnel_GroupVersionKind = CRDGroupVersion.WithKind(WanGreTunnel_Kind)
)

func init() {
	SchemeBuilder.Register(&WanGreTunnel{}, &WanGreTunnelList{})
}
