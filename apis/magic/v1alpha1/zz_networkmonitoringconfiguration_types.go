// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkMonitoringConfigurationInitParameters struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Number) Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
	// Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
	DefaultSampling *float64 `json:"defaultSampling,omitempty" tf:"default_sampling,omitempty"`

	// (List of String)
	RouterIps []*string `json:"routerIps,omitempty" tf:"router_ips,omitempty"`

	// (Attributes List) (see below for nested schema)
	WarpDevices []WarpDevicesInitParameters `json:"warpDevices,omitempty" tf:"warp_devices,omitempty"`
}

type NetworkMonitoringConfigurationObservation struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Number) Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
	// Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
	DefaultSampling *float64 `json:"defaultSampling,omitempty" tf:"default_sampling,omitempty"`

	// (String) Unique identifier for the warp device.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (List of String)
	RouterIps []*string `json:"routerIps,omitempty" tf:"router_ips,omitempty"`

	// (Attributes List) (see below for nested schema)
	WarpDevices []WarpDevicesObservation `json:"warpDevices,omitempty" tf:"warp_devices,omitempty"`
}

type NetworkMonitoringConfigurationParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Number) Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
	// Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
	// +kubebuilder:validation:Optional
	DefaultSampling *float64 `json:"defaultSampling,omitempty" tf:"default_sampling,omitempty"`

	// (List of String)
	// +kubebuilder:validation:Optional
	RouterIps []*string `json:"routerIps,omitempty" tf:"router_ips,omitempty"`

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	WarpDevices []WarpDevicesParameters `json:"warpDevices,omitempty" tf:"warp_devices,omitempty"`
}

type WarpDevicesInitParameters struct {

	// (String) Unique identifier for the warp device.
	// Unique identifier for the warp device.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The account name.
	// Name of the warp device.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) IPv4 CIDR of the router sourcing flow data associated with this warp device. Only /32 addresses are currently supported.
	// IPv4 CIDR of the router sourcing flow data associated with this warp device. Only /32 addresses are currently supported.
	RouterIP *string `json:"routerIp,omitempty" tf:"router_ip,omitempty"`
}

type WarpDevicesObservation struct {

	// (String) Unique identifier for the warp device.
	// Unique identifier for the warp device.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The account name.
	// Name of the warp device.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) IPv4 CIDR of the router sourcing flow data associated with this warp device. Only /32 addresses are currently supported.
	// IPv4 CIDR of the router sourcing flow data associated with this warp device. Only /32 addresses are currently supported.
	RouterIP *string `json:"routerIp,omitempty" tf:"router_ip,omitempty"`
}

type WarpDevicesParameters struct {

	// (String) Unique identifier for the warp device.
	// Unique identifier for the warp device.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// (String) The account name.
	// Name of the warp device.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) IPv4 CIDR of the router sourcing flow data associated with this warp device. Only /32 addresses are currently supported.
	// IPv4 CIDR of the router sourcing flow data associated with this warp device. Only /32 addresses are currently supported.
	// +kubebuilder:validation:Optional
	RouterIP *string `json:"routerIp" tf:"router_ip,omitempty"`
}

// NetworkMonitoringConfigurationSpec defines the desired state of NetworkMonitoringConfiguration
type NetworkMonitoringConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkMonitoringConfigurationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkMonitoringConfigurationInitParameters `json:"initProvider,omitempty"`
}

// NetworkMonitoringConfigurationStatus defines the observed state of NetworkMonitoringConfiguration.
type NetworkMonitoringConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkMonitoringConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NetworkMonitoringConfiguration is the Schema for the NetworkMonitoringConfigurations API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type NetworkMonitoringConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.warpDevices) || (has(self.initProvider) && has(self.initProvider.warpDevices))",message="spec.forProvider.warpDevices is a required parameter"
	Spec   NetworkMonitoringConfigurationSpec   `json:"spec"`
	Status NetworkMonitoringConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkMonitoringConfigurationList contains a list of NetworkMonitoringConfigurations
type NetworkMonitoringConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkMonitoringConfiguration `json:"items"`
}

// Repository type metadata.
var (
	NetworkMonitoringConfiguration_Kind             = "NetworkMonitoringConfiguration"
	NetworkMonitoringConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkMonitoringConfiguration_Kind}.String()
	NetworkMonitoringConfiguration_KindAPIVersion   = NetworkMonitoringConfiguration_Kind + "." + CRDGroupVersion.String()
	NetworkMonitoringConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(NetworkMonitoringConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkMonitoringConfiguration{}, &NetworkMonitoringConfigurationList{})
}
