// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LocationInitParameters struct {

	// (String) Latitude
	// Latitude
	Lat *string `json:"lat,omitempty" tf:"lat,omitempty"`

	// (String) Longitude
	// Longitude
	Lon *string `json:"lon,omitempty" tf:"lon,omitempty"`
}

type LocationObservation struct {

	// (String) Latitude
	// Latitude
	Lat *string `json:"lat,omitempty" tf:"lat,omitempty"`

	// (String) Longitude
	// Longitude
	Lon *string `json:"lon,omitempty" tf:"lon,omitempty"`
}

type LocationParameters struct {

	// (String) Latitude
	// Latitude
	// +kubebuilder:validation:Optional
	Lat *string `json:"lat,omitempty" tf:"lat,omitempty"`

	// (String) Longitude
	// Longitude
	// +kubebuilder:validation:Optional
	Lon *string `json:"lon,omitempty" tf:"lon,omitempty"`
}

type TransitSiteInitParameters struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Magic Connector identifier tag.
	// Magic Connector identifier tag.
	ConnectorID *string `json:"connectorId,omitempty" tf:"connector_id,omitempty"`

	// (String)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
	// Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
	HaMode *bool `json:"haMode,omitempty" tf:"ha_mode,omitempty"`

	// (Attributes) Location of site in latitude and longitude. (see below for nested schema)
	Location *LocationInitParameters `json:"location,omitempty" tf:"location,omitempty"`

	// (String) Magic Connector identifier tag. Used when high availability mode is on.
	// Magic Connector identifier tag. Used when high availability mode is on.
	SecondaryConnectorID *string `json:"secondaryConnectorId,omitempty" tf:"secondary_connector_id,omitempty"`
}

type TransitSiteObservation struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Magic Connector identifier tag.
	// Magic Connector identifier tag.
	ConnectorID *string `json:"connectorId,omitempty" tf:"connector_id,omitempty"`

	// (String)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
	// Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
	HaMode *bool `json:"haMode,omitempty" tf:"ha_mode,omitempty"`

	// (String) Identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes) Location of site in latitude and longitude. (see below for nested schema)
	Location *LocationObservation `json:"location,omitempty" tf:"location,omitempty"`

	// (String) Magic Connector identifier tag. Used when high availability mode is on.
	// Magic Connector identifier tag. Used when high availability mode is on.
	SecondaryConnectorID *string `json:"secondaryConnectorId,omitempty" tf:"secondary_connector_id,omitempty"`
}

type TransitSiteParameters struct {

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Magic Connector identifier tag.
	// Magic Connector identifier tag.
	// +kubebuilder:validation:Optional
	ConnectorID *string `json:"connectorId,omitempty" tf:"connector_id,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
	// Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
	// +kubebuilder:validation:Optional
	HaMode *bool `json:"haMode,omitempty" tf:"ha_mode,omitempty"`

	// (Attributes) Location of site in latitude and longitude. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Location *LocationParameters `json:"location,omitempty" tf:"location,omitempty"`

	// (String) Magic Connector identifier tag. Used when high availability mode is on.
	// Magic Connector identifier tag. Used when high availability mode is on.
	// +kubebuilder:validation:Optional
	SecondaryConnectorID *string `json:"secondaryConnectorId,omitempty" tf:"secondary_connector_id,omitempty"`
}

// TransitSiteSpec defines the desired state of TransitSite
type TransitSiteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransitSiteParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TransitSiteInitParameters `json:"initProvider,omitempty"`
}

// TransitSiteStatus defines the observed state of TransitSite.
type TransitSiteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransitSiteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TransitSite is the Schema for the TransitSites API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type TransitSite struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	Spec   TransitSiteSpec   `json:"spec"`
	Status TransitSiteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransitSiteList contains a list of TransitSites
type TransitSiteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransitSite `json:"items"`
}

// Repository type metadata.
var (
	TransitSite_Kind             = "TransitSite"
	TransitSite_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TransitSite_Kind}.String()
	TransitSite_KindAPIVersion   = TransitSite_Kind + "." + CRDGroupVersion.String()
	TransitSite_GroupVersionKind = CRDGroupVersion.WithKind(TransitSite_Kind)
)

func init() {
	SchemeBuilder.Register(&TransitSite{}, &TransitSiteList{})
}
