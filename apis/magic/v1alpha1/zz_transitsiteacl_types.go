// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Lan1InitParameters struct {

	// (String) The identifier for the LAN you want to create an ACL policy with.
	// The identifier for the LAN you want to create an ACL policy with.
	LanID *string `json:"lanId,omitempty" tf:"lan_id,omitempty"`

	// (String) The name of the LAN based on the provided lan_id.
	// The name of the LAN based on the provided lan_id.
	LanName *string `json:"lanName,omitempty" tf:"lan_name,omitempty"`

	// (List of String) Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
	// Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
	PortRanges []*string `json:"portRanges,omitempty" tf:"port_ranges,omitempty"`

	// (List of Number) Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
	// Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// (List of String) Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
	// Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

type Lan1Observation struct {

	// (String) The identifier for the LAN you want to create an ACL policy with.
	// The identifier for the LAN you want to create an ACL policy with.
	LanID *string `json:"lanId,omitempty" tf:"lan_id,omitempty"`

	// (String) The name of the LAN based on the provided lan_id.
	// The name of the LAN based on the provided lan_id.
	LanName *string `json:"lanName,omitempty" tf:"lan_name,omitempty"`

	// (List of String) Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
	// Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
	PortRanges []*string `json:"portRanges,omitempty" tf:"port_ranges,omitempty"`

	// (List of Number) Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
	// Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// (List of String) Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
	// Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

type Lan1Parameters struct {

	// (String) The identifier for the LAN you want to create an ACL policy with.
	// The identifier for the LAN you want to create an ACL policy with.
	// +kubebuilder:validation:Optional
	LanID *string `json:"lanId" tf:"lan_id,omitempty"`

	// (String) The name of the LAN based on the provided lan_id.
	// The name of the LAN based on the provided lan_id.
	// +kubebuilder:validation:Optional
	LanName *string `json:"lanName,omitempty" tf:"lan_name,omitempty"`

	// (List of String) Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
	// Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
	// +kubebuilder:validation:Optional
	PortRanges []*string `json:"portRanges,omitempty" tf:"port_ranges,omitempty"`

	// (List of Number) Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
	// Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
	// +kubebuilder:validation:Optional
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// (List of String) Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
	// Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
	// +kubebuilder:validation:Optional
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

type Lan2InitParameters struct {

	// (String) The identifier for the LAN you want to create an ACL policy with.
	// The identifier for the LAN you want to create an ACL policy with.
	LanID *string `json:"lanId,omitempty" tf:"lan_id,omitempty"`

	// (String) The name of the LAN based on the provided lan_id.
	// The name of the LAN based on the provided lan_id.
	LanName *string `json:"lanName,omitempty" tf:"lan_name,omitempty"`

	// (List of String) Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
	// Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
	PortRanges []*string `json:"portRanges,omitempty" tf:"port_ranges,omitempty"`

	// (List of Number) Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
	// Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// (List of String) Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
	// Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

type Lan2Observation struct {

	// (String) The identifier for the LAN you want to create an ACL policy with.
	// The identifier for the LAN you want to create an ACL policy with.
	LanID *string `json:"lanId,omitempty" tf:"lan_id,omitempty"`

	// (String) The name of the LAN based on the provided lan_id.
	// The name of the LAN based on the provided lan_id.
	LanName *string `json:"lanName,omitempty" tf:"lan_name,omitempty"`

	// (List of String) Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
	// Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
	PortRanges []*string `json:"portRanges,omitempty" tf:"port_ranges,omitempty"`

	// (List of Number) Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
	// Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// (List of String) Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
	// Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

type Lan2Parameters struct {

	// (String) The identifier for the LAN you want to create an ACL policy with.
	// The identifier for the LAN you want to create an ACL policy with.
	// +kubebuilder:validation:Optional
	LanID *string `json:"lanId" tf:"lan_id,omitempty"`

	// (String) The name of the LAN based on the provided lan_id.
	// The name of the LAN based on the provided lan_id.
	// +kubebuilder:validation:Optional
	LanName *string `json:"lanName,omitempty" tf:"lan_name,omitempty"`

	// (List of String) Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
	// Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
	// +kubebuilder:validation:Optional
	PortRanges []*string `json:"portRanges,omitempty" tf:"port_ranges,omitempty"`

	// (List of Number) Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
	// Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
	// +kubebuilder:validation:Optional
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// (List of String) Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
	// Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
	// +kubebuilder:validation:Optional
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

type TransitSiteACLInitParameters struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Description for the ACL.
	// Description for the ACL.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
	// The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
	ForwardLocally *bool `json:"forwardLocally,omitempty" tf:"forward_locally,omitempty"`

	// (Attributes) (see below for nested schema)
	Lan1 *Lan1InitParameters `json:"lan1,omitempty" tf:"lan_1,omitempty"`

	// (Attributes) (see below for nested schema)
	Lan2 *Lan2InitParameters `json:"lan2,omitempty" tf:"lan_2,omitempty"`

	// (List of String)
	Protocols []*string `json:"protocols,omitempty" tf:"protocols,omitempty"`

	// (String) Identifier
	// Identifier
	SiteID *string `json:"siteId,omitempty" tf:"site_id,omitempty"`

	// (Boolean) The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
	// The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
	Unidirectional *bool `json:"unidirectional,omitempty" tf:"unidirectional,omitempty"`
}

type TransitSiteACLObservation struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Description for the ACL.
	// Description for the ACL.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
	// The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
	ForwardLocally *bool `json:"forwardLocally,omitempty" tf:"forward_locally,omitempty"`

	// (String) Identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes) (see below for nested schema)
	Lan1 *Lan1Observation `json:"lan1,omitempty" tf:"lan_1,omitempty"`

	// (Attributes) (see below for nested schema)
	Lan2 *Lan2Observation `json:"lan2,omitempty" tf:"lan_2,omitempty"`

	// (List of String)
	Protocols []*string `json:"protocols,omitempty" tf:"protocols,omitempty"`

	// (String) Identifier
	// Identifier
	SiteID *string `json:"siteId,omitempty" tf:"site_id,omitempty"`

	// (Boolean) The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
	// The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
	Unidirectional *bool `json:"unidirectional,omitempty" tf:"unidirectional,omitempty"`
}

type TransitSiteACLParameters struct {

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Description for the ACL.
	// Description for the ACL.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
	// The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
	// +kubebuilder:validation:Optional
	ForwardLocally *bool `json:"forwardLocally,omitempty" tf:"forward_locally,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Lan1 *Lan1Parameters `json:"lan1,omitempty" tf:"lan_1,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Lan2 *Lan2Parameters `json:"lan2,omitempty" tf:"lan_2,omitempty"`

	// (List of String)
	// +kubebuilder:validation:Optional
	Protocols []*string `json:"protocols,omitempty" tf:"protocols,omitempty"`

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	SiteID *string `json:"siteId,omitempty" tf:"site_id,omitempty"`

	// (Boolean) The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
	// The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
	// +kubebuilder:validation:Optional
	Unidirectional *bool `json:"unidirectional,omitempty" tf:"unidirectional,omitempty"`
}

// TransitSiteACLSpec defines the desired state of TransitSiteACL
type TransitSiteACLSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransitSiteACLParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TransitSiteACLInitParameters `json:"initProvider,omitempty"`
}

// TransitSiteACLStatus defines the observed state of TransitSiteACL.
type TransitSiteACLStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransitSiteACLObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TransitSiteACL is the Schema for the TransitSiteACLs API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type TransitSiteACL struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.lan1) || (has(self.initProvider) && has(self.initProvider.lan1))",message="spec.forProvider.lan1 is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.lan2) || (has(self.initProvider) && has(self.initProvider.lan2))",message="spec.forProvider.lan2 is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.siteId) || (has(self.initProvider) && has(self.initProvider.siteId))",message="spec.forProvider.siteId is a required parameter"
	Spec   TransitSiteACLSpec   `json:"spec"`
	Status TransitSiteACLStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransitSiteACLList contains a list of TransitSiteACLs
type TransitSiteACLList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransitSiteACL `json:"items"`
}

// Repository type metadata.
var (
	TransitSiteACL_Kind             = "TransitSiteACL"
	TransitSiteACL_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TransitSiteACL_Kind}.String()
	TransitSiteACL_KindAPIVersion   = TransitSiteACL_Kind + "." + CRDGroupVersion.String()
	TransitSiteACL_GroupVersionKind = CRDGroupVersion.WithKind(TransitSiteACL_Kind)
)

func init() {
	SchemeBuilder.Register(&TransitSiteACL{}, &TransitSiteACLList{})
}
