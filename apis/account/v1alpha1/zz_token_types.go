// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionInitParameters struct {

	// (Attributes) Client IP restrictions. (see below for nested schema)
	RequestIP *RequestIPInitParameters `json:"requestIp,omitempty" tf:"request_ip,omitempty"`
}

type ConditionObservation struct {

	// (Attributes) Client IP restrictions. (see below for nested schema)
	RequestIP *RequestIPObservation `json:"requestIp,omitempty" tf:"request_ip,omitempty"`
}

type ConditionParameters struct {

	// (Attributes) Client IP restrictions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	RequestIP *RequestIPParameters `json:"requestIp,omitempty" tf:"request_ip,omitempty"`
}

type MetaInitParameters struct {

	// (String)
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The token value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MetaObservation struct {

	// (String)
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The token value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MetaParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The token value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PoliciesPermissionGroupsInitParameters struct {

	// (String) Token identifier tag.
	// Identifier of the group.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes) Attributes associated to the permission group. (see below for nested schema)
	Meta *MetaInitParameters `json:"meta,omitempty" tf:"meta,omitempty"`
}

type PoliciesPermissionGroupsObservation struct {

	// (String) Token identifier tag.
	// Identifier of the group.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes) Attributes associated to the permission group. (see below for nested schema)
	Meta *MetaObservation `json:"meta,omitempty" tf:"meta,omitempty"`

	// (String) Token name.
	// Name of the group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PoliciesPermissionGroupsParameters struct {

	// (String) Token identifier tag.
	// Identifier of the group.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// (Attributes) Attributes associated to the permission group. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Meta *MetaParameters `json:"meta,omitempty" tf:"meta,omitempty"`
}

type RequestIPInitParameters struct {

	// (List of String) List of IPv4/IPv6 CIDR addresses.
	// List of IPv4/IPv6 CIDR addresses.
	In []*string `json:"in,omitempty" tf:"in,omitempty"`

	// (List of String) List of IPv4/IPv6 CIDR addresses.
	// List of IPv4/IPv6 CIDR addresses.
	NotIn []*string `json:"notIn,omitempty" tf:"not_in,omitempty"`
}

type RequestIPObservation struct {

	// (List of String) List of IPv4/IPv6 CIDR addresses.
	// List of IPv4/IPv6 CIDR addresses.
	In []*string `json:"in,omitempty" tf:"in,omitempty"`

	// (List of String) List of IPv4/IPv6 CIDR addresses.
	// List of IPv4/IPv6 CIDR addresses.
	NotIn []*string `json:"notIn,omitempty" tf:"not_in,omitempty"`
}

type RequestIPParameters struct {

	// (List of String) List of IPv4/IPv6 CIDR addresses.
	// List of IPv4/IPv6 CIDR addresses.
	// +kubebuilder:validation:Optional
	In []*string `json:"in,omitempty" tf:"in,omitempty"`

	// (List of String) List of IPv4/IPv6 CIDR addresses.
	// List of IPv4/IPv6 CIDR addresses.
	// +kubebuilder:validation:Optional
	NotIn []*string `json:"notIn,omitempty" tf:"not_in,omitempty"`
}

type TokenInitParameters struct {

	// (String) Account identifier tag.
	// Account identifier tag.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) (see below for nested schema)
	Condition *ConditionInitParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// (String) The expiration time on or after which the JWT MUST NOT be accepted for processing.
	// The expiration time on or after which the JWT MUST NOT be accepted for processing.
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	// (String) The time before which the token MUST NOT be accepted for processing.
	// The time before which the token MUST NOT be accepted for processing.
	NotBefore *string `json:"notBefore,omitempty" tf:"not_before,omitempty"`

	// (Attributes List) List of access policies assigned to the token. (see below for nested schema)
	Policies []TokenPoliciesInitParameters `json:"policies,omitempty" tf:"policies,omitempty"`

	// (String) Status of the token.
	// Status of the token.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type TokenObservation struct {

	// (String) Account identifier tag.
	// Account identifier tag.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) (see below for nested schema)
	Condition *ConditionObservation `json:"condition,omitempty" tf:"condition,omitempty"`

	// (String) The expiration time on or after which the JWT MUST NOT be accepted for processing.
	// The expiration time on or after which the JWT MUST NOT be accepted for processing.
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	// (String) Token identifier tag.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The time on which the token was created.
	// The time on which the token was created.
	IssuedOn *string `json:"issuedOn,omitempty" tf:"issued_on,omitempty"`

	// (String) Last time the token was used.
	// Last time the token was used.
	LastUsedOn *string `json:"lastUsedOn,omitempty" tf:"last_used_on,omitempty"`

	// (String) Last time the token was modified.
	// Last time the token was modified.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (String) The time before which the token MUST NOT be accepted for processing.
	// The time before which the token MUST NOT be accepted for processing.
	NotBefore *string `json:"notBefore,omitempty" tf:"not_before,omitempty"`

	// (Attributes List) List of access policies assigned to the token. (see below for nested schema)
	Policies []TokenPoliciesObservation `json:"policies,omitempty" tf:"policies,omitempty"`

	// (String) Status of the token.
	// Status of the token.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) The token value.
	// The token value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TokenParameters struct {

	// (String) Account identifier tag.
	// Account identifier tag.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Condition *ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// (String) The expiration time on or after which the JWT MUST NOT be accepted for processing.
	// The expiration time on or after which the JWT MUST NOT be accepted for processing.
	// +kubebuilder:validation:Optional
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	// (String) The time before which the token MUST NOT be accepted for processing.
	// The time before which the token MUST NOT be accepted for processing.
	// +kubebuilder:validation:Optional
	NotBefore *string `json:"notBefore,omitempty" tf:"not_before,omitempty"`

	// (Attributes List) List of access policies assigned to the token. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Policies []TokenPoliciesParameters `json:"policies,omitempty" tf:"policies,omitempty"`

	// (String) Status of the token.
	// Status of the token.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type TokenPoliciesInitParameters struct {

	// (String) Allow or deny operations against the resources.
	// Allow or deny operations against the resources.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// (Attributes List) A set of permission groups that are specified to the policy. (see below for nested schema)
	PermissionGroups []PoliciesPermissionGroupsInitParameters `json:"permissionGroups,omitempty" tf:"permission_groups,omitempty"`

	// (Map of String) A list of resource names that the policy applies to.
	// A list of resource names that the policy applies to.
	// +mapType=granular
	Resources map[string]*string `json:"resources,omitempty" tf:"resources,omitempty"`
}

type TokenPoliciesObservation struct {

	// (String) Allow or deny operations against the resources.
	// Allow or deny operations against the resources.
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// (String) Token identifier tag.
	// Policy identifier.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes List) A set of permission groups that are specified to the policy. (see below for nested schema)
	PermissionGroups []PoliciesPermissionGroupsObservation `json:"permissionGroups,omitempty" tf:"permission_groups,omitempty"`

	// (Map of String) A list of resource names that the policy applies to.
	// A list of resource names that the policy applies to.
	// +mapType=granular
	Resources map[string]*string `json:"resources,omitempty" tf:"resources,omitempty"`
}

type TokenPoliciesParameters struct {

	// (String) Allow or deny operations against the resources.
	// Allow or deny operations against the resources.
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// (Attributes List) A set of permission groups that are specified to the policy. (see below for nested schema)
	// +kubebuilder:validation:Optional
	PermissionGroups []PoliciesPermissionGroupsParameters `json:"permissionGroups" tf:"permission_groups,omitempty"`

	// (Map of String) A list of resource names that the policy applies to.
	// A list of resource names that the policy applies to.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Resources map[string]*string `json:"resources" tf:"resources,omitempty"`
}

// TokenSpec defines the desired state of Token
type TokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TokenParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TokenInitParameters `json:"initProvider,omitempty"`
}

// TokenStatus defines the observed state of Token.
type TokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Token is the Schema for the Tokens API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Token struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policies) || (has(self.initProvider) && has(self.initProvider.policies))",message="spec.forProvider.policies is a required parameter"
	Spec   TokenSpec   `json:"spec"`
	Status TokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TokenList contains a list of Tokens
type TokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Token `json:"items"`
}

// Repository type metadata.
var (
	Token_Kind             = "Token"
	Token_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Token_Kind}.String()
	Token_KindAPIVersion   = Token_Kind + "." + CRDGroupVersion.String()
	Token_GroupVersionKind = CRDGroupVersion.WithKind(Token_Kind)
)

func init() {
	SchemeBuilder.Register(&Token{}, &TokenList{})
}
