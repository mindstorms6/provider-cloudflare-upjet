// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RatePlanInitParameters struct {

	// (String) The monetary unit in which pricing information is displayed.
	// The currency applied to the rate plan subscription.
	Currency *string `json:"currency,omitempty" tf:"currency,omitempty"`

	// (Boolean) Whether this rate plan is managed externally from Cloudflare.
	// Whether this rate plan is managed externally from Cloudflare.
	ExternallyManaged *bool `json:"externallyManaged,omitempty" tf:"externally_managed,omitempty"`

	// (String) Subscription identifier tag.
	// The ID of the rate plan.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// based (or newly adopted term contract).
	// Whether a rate plan is enterprise-based (or newly adopted term contract).
	IsContract *bool `json:"isContract,omitempty" tf:"is_contract,omitempty"`

	// (String) The full name of the rate plan.
	// The full name of the rate plan.
	PublicName *string `json:"publicName,omitempty" tf:"public_name,omitempty"`

	// (String) The scope that this rate plan applies to.
	// The scope that this rate plan applies to.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (List of String) The list of sets this rate plan applies to.
	// The list of sets this rate plan applies to.
	Sets []*string `json:"sets,omitempty" tf:"sets,omitempty"`
}

type RatePlanObservation struct {

	// (String) The monetary unit in which pricing information is displayed.
	// The currency applied to the rate plan subscription.
	Currency *string `json:"currency,omitempty" tf:"currency,omitempty"`

	// (Boolean) Whether this rate plan is managed externally from Cloudflare.
	// Whether this rate plan is managed externally from Cloudflare.
	ExternallyManaged *bool `json:"externallyManaged,omitempty" tf:"externally_managed,omitempty"`

	// (String) Subscription identifier tag.
	// The ID of the rate plan.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// based (or newly adopted term contract).
	// Whether a rate plan is enterprise-based (or newly adopted term contract).
	IsContract *bool `json:"isContract,omitempty" tf:"is_contract,omitempty"`

	// (String) The full name of the rate plan.
	// The full name of the rate plan.
	PublicName *string `json:"publicName,omitempty" tf:"public_name,omitempty"`

	// (String) The scope that this rate plan applies to.
	// The scope that this rate plan applies to.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (List of String) The list of sets this rate plan applies to.
	// The list of sets this rate plan applies to.
	Sets []*string `json:"sets,omitempty" tf:"sets,omitempty"`
}

type RatePlanParameters struct {

	// (String) The monetary unit in which pricing information is displayed.
	// The currency applied to the rate plan subscription.
	// +kubebuilder:validation:Optional
	Currency *string `json:"currency,omitempty" tf:"currency,omitempty"`

	// (Boolean) Whether this rate plan is managed externally from Cloudflare.
	// Whether this rate plan is managed externally from Cloudflare.
	// +kubebuilder:validation:Optional
	ExternallyManaged *bool `json:"externallyManaged,omitempty" tf:"externally_managed,omitempty"`

	// (String) Subscription identifier tag.
	// The ID of the rate plan.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// based (or newly adopted term contract).
	// Whether a rate plan is enterprise-based (or newly adopted term contract).
	// +kubebuilder:validation:Optional
	IsContract *bool `json:"isContract,omitempty" tf:"is_contract,omitempty"`

	// (String) The full name of the rate plan.
	// The full name of the rate plan.
	// +kubebuilder:validation:Optional
	PublicName *string `json:"publicName,omitempty" tf:"public_name,omitempty"`

	// (String) The scope that this rate plan applies to.
	// The scope that this rate plan applies to.
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (List of String) The list of sets this rate plan applies to.
	// The list of sets this rate plan applies to.
	// +kubebuilder:validation:Optional
	Sets []*string `json:"sets,omitempty" tf:"sets,omitempty"`
}

type SubscriptionInitParameters struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) How often the subscription is renewed automatically.
	// How often the subscription is renewed automatically.
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (Attributes) The rate plan applied to the subscription. (see below for nested schema)
	RatePlan *RatePlanInitParameters `json:"ratePlan,omitempty" tf:"rate_plan,omitempty"`

	// (String) Subscription identifier tag.
	// Subscription identifier tag.
	SubscriptionIdentifier *string `json:"subscriptionIdentifier,omitempty" tf:"subscription_identifier,omitempty"`
}

type SubscriptionObservation struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The monetary unit in which pricing information is displayed.
	// The monetary unit in which pricing information is displayed.
	Currency *string `json:"currency,omitempty" tf:"currency,omitempty"`

	// (String) The end of the current period and also when the next billing is due.
	// The end of the current period and also when the next billing is due.
	CurrentPeriodEnd *string `json:"currentPeriodEnd,omitempty" tf:"current_period_end,omitempty"`

	// (String) When the current billing period started. May match initial_period_start if this is the first period.
	// When the current billing period started. May match initial_period_start if this is the first period.
	CurrentPeriodStart *string `json:"currentPeriodStart,omitempty" tf:"current_period_start,omitempty"`

	// (String) How often the subscription is renewed automatically.
	// How often the subscription is renewed automatically.
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (String) Subscription identifier tag.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) The price of the subscription that will be billed, in US dollars.
	// The price of the subscription that will be billed, in US dollars.
	Price *float64 `json:"price,omitempty" tf:"price,omitempty"`

	// (Attributes) The rate plan applied to the subscription. (see below for nested schema)
	RatePlan *RatePlanObservation `json:"ratePlan,omitempty" tf:"rate_plan,omitempty"`

	// (String) The state that the subscription is in.
	// The state that the subscription is in.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String) Subscription identifier tag.
	// Subscription identifier tag.
	SubscriptionIdentifier *string `json:"subscriptionIdentifier,omitempty" tf:"subscription_identifier,omitempty"`
}

type SubscriptionParameters struct {

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) How often the subscription is renewed automatically.
	// How often the subscription is renewed automatically.
	// +kubebuilder:validation:Optional
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (Attributes) The rate plan applied to the subscription. (see below for nested schema)
	// +kubebuilder:validation:Optional
	RatePlan *RatePlanParameters `json:"ratePlan,omitempty" tf:"rate_plan,omitempty"`

	// (String) Subscription identifier tag.
	// Subscription identifier tag.
	// +kubebuilder:validation:Optional
	SubscriptionIdentifier *string `json:"subscriptionIdentifier,omitempty" tf:"subscription_identifier,omitempty"`
}

// SubscriptionSpec defines the desired state of Subscription
type SubscriptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubscriptionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SubscriptionInitParameters `json:"initProvider,omitempty"`
}

// SubscriptionStatus defines the observed state of Subscription.
type SubscriptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Subscription is the Schema for the Subscriptions API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Subscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	Spec   SubscriptionSpec   `json:"spec"`
	Status SubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubscriptionList contains a list of Subscriptions
type SubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Subscription `json:"items"`
}

// Repository type metadata.
var (
	Subscription_Kind             = "Subscription"
	Subscription_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Subscription_Kind}.String()
	Subscription_KindAPIVersion   = Subscription_Kind + "." + CRDGroupVersion.String()
	Subscription_GroupVersionKind = CRDGroupVersion.WithKind(Subscription_Kind)
)

func init() {
	SchemeBuilder.Register(&Subscription{}, &SubscriptionList{})
}
