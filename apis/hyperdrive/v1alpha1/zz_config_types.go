// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CachingInitParameters struct {

	// (Boolean) When set to true, disables the caching of SQL responses. (Default: false)
	// When set to true, disables the caching of SQL responses. (Default: false)
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (Number) When present, specifies max duration for which items should persist in the cache. Not returned if set to default. (Default: 60)
	// When present, specifies max duration for which items should persist in the cache. Not returned if set to default. (Default: 60)
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`

	// (Number) When present, indicates the number of seconds cache may serve the response after it becomes stale. Not returned if set to default. (Default: 15)
	// When present, indicates the number of seconds cache may serve the response after it becomes stale. Not returned if set to default. (Default: 15)
	StaleWhileRevalidate *float64 `json:"staleWhileRevalidate,omitempty" tf:"stale_while_revalidate,omitempty"`
}

type CachingObservation struct {

	// (Boolean) When set to true, disables the caching of SQL responses. (Default: false)
	// When set to true, disables the caching of SQL responses. (Default: false)
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (Number) When present, specifies max duration for which items should persist in the cache. Not returned if set to default. (Default: 60)
	// When present, specifies max duration for which items should persist in the cache. Not returned if set to default. (Default: 60)
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`

	// (Number) When present, indicates the number of seconds cache may serve the response after it becomes stale. Not returned if set to default. (Default: 15)
	// When present, indicates the number of seconds cache may serve the response after it becomes stale. Not returned if set to default. (Default: 15)
	StaleWhileRevalidate *float64 `json:"staleWhileRevalidate,omitempty" tf:"stale_while_revalidate,omitempty"`
}

type CachingParameters struct {

	// (Boolean) When set to true, disables the caching of SQL responses. (Default: false)
	// When set to true, disables the caching of SQL responses. (Default: false)
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (Number) When present, specifies max duration for which items should persist in the cache. Not returned if set to default. (Default: 60)
	// When present, specifies max duration for which items should persist in the cache. Not returned if set to default. (Default: 60)
	// +kubebuilder:validation:Optional
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`

	// (Number) When present, indicates the number of seconds cache may serve the response after it becomes stale. Not returned if set to default. (Default: 15)
	// When present, indicates the number of seconds cache may serve the response after it becomes stale. Not returned if set to default. (Default: 15)
	// +kubebuilder:validation:Optional
	StaleWhileRevalidate *float64 `json:"staleWhileRevalidate,omitempty" tf:"stale_while_revalidate,omitempty"`
}

type ConfigInitParameters struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) (see below for nested schema)
	Caching *CachingInitParameters `json:"caching,omitempty" tf:"caching,omitempty"`

	// (Attributes) (see below for nested schema)
	Origin *OriginInitParameters `json:"origin,omitempty" tf:"origin,omitempty"`
}

type ConfigObservation struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) (see below for nested schema)
	Caching *CachingObservation `json:"caching,omitempty" tf:"caching,omitempty"`

	// (String) When the Hyperdrive configuration was created.
	// When the Hyperdrive configuration was created.
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (String) Identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) When the Hyperdrive configuration was last modified.
	// When the Hyperdrive configuration was last modified.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (Attributes) (see below for nested schema)
	Origin *OriginObservation `json:"origin,omitempty" tf:"origin,omitempty"`
}

type ConfigParameters struct {

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Caching *CachingParameters `json:"caching,omitempty" tf:"caching,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Origin *OriginParameters `json:"origin,omitempty" tf:"origin,omitempty"`
}

type OriginInitParameters struct {

	// (String) The Client ID of the Access token to use when connecting to the origin database.
	// The Client ID of the Access token to use when connecting to the origin database.
	AccessClientID *string `json:"accessClientId,omitempty" tf:"access_client_id,omitempty"`

	// only and never returned by the API.
	// The Client Secret of the Access token to use when connecting to the origin database. This value is write-only and never returned by the API.
	AccessClientSecret *string `json:"accessClientSecret,omitempty" tf:"access_client_secret,omitempty"`

	// (String) The name of your origin database.
	// The name of your origin database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) The host (hostname or IP) of your origin database.
	// The host (hostname or IP) of your origin database.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// only and never returned by the API.
	// The password required to access your origin database. This value is write-only and never returned by the API.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// (Number) The port (default: 5432 for Postgres) of your origin database.
	// The port (default: 5432 for Postgres) of your origin database.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) Specifies the URL scheme used to connect to your origin database.
	// Specifies the URL scheme used to connect to your origin database.
	Scheme *string `json:"scheme,omitempty" tf:"scheme,omitempty"`

	// (String) The user of your origin database.
	// The user of your origin database.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type OriginObservation struct {

	// (String) The Client ID of the Access token to use when connecting to the origin database.
	// The Client ID of the Access token to use when connecting to the origin database.
	AccessClientID *string `json:"accessClientId,omitempty" tf:"access_client_id,omitempty"`

	// only and never returned by the API.
	// The Client Secret of the Access token to use when connecting to the origin database. This value is write-only and never returned by the API.
	AccessClientSecret *string `json:"accessClientSecret,omitempty" tf:"access_client_secret,omitempty"`

	// (String) The name of your origin database.
	// The name of your origin database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) The host (hostname or IP) of your origin database.
	// The host (hostname or IP) of your origin database.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// only and never returned by the API.
	// The password required to access your origin database. This value is write-only and never returned by the API.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// (Number) The port (default: 5432 for Postgres) of your origin database.
	// The port (default: 5432 for Postgres) of your origin database.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) Specifies the URL scheme used to connect to your origin database.
	// Specifies the URL scheme used to connect to your origin database.
	Scheme *string `json:"scheme,omitempty" tf:"scheme,omitempty"`

	// (String) The user of your origin database.
	// The user of your origin database.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type OriginParameters struct {

	// (String) The Client ID of the Access token to use when connecting to the origin database.
	// The Client ID of the Access token to use when connecting to the origin database.
	// +kubebuilder:validation:Optional
	AccessClientID *string `json:"accessClientId,omitempty" tf:"access_client_id,omitempty"`

	// only and never returned by the API.
	// The Client Secret of the Access token to use when connecting to the origin database. This value is write-only and never returned by the API.
	// +kubebuilder:validation:Optional
	AccessClientSecret *string `json:"accessClientSecret,omitempty" tf:"access_client_secret,omitempty"`

	// (String) The name of your origin database.
	// The name of your origin database.
	// +kubebuilder:validation:Optional
	Database *string `json:"database" tf:"database,omitempty"`

	// (String) The host (hostname or IP) of your origin database.
	// The host (hostname or IP) of your origin database.
	// +kubebuilder:validation:Optional
	Host *string `json:"host" tf:"host,omitempty"`

	// only and never returned by the API.
	// The password required to access your origin database. This value is write-only and never returned by the API.
	// +kubebuilder:validation:Optional
	Password *string `json:"password" tf:"password,omitempty"`

	// (Number) The port (default: 5432 for Postgres) of your origin database.
	// The port (default: 5432 for Postgres) of your origin database.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) Specifies the URL scheme used to connect to your origin database.
	// Specifies the URL scheme used to connect to your origin database.
	// +kubebuilder:validation:Optional
	Scheme *string `json:"scheme" tf:"scheme,omitempty"`

	// (String) The user of your origin database.
	// The user of your origin database.
	// +kubebuilder:validation:Optional
	User *string `json:"user" tf:"user,omitempty"`
}

// ConfigSpec defines the desired state of Config
type ConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConfigInitParameters `json:"initProvider,omitempty"`
}

// ConfigStatus defines the observed state of Config.
type ConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Config is the Schema for the Configs API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Config struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.origin) || (has(self.initProvider) && has(self.initProvider.origin))",message="spec.forProvider.origin is a required parameter"
	Spec   ConfigSpec   `json:"spec"`
	Status ConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigList contains a list of Configs
type ConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Config `json:"items"`
}

// Repository type metadata.
var (
	Config_Kind             = "Config"
	Config_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Config_Kind}.String()
	Config_KindAPIVersion   = Config_Kind + "." + CRDGroupVersion.String()
	Config_GroupVersionKind = CRDGroupVersion.WithKind(Config_Kind)
)

func init() {
	SchemeBuilder.Register(&Config{}, &ConfigList{})
}
