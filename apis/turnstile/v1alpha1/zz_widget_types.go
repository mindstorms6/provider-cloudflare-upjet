// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WidgetInitParameters struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) If bot_fight_mode is set to true, Cloudflare issues computationally
	// expensive challenges in response to malicious bots (ENT only).
	// If bot_fight_mode is set to `true`, Cloudflare issues computationally
	// expensive challenges in response to malicious bots (ENT only).
	BotFightMode *bool `json:"botFightMode,omitempty" tf:"bot_fight_mode,omitempty"`

	// (String) If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
	// this setting can determine the clearance level to be set
	// If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
	// this setting can determine the clearance level to be set
	ClearanceLevel *string `json:"clearanceLevel,omitempty" tf:"clearance_level,omitempty"`

	// (List of String)
	Domains []*string `json:"domains,omitempty" tf:"domains,omitempty"`

	// (Boolean) Return the Ephemeral ID in /siteverify (ENT only).
	// Return the Ephemeral ID in /siteverify (ENT only).
	EphemeralID *bool `json:"ephemeralId,omitempty" tf:"ephemeral_id,omitempty"`

	// (String) Widget Mode
	// Widget Mode
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (Boolean) Do not show any Cloudflare branding on the widget (ENT only).
	// Do not show any Cloudflare branding on the widget (ENT only).
	Offlabel *bool `json:"offlabel,omitempty" tf:"offlabel,omitempty"`

	// (String) Region where this widget can be used.
	// Region where this widget can be used.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type WidgetObservation struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) If bot_fight_mode is set to true, Cloudflare issues computationally
	// expensive challenges in response to malicious bots (ENT only).
	// If bot_fight_mode is set to `true`, Cloudflare issues computationally
	// expensive challenges in response to malicious bots (ENT only).
	BotFightMode *bool `json:"botFightMode,omitempty" tf:"bot_fight_mode,omitempty"`

	// (String) If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
	// this setting can determine the clearance level to be set
	// If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
	// this setting can determine the clearance level to be set
	ClearanceLevel *string `json:"clearanceLevel,omitempty" tf:"clearance_level,omitempty"`

	// (String) When the widget was created.
	// When the widget was created.
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (List of String)
	Domains []*string `json:"domains,omitempty" tf:"domains,omitempty"`

	// (Boolean) Return the Ephemeral ID in /siteverify (ENT only).
	// Return the Ephemeral ID in /siteverify (ENT only).
	EphemeralID *bool `json:"ephemeralId,omitempty" tf:"ephemeral_id,omitempty"`

	// (String) Widget item identifier tag.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Widget Mode
	// Widget Mode
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (String) When the widget was modified.
	// When the widget was modified.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (Boolean) Do not show any Cloudflare branding on the widget (ENT only).
	// Do not show any Cloudflare branding on the widget (ENT only).
	Offlabel *bool `json:"offlabel,omitempty" tf:"offlabel,omitempty"`

	// (String) Region where this widget can be used.
	// Region where this widget can be used.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) Secret key for this widget.
	// Secret key for this widget.
	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`

	// (String) Widget item identifier tag.
	// Widget item identifier tag.
	Sitekey *string `json:"sitekey,omitempty" tf:"sitekey,omitempty"`
}

type WidgetParameters struct {

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) If bot_fight_mode is set to true, Cloudflare issues computationally
	// expensive challenges in response to malicious bots (ENT only).
	// If bot_fight_mode is set to `true`, Cloudflare issues computationally
	// expensive challenges in response to malicious bots (ENT only).
	// +kubebuilder:validation:Optional
	BotFightMode *bool `json:"botFightMode,omitempty" tf:"bot_fight_mode,omitempty"`

	// (String) If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
	// this setting can determine the clearance level to be set
	// If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
	// this setting can determine the clearance level to be set
	// +kubebuilder:validation:Optional
	ClearanceLevel *string `json:"clearanceLevel,omitempty" tf:"clearance_level,omitempty"`

	// (List of String)
	// +kubebuilder:validation:Optional
	Domains []*string `json:"domains,omitempty" tf:"domains,omitempty"`

	// (Boolean) Return the Ephemeral ID in /siteverify (ENT only).
	// Return the Ephemeral ID in /siteverify (ENT only).
	// +kubebuilder:validation:Optional
	EphemeralID *bool `json:"ephemeralId,omitempty" tf:"ephemeral_id,omitempty"`

	// (String) Widget Mode
	// Widget Mode
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (Boolean) Do not show any Cloudflare branding on the widget (ENT only).
	// Do not show any Cloudflare branding on the widget (ENT only).
	// +kubebuilder:validation:Optional
	Offlabel *bool `json:"offlabel,omitempty" tf:"offlabel,omitempty"`

	// (String) Region where this widget can be used.
	// Region where this widget can be used.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// WidgetSpec defines the desired state of Widget
type WidgetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WidgetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WidgetInitParameters `json:"initProvider,omitempty"`
}

// WidgetStatus defines the observed state of Widget.
type WidgetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WidgetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Widget is the Schema for the Widgets API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Widget struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domains) || (has(self.initProvider) && has(self.initProvider.domains))",message="spec.forProvider.domains is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mode) || (has(self.initProvider) && has(self.initProvider.mode))",message="spec.forProvider.mode is a required parameter"
	Spec   WidgetSpec   `json:"spec"`
	Status WidgetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WidgetList contains a list of Widgets
type WidgetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Widget `json:"items"`
}

// Repository type metadata.
var (
	Widget_Kind             = "Widget"
	Widget_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Widget_Kind}.String()
	Widget_KindAPIVersion   = Widget_Kind + "." + CRDGroupVersion.String()
	Widget_GroupVersionKind = CRDGroupVersion.WithKind(Widget_Kind)
)

func init() {
	SchemeBuilder.Register(&Widget{}, &WidgetList{})
}
