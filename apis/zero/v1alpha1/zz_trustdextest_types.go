// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataInitParameters struct {

	// (String) The desired endpoint to test.
	// The desired endpoint to test.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) The type of test.
	// The type of test.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (String) The HTTP request method type.
	// The HTTP request method type.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`
}

type DataObservation struct {

	// (String) The desired endpoint to test.
	// The desired endpoint to test.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) The type of test.
	// The type of test.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (String) The HTTP request method type.
	// The HTTP request method type.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`
}

type DataParameters struct {

	// (String) The desired endpoint to test.
	// The desired endpoint to test.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) The type of test.
	// The type of test.
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (String) The HTTP request method type.
	// The HTTP request method type.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`
}

type TargetPoliciesInitParameters struct {

	// (Boolean) Whether the profile is the account default
	// Whether the profile is the account default
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// (String) The unique identifier for the test.
	// The id of the device settings profile
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the DEX test. Must be unique.
	// The name of the device settings profile
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TargetPoliciesObservation struct {

	// (Boolean) Whether the profile is the account default
	// Whether the profile is the account default
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// (String) The unique identifier for the test.
	// The id of the device settings profile
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the DEX test. Must be unique.
	// The name of the device settings profile
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TargetPoliciesParameters struct {

	// (Boolean) Whether the profile is the account default
	// Whether the profile is the account default
	// +kubebuilder:validation:Optional
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// (String) The unique identifier for the test.
	// The id of the device settings profile
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the DEX test. Must be unique.
	// The name of the device settings profile
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TrustDexTestInitParameters struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) The configuration object which contains the details for the WARP client to conduct the test. (see below for nested schema)
	Data *DataInitParameters `json:"data,omitempty" tf:"data,omitempty"`

	// (String) Additional details about the test.
	// Additional details about the test.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Determines whether or not the test is active.
	// Determines whether or not the test is active.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) How often the test will run.
	// How often the test will run.
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// (Attributes List) Device settings profiles targeted by this test (see below for nested schema)
	TargetPolicies []TargetPoliciesInitParameters `json:"targetPolicies,omitempty" tf:"target_policies,omitempty"`

	// (Boolean)
	Targeted *bool `json:"targeted,omitempty" tf:"targeted,omitempty"`
}

type TrustDexTestObservation struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) The configuration object which contains the details for the WARP client to conduct the test. (see below for nested schema)
	Data *DataObservation `json:"data,omitempty" tf:"data,omitempty"`

	// (String) Additional details about the test.
	// Additional details about the test.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Determines whether or not the test is active.
	// Determines whether or not the test is active.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The unique identifier for the test.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) How often the test will run.
	// How often the test will run.
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// (Attributes List) Device settings profiles targeted by this test (see below for nested schema)
	TargetPolicies []TargetPoliciesObservation `json:"targetPolicies,omitempty" tf:"target_policies,omitempty"`

	// (Boolean)
	Targeted *bool `json:"targeted,omitempty" tf:"targeted,omitempty"`

	// (String) The unique identifier for the test.
	// The unique identifier for the test.
	TestID *string `json:"testId,omitempty" tf:"test_id,omitempty"`
}

type TrustDexTestParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) The configuration object which contains the details for the WARP client to conduct the test. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Data *DataParameters `json:"data,omitempty" tf:"data,omitempty"`

	// (String) Additional details about the test.
	// Additional details about the test.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Determines whether or not the test is active.
	// Determines whether or not the test is active.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) How often the test will run.
	// How often the test will run.
	// +kubebuilder:validation:Optional
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// (Attributes List) Device settings profiles targeted by this test (see below for nested schema)
	// +kubebuilder:validation:Optional
	TargetPolicies []TargetPoliciesParameters `json:"targetPolicies,omitempty" tf:"target_policies,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	Targeted *bool `json:"targeted,omitempty" tf:"targeted,omitempty"`
}

// TrustDexTestSpec defines the desired state of TrustDexTest
type TrustDexTestSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrustDexTestParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrustDexTestInitParameters `json:"initProvider,omitempty"`
}

// TrustDexTestStatus defines the observed state of TrustDexTest.
type TrustDexTestStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrustDexTestObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrustDexTest is the Schema for the TrustDexTests API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type TrustDexTest struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.interval) || (has(self.initProvider) && has(self.initProvider.interval))",message="spec.forProvider.interval is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targetPolicies) || (has(self.initProvider) && has(self.initProvider.targetPolicies))",message="spec.forProvider.targetPolicies is a required parameter"
	Spec   TrustDexTestSpec   `json:"spec"`
	Status TrustDexTestStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrustDexTestList contains a list of TrustDexTests
type TrustDexTestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrustDexTest `json:"items"`
}

// Repository type metadata.
var (
	TrustDexTest_Kind             = "TrustDexTest"
	TrustDexTest_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrustDexTest_Kind}.String()
	TrustDexTest_KindAPIVersion   = TrustDexTest_Kind + "." + CRDGroupVersion.String()
	TrustDexTest_GroupVersionKind = CRDGroupVersion.WithKind(TrustDexTest_Kind)
)

func init() {
	SchemeBuilder.Register(&TrustDexTest{}, &TrustDexTestList{})
}
