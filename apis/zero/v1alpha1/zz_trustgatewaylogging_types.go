// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SettingsByRuleTypeInitParameters struct {

	// (String) Logging settings for DNS firewall.
	// Logging settings for DNS firewall.
	DNS *string `json:"dns,omitempty" tf:"dns,omitempty"`

	// (String) Logging settings for HTTP/HTTPS firewall.
	// Logging settings for HTTP/HTTPS firewall.
	HTTP *string `json:"http,omitempty" tf:"http,omitempty"`

	// (String) Logging settings for Network firewall.
	// Logging settings for Network firewall.
	L4 *string `json:"l4,omitempty" tf:"l4,omitempty"`
}

type SettingsByRuleTypeObservation struct {

	// (String) Logging settings for DNS firewall.
	// Logging settings for DNS firewall.
	DNS *string `json:"dns,omitempty" tf:"dns,omitempty"`

	// (String) Logging settings for HTTP/HTTPS firewall.
	// Logging settings for HTTP/HTTPS firewall.
	HTTP *string `json:"http,omitempty" tf:"http,omitempty"`

	// (String) Logging settings for Network firewall.
	// Logging settings for Network firewall.
	L4 *string `json:"l4,omitempty" tf:"l4,omitempty"`
}

type SettingsByRuleTypeParameters struct {

	// (String) Logging settings for DNS firewall.
	// Logging settings for DNS firewall.
	// +kubebuilder:validation:Optional
	DNS *string `json:"dns,omitempty" tf:"dns,omitempty"`

	// (String) Logging settings for HTTP/HTTPS firewall.
	// Logging settings for HTTP/HTTPS firewall.
	// +kubebuilder:validation:Optional
	HTTP *string `json:"http,omitempty" tf:"http,omitempty"`

	// (String) Logging settings for Network firewall.
	// Logging settings for Network firewall.
	// +kubebuilder:validation:Optional
	L4 *string `json:"l4,omitempty" tf:"l4,omitempty"`
}

type TrustGatewayLoggingInitParameters struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) Redact personally identifiable information from activity logging (PII fields are: source IP, user email, user ID, device ID, URL, referrer, user agent).
	// Redact personally identifiable information from activity logging (PII fields are: source IP, user email, user ID, device ID, URL, referrer, user agent).
	RedactPii *bool `json:"redactPii,omitempty" tf:"redact_pii,omitempty"`

	// (Attributes) Logging settings by rule type. (see below for nested schema)
	SettingsByRuleType *SettingsByRuleTypeInitParameters `json:"settingsByRuleType,omitempty" tf:"settings_by_rule_type,omitempty"`
}

type TrustGatewayLoggingObservation struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Redact personally identifiable information from activity logging (PII fields are: source IP, user email, user ID, device ID, URL, referrer, user agent).
	// Redact personally identifiable information from activity logging (PII fields are: source IP, user email, user ID, device ID, URL, referrer, user agent).
	RedactPii *bool `json:"redactPii,omitempty" tf:"redact_pii,omitempty"`

	// (Attributes) Logging settings by rule type. (see below for nested schema)
	SettingsByRuleType *SettingsByRuleTypeObservation `json:"settingsByRuleType,omitempty" tf:"settings_by_rule_type,omitempty"`
}

type TrustGatewayLoggingParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) Redact personally identifiable information from activity logging (PII fields are: source IP, user email, user ID, device ID, URL, referrer, user agent).
	// Redact personally identifiable information from activity logging (PII fields are: source IP, user email, user ID, device ID, URL, referrer, user agent).
	// +kubebuilder:validation:Optional
	RedactPii *bool `json:"redactPii,omitempty" tf:"redact_pii,omitempty"`

	// (Attributes) Logging settings by rule type. (see below for nested schema)
	// +kubebuilder:validation:Optional
	SettingsByRuleType *SettingsByRuleTypeParameters `json:"settingsByRuleType,omitempty" tf:"settings_by_rule_type,omitempty"`
}

// TrustGatewayLoggingSpec defines the desired state of TrustGatewayLogging
type TrustGatewayLoggingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrustGatewayLoggingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrustGatewayLoggingInitParameters `json:"initProvider,omitempty"`
}

// TrustGatewayLoggingStatus defines the observed state of TrustGatewayLogging.
type TrustGatewayLoggingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrustGatewayLoggingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrustGatewayLogging is the Schema for the TrustGatewayLoggings API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type TrustGatewayLogging struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	Spec   TrustGatewayLoggingSpec   `json:"spec"`
	Status TrustGatewayLoggingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrustGatewayLoggingList contains a list of TrustGatewayLoggings
type TrustGatewayLoggingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrustGatewayLogging `json:"items"`
}

// Repository type metadata.
var (
	TrustGatewayLogging_Kind             = "TrustGatewayLogging"
	TrustGatewayLogging_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrustGatewayLogging_Kind}.String()
	TrustGatewayLogging_KindAPIVersion   = TrustGatewayLogging_Kind + "." + CRDGroupVersion.String()
	TrustGatewayLogging_GroupVersionKind = CRDGroupVersion.WithKind(TrustGatewayLogging_Kind)
)

func init() {
	SchemeBuilder.Register(&TrustGatewayLogging{}, &TrustGatewayLoggingList{})
}
