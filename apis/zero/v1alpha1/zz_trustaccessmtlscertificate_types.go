// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TrustAccessMtlsCertificateInitParameters struct {

	// (String) The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (List of String) The hostnames of the applications that will use this certificate.
	// The hostnames of the applications that will use this certificate.
	AssociatedHostnames []*string `json:"associatedHostnames,omitempty" tf:"associated_hostnames,omitempty"`

	// (String) The certificate content.
	// The certificate content.
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// (String) The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type TrustAccessMtlsCertificateObservation struct {

	// (String) The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (List of String) The hostnames of the applications that will use this certificate.
	// The hostnames of the applications that will use this certificate.
	AssociatedHostnames []*string `json:"associatedHostnames,omitempty" tf:"associated_hostnames,omitempty"`

	// (String) The certificate content.
	// The certificate content.
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// (String)
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String)
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	// (String) The MD5 fingerprint of the certificate.
	// The MD5 fingerprint of the certificate.
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	// (String) The ID of the application that will use this certificate.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// (String) The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type TrustAccessMtlsCertificateParameters struct {

	// (String) The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (List of String) The hostnames of the applications that will use this certificate.
	// The hostnames of the applications that will use this certificate.
	// +kubebuilder:validation:Optional
	AssociatedHostnames []*string `json:"associatedHostnames,omitempty" tf:"associated_hostnames,omitempty"`

	// (String) The certificate content.
	// The certificate content.
	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// (String) The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// TrustAccessMtlsCertificateSpec defines the desired state of TrustAccessMtlsCertificate
type TrustAccessMtlsCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrustAccessMtlsCertificateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrustAccessMtlsCertificateInitParameters `json:"initProvider,omitempty"`
}

// TrustAccessMtlsCertificateStatus defines the observed state of TrustAccessMtlsCertificate.
type TrustAccessMtlsCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrustAccessMtlsCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrustAccessMtlsCertificate is the Schema for the TrustAccessMtlsCertificates API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type TrustAccessMtlsCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certificate) || (has(self.initProvider) && has(self.initProvider.certificate))",message="spec.forProvider.certificate is a required parameter"
	Spec   TrustAccessMtlsCertificateSpec   `json:"spec"`
	Status TrustAccessMtlsCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrustAccessMtlsCertificateList contains a list of TrustAccessMtlsCertificates
type TrustAccessMtlsCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrustAccessMtlsCertificate `json:"items"`
}

// Repository type metadata.
var (
	TrustAccessMtlsCertificate_Kind             = "TrustAccessMtlsCertificate"
	TrustAccessMtlsCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrustAccessMtlsCertificate_Kind}.String()
	TrustAccessMtlsCertificate_KindAPIVersion   = TrustAccessMtlsCertificate_Kind + "." + CRDGroupVersion.String()
	TrustAccessMtlsCertificate_GroupVersionKind = CRDGroupVersion.WithKind(TrustAccessMtlsCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&TrustAccessMtlsCertificate{}, &TrustAccessMtlsCertificateList{})
}
