// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPv4InitParameters struct {

	// (String) IP address of the target
	// IP address of the target
	IPAddr *string `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	// (String)  Private virtual network identifier for the target. If omitted, the default virtual network ID will be used.
	// (optional) Private virtual network identifier for the target. If omitted, the default virtual network ID will be used.
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`
}

type IPv4Observation struct {

	// (String) IP address of the target
	// IP address of the target
	IPAddr *string `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	// (String)  Private virtual network identifier for the target. If omitted, the default virtual network ID will be used.
	// (optional) Private virtual network identifier for the target. If omitted, the default virtual network ID will be used.
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`
}

type IPv4Parameters struct {

	// (String) IP address of the target
	// IP address of the target
	// +kubebuilder:validation:Optional
	IPAddr *string `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	// (String)  Private virtual network identifier for the target. If omitted, the default virtual network ID will be used.
	// (optional) Private virtual network identifier for the target. If omitted, the default virtual network ID will be used.
	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`
}

type IPv6InitParameters struct {

	// (String) IP address of the target
	// IP address of the target
	IPAddr *string `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	// (String)  Private virtual network identifier for the target. If omitted, the default virtual network ID will be used.
	// (optional) Private virtual network identifier for the target. If omitted, the default virtual network ID will be used.
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`
}

type IPv6Observation struct {

	// (String) IP address of the target
	// IP address of the target
	IPAddr *string `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	// (String)  Private virtual network identifier for the target. If omitted, the default virtual network ID will be used.
	// (optional) Private virtual network identifier for the target. If omitted, the default virtual network ID will be used.
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`
}

type IPv6Parameters struct {

	// (String) IP address of the target
	// IP address of the target
	// +kubebuilder:validation:Optional
	IPAddr *string `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	// (String)  Private virtual network identifier for the target. If omitted, the default virtual network ID will be used.
	// (optional) Private virtual network identifier for the target. If omitted, the default virtual network ID will be used.
	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`
}

type TrustAccessInfrastructureTargetIPInitParameters struct {

	// (Attributes) The target's IPv4 address (see below for nested schema)
	IPv4 *IPv4InitParameters `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// (Attributes) The target's IPv6 address (see below for nested schema)
	IPv6 *IPv6InitParameters `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type TrustAccessInfrastructureTargetIPObservation struct {

	// (Attributes) The target's IPv4 address (see below for nested schema)
	IPv4 *IPv4Observation `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// (Attributes) The target's IPv6 address (see below for nested schema)
	IPv6 *IPv6Observation `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type TrustAccessInfrastructureTargetIPParameters struct {

	// (Attributes) The target's IPv4 address (see below for nested schema)
	// +kubebuilder:validation:Optional
	IPv4 *IPv4Parameters `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// (Attributes) The target's IPv6 address (see below for nested schema)
	// +kubebuilder:validation:Optional
	IPv6 *IPv6Parameters `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type TrustAccessInfrastructureTargetInitParameters struct {

	// (String) Account identifier
	// Account identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// unique field that refers to a target. Case insensitive, maximum
	// length of 255 characters, supports the use of special characters dash
	// and period, does not support spaces, and must start and end with an
	// alphanumeric character.
	// A non-unique field that refers to a target. Case insensitive, maximum
	// length of 255 characters, supports the use of special characters dash
	// and period, does not support spaces, and must start and end with an
	// alphanumeric character.
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// (Attributes) The IPv4/IPv6 address that identifies where to reach a target (see below for nested schema)
	IP *TrustAccessInfrastructureTargetIPInitParameters `json:"ip,omitempty" tf:"ip,omitempty"`
}

type TrustAccessInfrastructureTargetObservation struct {

	// (String) Account identifier
	// Account identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) Date and time at which the target was created
	// Date and time at which the target was created
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// unique field that refers to a target. Case insensitive, maximum
	// length of 255 characters, supports the use of special characters dash
	// and period, does not support spaces, and must start and end with an
	// alphanumeric character.
	// A non-unique field that refers to a target. Case insensitive, maximum
	// length of 255 characters, supports the use of special characters dash
	// and period, does not support spaces, and must start and end with an
	// alphanumeric character.
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// (String) Target identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes) The IPv4/IPv6 address that identifies where to reach a target (see below for nested schema)
	IP *TrustAccessInfrastructureTargetIPObservation `json:"ip,omitempty" tf:"ip,omitempty"`

	// (String) Date and time at which the target was modified
	// Date and time at which the target was modified
	ModifiedAt *string `json:"modifiedAt,omitempty" tf:"modified_at,omitempty"`
}

type TrustAccessInfrastructureTargetParameters struct {

	// (String) Account identifier
	// Account identifier
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// unique field that refers to a target. Case insensitive, maximum
	// length of 255 characters, supports the use of special characters dash
	// and period, does not support spaces, and must start and end with an
	// alphanumeric character.
	// A non-unique field that refers to a target. Case insensitive, maximum
	// length of 255 characters, supports the use of special characters dash
	// and period, does not support spaces, and must start and end with an
	// alphanumeric character.
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// (Attributes) The IPv4/IPv6 address that identifies where to reach a target (see below for nested schema)
	// +kubebuilder:validation:Optional
	IP *TrustAccessInfrastructureTargetIPParameters `json:"ip,omitempty" tf:"ip,omitempty"`
}

// TrustAccessInfrastructureTargetSpec defines the desired state of TrustAccessInfrastructureTarget
type TrustAccessInfrastructureTargetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrustAccessInfrastructureTargetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrustAccessInfrastructureTargetInitParameters `json:"initProvider,omitempty"`
}

// TrustAccessInfrastructureTargetStatus defines the observed state of TrustAccessInfrastructureTarget.
type TrustAccessInfrastructureTargetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrustAccessInfrastructureTargetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrustAccessInfrastructureTarget is the Schema for the TrustAccessInfrastructureTargets API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type TrustAccessInfrastructureTarget struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hostname) || (has(self.initProvider) && has(self.initProvider.hostname))",message="spec.forProvider.hostname is a required parameter"
	Spec   TrustAccessInfrastructureTargetSpec   `json:"spec"`
	Status TrustAccessInfrastructureTargetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrustAccessInfrastructureTargetList contains a list of TrustAccessInfrastructureTargets
type TrustAccessInfrastructureTargetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrustAccessInfrastructureTarget `json:"items"`
}

// Repository type metadata.
var (
	TrustAccessInfrastructureTarget_Kind             = "TrustAccessInfrastructureTarget"
	TrustAccessInfrastructureTarget_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrustAccessInfrastructureTarget_Kind}.String()
	TrustAccessInfrastructureTarget_KindAPIVersion   = TrustAccessInfrastructureTarget_Kind + "." + CRDGroupVersion.String()
	TrustAccessInfrastructureTarget_GroupVersionKind = CRDGroupVersion.WithKind(TrustAccessInfrastructureTarget_Kind)
)

func init() {
	SchemeBuilder.Register(&TrustAccessInfrastructureTarget{}, &TrustAccessInfrastructureTargetList{})
}
