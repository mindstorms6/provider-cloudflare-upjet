// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TrustGatewayCertificateInitParameters struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Number) Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years.
	// Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years.
	ValidityPeriodDays *float64 `json:"validityPeriodDays,omitempty" tf:"validity_period_days,omitempty"`
}

type TrustGatewayCertificateObservation struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The deployment status of the certificate on Cloudflare's edge. Certificates in the 'available' (previously called 'active') state may be used for Gateway TLS interception.
	// The deployment status of the certificate on Cloudflare's edge. Certificates in the 'available' (previously called 'active') state may be used for Gateway TLS interception.
	BindingStatus *string `json:"bindingStatus,omitempty" tf:"binding_status,omitempty"`

	// (String) The CA certificate
	// The CA certificate
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// (String)
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String)
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	// (String) The SHA256 fingerprint of the certificate.
	// The SHA256 fingerprint of the certificate.
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	// (String) Certificate UUID tag.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Use this certificate for Gateway TLS interception
	// Use this certificate for Gateway TLS interception
	InUse *bool `json:"inUse,omitempty" tf:"in_use,omitempty"`

	// (String) The organization that issued the certificate.
	// The organization that issued the certificate.
	IssuerOrg *string `json:"issuerOrg,omitempty" tf:"issuer_org,omitempty"`

	// (String) The entire issuer field of the certificate.
	// The entire issuer field of the certificate.
	IssuerRaw *string `json:"issuerRaw,omitempty" tf:"issuer_raw,omitempty"`

	// PKI (custom) or Gateway-managed.
	// The type of certificate, either BYO-PKI (custom) or Gateway-managed.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String)
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// (String)
	UploadedOn *string `json:"uploadedOn,omitempty" tf:"uploaded_on,omitempty"`

	// (Number) Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years.
	// Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years.
	ValidityPeriodDays *float64 `json:"validityPeriodDays,omitempty" tf:"validity_period_days,omitempty"`
}

type TrustGatewayCertificateParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Number) Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years.
	// Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years.
	// +kubebuilder:validation:Optional
	ValidityPeriodDays *float64 `json:"validityPeriodDays,omitempty" tf:"validity_period_days,omitempty"`
}

// TrustGatewayCertificateSpec defines the desired state of TrustGatewayCertificate
type TrustGatewayCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrustGatewayCertificateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrustGatewayCertificateInitParameters `json:"initProvider,omitempty"`
}

// TrustGatewayCertificateStatus defines the observed state of TrustGatewayCertificate.
type TrustGatewayCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrustGatewayCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrustGatewayCertificate is the Schema for the TrustGatewayCertificates API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type TrustGatewayCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	Spec   TrustGatewayCertificateSpec   `json:"spec"`
	Status TrustGatewayCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrustGatewayCertificateList contains a list of TrustGatewayCertificates
type TrustGatewayCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrustGatewayCertificate `json:"items"`
}

// Repository type metadata.
var (
	TrustGatewayCertificate_Kind             = "TrustGatewayCertificate"
	TrustGatewayCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrustGatewayCertificate_Kind}.String()
	TrustGatewayCertificate_KindAPIVersion   = TrustGatewayCertificate_Kind + "." + CRDGroupVersion.String()
	TrustGatewayCertificate_GroupVersionKind = CRDGroupVersion.WithKind(TrustGatewayCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&TrustGatewayCertificate{}, &TrustGatewayCertificateList{})
}
