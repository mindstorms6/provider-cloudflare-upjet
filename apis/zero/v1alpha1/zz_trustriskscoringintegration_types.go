// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TrustRiskScoringIntegrationInitParameters struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// party.
	// Whether this integration is enabled. If disabled, no risk changes will be exported to the third-party.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String)
	IntegrationType *string `json:"integrationType,omitempty" tf:"integration_type,omitempty"`

	// Okta IDP ID (a UUIDv4).
	// https://developers.cloudflare.com/api/operations/access-identity-providers-get-an-access-identity-provider
	// A reference id that can be supplied by the client. Currently this should be set to the Access-Okta IDP ID (a UUIDv4).
	// https://developers.cloudflare.com/api/operations/access-identity-providers-get-an-access-identity-provider
	ReferenceID *string `json:"referenceId,omitempty" tf:"reference_id,omitempty"`

	// (String) The base url of the tenant, e.g. "https://tenant.okta.com"
	// The base url of the tenant, e.g. "https://tenant.okta.com"
	TenantURL *string `json:"tenantUrl,omitempty" tf:"tenant_url,omitempty"`
}

type TrustRiskScoringIntegrationObservation struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The Cloudflare account tag.
	// The Cloudflare account tag.
	AccountTag *string `json:"accountTag,omitempty" tf:"account_tag,omitempty"`

	// party.
	// Whether this integration is enabled. If disabled, no risk changes will be exported to the third-party.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) When the integration was created in RFC3339 format.
	// When the integration was created in RFC3339 format.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) The id of the integration, a UUIDv4.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	IntegrationType *string `json:"integrationType,omitempty" tf:"integration_type,omitempty"`

	// Okta IDP ID (a UUIDv4).
	// https://developers.cloudflare.com/api/operations/access-identity-providers-get-an-access-identity-provider
	// A reference id that can be supplied by the client. Currently this should be set to the Access-Okta IDP ID (a UUIDv4).
	// https://developers.cloudflare.com/api/operations/access-identity-providers-get-an-access-identity-provider
	ReferenceID *string `json:"referenceId,omitempty" tf:"reference_id,omitempty"`

	// (String) The base url of the tenant, e.g. "https://tenant.okta.com"
	// The base url of the tenant, e.g. "https://tenant.okta.com"
	TenantURL *string `json:"tenantUrl,omitempty" tf:"tenant_url,omitempty"`

	// known/sse-configuration/{integration_uuid}/". https://openid.net/specs/openid-sse-framework-1_0.html#rfc.section.6.2.1
	// The URL for the Shared Signals Framework configuration, e.g. "/.well-known/sse-configuration/{integration_uuid}/". https://openid.net/specs/openid-sse-framework-1_0.html#rfc.section.6.2.1
	WellKnownURL *string `json:"wellKnownUrl,omitempty" tf:"well_known_url,omitempty"`
}

type TrustRiskScoringIntegrationParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// party.
	// Whether this integration is enabled. If disabled, no risk changes will be exported to the third-party.
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	IntegrationType *string `json:"integrationType,omitempty" tf:"integration_type,omitempty"`

	// Okta IDP ID (a UUIDv4).
	// https://developers.cloudflare.com/api/operations/access-identity-providers-get-an-access-identity-provider
	// A reference id that can be supplied by the client. Currently this should be set to the Access-Okta IDP ID (a UUIDv4).
	// https://developers.cloudflare.com/api/operations/access-identity-providers-get-an-access-identity-provider
	// +kubebuilder:validation:Optional
	ReferenceID *string `json:"referenceId,omitempty" tf:"reference_id,omitempty"`

	// (String) The base url of the tenant, e.g. "https://tenant.okta.com"
	// The base url of the tenant, e.g. "https://tenant.okta.com"
	// +kubebuilder:validation:Optional
	TenantURL *string `json:"tenantUrl,omitempty" tf:"tenant_url,omitempty"`
}

// TrustRiskScoringIntegrationSpec defines the desired state of TrustRiskScoringIntegration
type TrustRiskScoringIntegrationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrustRiskScoringIntegrationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrustRiskScoringIntegrationInitParameters `json:"initProvider,omitempty"`
}

// TrustRiskScoringIntegrationStatus defines the observed state of TrustRiskScoringIntegration.
type TrustRiskScoringIntegrationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrustRiskScoringIntegrationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrustRiskScoringIntegration is the Schema for the TrustRiskScoringIntegrations API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type TrustRiskScoringIntegration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.integrationType) || (has(self.initProvider) && has(self.initProvider.integrationType))",message="spec.forProvider.integrationType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tenantUrl) || (has(self.initProvider) && has(self.initProvider.tenantUrl))",message="spec.forProvider.tenantUrl is a required parameter"
	Spec   TrustRiskScoringIntegrationSpec   `json:"spec"`
	Status TrustRiskScoringIntegrationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrustRiskScoringIntegrationList contains a list of TrustRiskScoringIntegrations
type TrustRiskScoringIntegrationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrustRiskScoringIntegration `json:"items"`
}

// Repository type metadata.
var (
	TrustRiskScoringIntegration_Kind             = "TrustRiskScoringIntegration"
	TrustRiskScoringIntegration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrustRiskScoringIntegration_Kind}.String()
	TrustRiskScoringIntegration_KindAPIVersion   = TrustRiskScoringIntegration_Kind + "." + CRDGroupVersion.String()
	TrustRiskScoringIntegration_GroupVersionKind = CRDGroupVersion.WithKind(TrustRiskScoringIntegration_Kind)
)

func init() {
	SchemeBuilder.Register(&TrustRiskScoringIntegration{}, &TrustRiskScoringIntegrationList{})
}
