// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuditSSHInitParameters struct {

	// (Boolean) Enable to turn on SSH command logging.
	// Enable to turn on SSH command logging.
	CommandLogging *bool `json:"commandLogging,omitempty" tf:"command_logging,omitempty"`
}

type AuditSSHObservation struct {

	// (Boolean) Enable to turn on SSH command logging.
	// Enable to turn on SSH command logging.
	CommandLogging *bool `json:"commandLogging,omitempty" tf:"command_logging,omitempty"`
}

type AuditSSHParameters struct {

	// (Boolean) Enable to turn on SSH command logging.
	// Enable to turn on SSH command logging.
	// +kubebuilder:validation:Optional
	CommandLogging *bool `json:"commandLogging,omitempty" tf:"command_logging,omitempty"`
}

type BisoAdminControlsInitParameters struct {

	// (String) Configure whether copy is enabled or not. When set with "remote_only", copying isolated content from the remote browser to the user's local clipboard is disabled. When absent, copy is enabled. Only applies when version == "v2".
	// Configure whether copy is enabled or not. When set with "remote_only", copying isolated content from the remote browser to the user's local clipboard is disabled. When absent, copy is enabled. Only applies when `version == "v2"`.
	Copy *string `json:"copy,omitempty" tf:"copy,omitempty"`

	// pasting. Only applies when version == "v1".
	// Set to false to enable copy-pasting. Only applies when `version == "v1"`.
	Dcp *bool `json:"dcp,omitempty" tf:"dcp,omitempty"`

	// (Boolean) Set to false to enable downloading. Only applies when version == "v1".
	// Set to false to enable downloading. Only applies when `version == "v1"`.
	Dd *bool `json:"dd,omitempty" tf:"dd,omitempty"`

	// (Boolean) Set to false to enable keyboard usage. Only applies when version == "v1".
	// Set to false to enable keyboard usage. Only applies when `version == "v1"`.
	Dk *bool `json:"dk,omitempty" tf:"dk,omitempty"`

	// (String) Configure whether downloading enabled or not. When absent, downloading is enabled. Only applies when version == "v2".
	// Configure whether downloading enabled or not. When absent, downloading is enabled. Only applies when `version == "v2"`.
	Download *string `json:"download,omitempty" tf:"download,omitempty"`

	// (Boolean) Set to false to enable printing. Only applies when version == "v1".
	// Set to false to enable printing. Only applies when `version == "v1"`.
	Dp *bool `json:"dp,omitempty" tf:"dp,omitempty"`

	// (Boolean) Set to false to enable uploading. Only applies when version == "v1".
	// Set to false to enable uploading. Only applies when `version == "v1"`.
	Du *bool `json:"du,omitempty" tf:"du,omitempty"`

	// (String) Configure whether keyboard usage is enabled or not. When absent, keyboard usage is enabled. Only applies when version == "v2".
	// Configure whether keyboard usage is enabled or not. When absent, keyboard usage is enabled. Only applies when `version == "v2"`.
	Keyboard *string `json:"keyboard,omitempty" tf:"keyboard,omitempty"`

	// (String) Configure whether pasting is enabled or not. When set with "remote_only", pasting content from the user's local clipboard into isolated pages is disabled. When absent, paste is enabled. Only applies when version == "v2".
	// Configure whether pasting is enabled or not. When set with "remote_only", pasting content from the user's local clipboard into isolated pages is disabled. When absent, paste is enabled. Only applies when `version == "v2"`.
	Paste *string `json:"paste,omitempty" tf:"paste,omitempty"`

	// (String) Configure whether printing is enabled or not. When absent, printing is enabled. Only applies when version == "v2".
	// Configure whether printing is enabled or not. When absent, printing is enabled. Only applies when `version == "v2"`.
	Printing *string `json:"printing,omitempty" tf:"printing,omitempty"`

	// (String) Configure whether uploading is enabled or not. When absent, uploading is enabled. Only applies when version == "v2".
	// Configure whether uploading is enabled or not. When absent, uploading is enabled. Only applies when `version == "v2"`.
	Upload *string `json:"upload,omitempty" tf:"upload,omitempty"`

	// (Number) version number of the rule
	// Indicates which version of the browser isolation controls should apply.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type BisoAdminControlsObservation struct {

	// (String) Configure whether copy is enabled or not. When set with "remote_only", copying isolated content from the remote browser to the user's local clipboard is disabled. When absent, copy is enabled. Only applies when version == "v2".
	// Configure whether copy is enabled or not. When set with "remote_only", copying isolated content from the remote browser to the user's local clipboard is disabled. When absent, copy is enabled. Only applies when `version == "v2"`.
	Copy *string `json:"copy,omitempty" tf:"copy,omitempty"`

	// pasting. Only applies when version == "v1".
	// Set to false to enable copy-pasting. Only applies when `version == "v1"`.
	Dcp *bool `json:"dcp,omitempty" tf:"dcp,omitempty"`

	// (Boolean) Set to false to enable downloading. Only applies when version == "v1".
	// Set to false to enable downloading. Only applies when `version == "v1"`.
	Dd *bool `json:"dd,omitempty" tf:"dd,omitempty"`

	// (Boolean) Set to false to enable keyboard usage. Only applies when version == "v1".
	// Set to false to enable keyboard usage. Only applies when `version == "v1"`.
	Dk *bool `json:"dk,omitempty" tf:"dk,omitempty"`

	// (String) Configure whether downloading enabled or not. When absent, downloading is enabled. Only applies when version == "v2".
	// Configure whether downloading enabled or not. When absent, downloading is enabled. Only applies when `version == "v2"`.
	Download *string `json:"download,omitempty" tf:"download,omitempty"`

	// (Boolean) Set to false to enable printing. Only applies when version == "v1".
	// Set to false to enable printing. Only applies when `version == "v1"`.
	Dp *bool `json:"dp,omitempty" tf:"dp,omitempty"`

	// (Boolean) Set to false to enable uploading. Only applies when version == "v1".
	// Set to false to enable uploading. Only applies when `version == "v1"`.
	Du *bool `json:"du,omitempty" tf:"du,omitempty"`

	// (String) Configure whether keyboard usage is enabled or not. When absent, keyboard usage is enabled. Only applies when version == "v2".
	// Configure whether keyboard usage is enabled or not. When absent, keyboard usage is enabled. Only applies when `version == "v2"`.
	Keyboard *string `json:"keyboard,omitempty" tf:"keyboard,omitempty"`

	// (String) Configure whether pasting is enabled or not. When set with "remote_only", pasting content from the user's local clipboard into isolated pages is disabled. When absent, paste is enabled. Only applies when version == "v2".
	// Configure whether pasting is enabled or not. When set with "remote_only", pasting content from the user's local clipboard into isolated pages is disabled. When absent, paste is enabled. Only applies when `version == "v2"`.
	Paste *string `json:"paste,omitempty" tf:"paste,omitempty"`

	// (String) Configure whether printing is enabled or not. When absent, printing is enabled. Only applies when version == "v2".
	// Configure whether printing is enabled or not. When absent, printing is enabled. Only applies when `version == "v2"`.
	Printing *string `json:"printing,omitempty" tf:"printing,omitempty"`

	// (String) Configure whether uploading is enabled or not. When absent, uploading is enabled. Only applies when version == "v2".
	// Configure whether uploading is enabled or not. When absent, uploading is enabled. Only applies when `version == "v2"`.
	Upload *string `json:"upload,omitempty" tf:"upload,omitempty"`

	// (Number) version number of the rule
	// Indicates which version of the browser isolation controls should apply.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type BisoAdminControlsParameters struct {

	// (String) Configure whether copy is enabled or not. When set with "remote_only", copying isolated content from the remote browser to the user's local clipboard is disabled. When absent, copy is enabled. Only applies when version == "v2".
	// Configure whether copy is enabled or not. When set with "remote_only", copying isolated content from the remote browser to the user's local clipboard is disabled. When absent, copy is enabled. Only applies when `version == "v2"`.
	// +kubebuilder:validation:Optional
	Copy *string `json:"copy,omitempty" tf:"copy,omitempty"`

	// pasting. Only applies when version == "v1".
	// Set to false to enable copy-pasting. Only applies when `version == "v1"`.
	// +kubebuilder:validation:Optional
	Dcp *bool `json:"dcp,omitempty" tf:"dcp,omitempty"`

	// (Boolean) Set to false to enable downloading. Only applies when version == "v1".
	// Set to false to enable downloading. Only applies when `version == "v1"`.
	// +kubebuilder:validation:Optional
	Dd *bool `json:"dd,omitempty" tf:"dd,omitempty"`

	// (Boolean) Set to false to enable keyboard usage. Only applies when version == "v1".
	// Set to false to enable keyboard usage. Only applies when `version == "v1"`.
	// +kubebuilder:validation:Optional
	Dk *bool `json:"dk,omitempty" tf:"dk,omitempty"`

	// (String) Configure whether downloading enabled or not. When absent, downloading is enabled. Only applies when version == "v2".
	// Configure whether downloading enabled or not. When absent, downloading is enabled. Only applies when `version == "v2"`.
	// +kubebuilder:validation:Optional
	Download *string `json:"download,omitempty" tf:"download,omitempty"`

	// (Boolean) Set to false to enable printing. Only applies when version == "v1".
	// Set to false to enable printing. Only applies when `version == "v1"`.
	// +kubebuilder:validation:Optional
	Dp *bool `json:"dp,omitempty" tf:"dp,omitempty"`

	// (Boolean) Set to false to enable uploading. Only applies when version == "v1".
	// Set to false to enable uploading. Only applies when `version == "v1"`.
	// +kubebuilder:validation:Optional
	Du *bool `json:"du,omitempty" tf:"du,omitempty"`

	// (String) Configure whether keyboard usage is enabled or not. When absent, keyboard usage is enabled. Only applies when version == "v2".
	// Configure whether keyboard usage is enabled or not. When absent, keyboard usage is enabled. Only applies when `version == "v2"`.
	// +kubebuilder:validation:Optional
	Keyboard *string `json:"keyboard,omitempty" tf:"keyboard,omitempty"`

	// (String) Configure whether pasting is enabled or not. When set with "remote_only", pasting content from the user's local clipboard into isolated pages is disabled. When absent, paste is enabled. Only applies when version == "v2".
	// Configure whether pasting is enabled or not. When set with "remote_only", pasting content from the user's local clipboard into isolated pages is disabled. When absent, paste is enabled. Only applies when `version == "v2"`.
	// +kubebuilder:validation:Optional
	Paste *string `json:"paste,omitempty" tf:"paste,omitempty"`

	// (String) Configure whether printing is enabled or not. When absent, printing is enabled. Only applies when version == "v2".
	// Configure whether printing is enabled or not. When absent, printing is enabled. Only applies when `version == "v2"`.
	// +kubebuilder:validation:Optional
	Printing *string `json:"printing,omitempty" tf:"printing,omitempty"`

	// (String) Configure whether uploading is enabled or not. When absent, uploading is enabled. Only applies when version == "v2".
	// Configure whether uploading is enabled or not. When absent, uploading is enabled. Only applies when `version == "v2"`.
	// +kubebuilder:validation:Optional
	Upload *string `json:"upload,omitempty" tf:"upload,omitempty"`

	// (Number) version number of the rule
	// Indicates which version of the browser isolation controls should apply.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type CheckSessionInitParameters struct {

	// (Number) The default duration a policy will be active in minutes. Must be set in order to use the reset_expiration endpoint on this rule.
	// Configure how fresh the session needs to be to be considered valid.
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// (Boolean) Set to true to enable session enforcement.
	// Set to true to enable session enforcement.
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`
}

type CheckSessionObservation struct {

	// (Number) The default duration a policy will be active in minutes. Must be set in order to use the reset_expiration endpoint on this rule.
	// Configure how fresh the session needs to be to be considered valid.
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// (Boolean) Set to true to enable session enforcement.
	// Set to true to enable session enforcement.
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`
}

type CheckSessionParameters struct {

	// (Number) The default duration a policy will be active in minutes. Must be set in order to use the reset_expiration endpoint on this rule.
	// Configure how fresh the session needs to be to be considered valid.
	// +kubebuilder:validation:Optional
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// (Boolean) Set to true to enable session enforcement.
	// Set to true to enable session enforcement.
	// +kubebuilder:validation:Optional
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`
}

type DNSResolversIPv4InitParameters struct {

	// (String) IPv4 address of upstream resolver.
	// IPv4 address of upstream resolver.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Number) A port number to use for upstream resolver. Defaults to 53 if unspecified.
	// A port number to use for upstream resolver. Defaults to 53 if unspecified.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	// Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	RouteThroughPrivateNetwork *bool `json:"routeThroughPrivateNetwork,omitempty" tf:"route_through_private_network,omitempty"`

	// (String) Optionally specify a virtual network for this resolver. Uses default virtual network id if omitted.
	// Optionally specify a virtual network for this resolver. Uses default virtual network id if omitted.
	VnetID *string `json:"vnetId,omitempty" tf:"vnet_id,omitempty"`
}

type DNSResolversIPv4Observation struct {

	// (String) IPv4 address of upstream resolver.
	// IPv4 address of upstream resolver.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Number) A port number to use for upstream resolver. Defaults to 53 if unspecified.
	// A port number to use for upstream resolver. Defaults to 53 if unspecified.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	// Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	RouteThroughPrivateNetwork *bool `json:"routeThroughPrivateNetwork,omitempty" tf:"route_through_private_network,omitempty"`

	// (String) Optionally specify a virtual network for this resolver. Uses default virtual network id if omitted.
	// Optionally specify a virtual network for this resolver. Uses default virtual network id if omitted.
	VnetID *string `json:"vnetId,omitempty" tf:"vnet_id,omitempty"`
}

type DNSResolversIPv4Parameters struct {

	// (String) IPv4 address of upstream resolver.
	// IPv4 address of upstream resolver.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip" tf:"ip,omitempty"`

	// (Number) A port number to use for upstream resolver. Defaults to 53 if unspecified.
	// A port number to use for upstream resolver. Defaults to 53 if unspecified.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	// Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	// +kubebuilder:validation:Optional
	RouteThroughPrivateNetwork *bool `json:"routeThroughPrivateNetwork,omitempty" tf:"route_through_private_network,omitempty"`

	// (String) Optionally specify a virtual network for this resolver. Uses default virtual network id if omitted.
	// Optionally specify a virtual network for this resolver. Uses default virtual network id if omitted.
	// +kubebuilder:validation:Optional
	VnetID *string `json:"vnetId,omitempty" tf:"vnet_id,omitempty"`
}

type DNSResolversIPv6InitParameters struct {

	// (String) IPv4 address of upstream resolver.
	// IPv6 address of upstream resolver.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Number) A port number to use for upstream resolver. Defaults to 53 if unspecified.
	// A port number to use for upstream resolver. Defaults to 53 if unspecified.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	// Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	RouteThroughPrivateNetwork *bool `json:"routeThroughPrivateNetwork,omitempty" tf:"route_through_private_network,omitempty"`

	// (String) Optionally specify a virtual network for this resolver. Uses default virtual network id if omitted.
	// Optionally specify a virtual network for this resolver. Uses default virtual network id if omitted.
	VnetID *string `json:"vnetId,omitempty" tf:"vnet_id,omitempty"`
}

type DNSResolversIPv6Observation struct {

	// (String) IPv4 address of upstream resolver.
	// IPv6 address of upstream resolver.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Number) A port number to use for upstream resolver. Defaults to 53 if unspecified.
	// A port number to use for upstream resolver. Defaults to 53 if unspecified.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	// Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	RouteThroughPrivateNetwork *bool `json:"routeThroughPrivateNetwork,omitempty" tf:"route_through_private_network,omitempty"`

	// (String) Optionally specify a virtual network for this resolver. Uses default virtual network id if omitted.
	// Optionally specify a virtual network for this resolver. Uses default virtual network id if omitted.
	VnetID *string `json:"vnetId,omitempty" tf:"vnet_id,omitempty"`
}

type DNSResolversIPv6Parameters struct {

	// (String) IPv4 address of upstream resolver.
	// IPv6 address of upstream resolver.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip" tf:"ip,omitempty"`

	// (Number) A port number to use for upstream resolver. Defaults to 53 if unspecified.
	// A port number to use for upstream resolver. Defaults to 53 if unspecified.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	// Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	// +kubebuilder:validation:Optional
	RouteThroughPrivateNetwork *bool `json:"routeThroughPrivateNetwork,omitempty" tf:"route_through_private_network,omitempty"`

	// (String) Optionally specify a virtual network for this resolver. Uses default virtual network id if omitted.
	// Optionally specify a virtual network for this resolver. Uses default virtual network id if omitted.
	// +kubebuilder:validation:Optional
	VnetID *string `json:"vnetId,omitempty" tf:"vnet_id,omitempty"`
}

type DNSResolversInitParameters struct {

	// (Attributes List) (see below for nested schema)
	IPv4 []DNSResolversIPv4InitParameters `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// (Attributes List) (see below for nested schema)
	IPv6 []DNSResolversIPv6InitParameters `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type DNSResolversObservation struct {

	// (Attributes List) (see below for nested schema)
	IPv4 []DNSResolversIPv4Observation `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// (Attributes List) (see below for nested schema)
	IPv6 []DNSResolversIPv6Observation `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type DNSResolversParameters struct {

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	IPv4 []DNSResolversIPv4Parameters `json:"ipv4" tf:"ipv4,omitempty"`

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	IPv6 []DNSResolversIPv6Parameters `json:"ipv6" tf:"ipv6,omitempty"`
}

type EgressInitParameters struct {

	// (Attributes List) (see below for nested schema)
	// The IPv4 address to be used for egress.
	IPv4 *string `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// (String) The fallback IPv4 address to be used for egress in the event of an error egressing with the primary IPv4. Can be '0.0.0.0' to indicate local egress via WARP IPs.
	// The fallback IPv4 address to be used for egress in the event of an error egressing with the primary IPv4. Can be '0.0.0.0' to indicate local egress via WARP IPs.
	IPv4Fallback *string `json:"ipv4Fallback,omitempty" tf:"ipv4_fallback,omitempty"`

	// (Attributes List) (see below for nested schema)
	// The IPv6 range to be used for egress.
	IPv6 *string `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type EgressObservation struct {

	// (Attributes List) (see below for nested schema)
	// The IPv4 address to be used for egress.
	IPv4 *string `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// (String) The fallback IPv4 address to be used for egress in the event of an error egressing with the primary IPv4. Can be '0.0.0.0' to indicate local egress via WARP IPs.
	// The fallback IPv4 address to be used for egress in the event of an error egressing with the primary IPv4. Can be '0.0.0.0' to indicate local egress via WARP IPs.
	IPv4Fallback *string `json:"ipv4Fallback,omitempty" tf:"ipv4_fallback,omitempty"`

	// (Attributes List) (see below for nested schema)
	// The IPv6 range to be used for egress.
	IPv6 *string `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type EgressParameters struct {

	// (Attributes List) (see below for nested schema)
	// The IPv4 address to be used for egress.
	// +kubebuilder:validation:Optional
	IPv4 *string `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// (String) The fallback IPv4 address to be used for egress in the event of an error egressing with the primary IPv4. Can be '0.0.0.0' to indicate local egress via WARP IPs.
	// The fallback IPv4 address to be used for egress in the event of an error egressing with the primary IPv4. Can be '0.0.0.0' to indicate local egress via WARP IPs.
	// +kubebuilder:validation:Optional
	IPv4Fallback *string `json:"ipv4Fallback,omitempty" tf:"ipv4_fallback,omitempty"`

	// (Attributes List) (see below for nested schema)
	// The IPv6 range to be used for egress.
	// +kubebuilder:validation:Optional
	IPv6 *string `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type ExpirationInitParameters struct {

	// (Number) The default duration a policy will be active in minutes. Must be set in order to use the reset_expiration endpoint on this rule.
	// The default duration a policy will be active in minutes. Must be set in order to use the `reset_expiration` endpoint on this rule.
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// (Boolean) Whether the policy has expired.
	// Whether the policy has expired.
	Expired *bool `json:"expired,omitempty" tf:"expired,omitempty"`

	// (String) The time stamp at which the policy will expire and cease to be
	// applied.
	// The time stamp at which the policy will expire and cease to be
	// applied.
	//
	// Must adhere to RFC 3339 and include a UTC offset. Non-zero
	// offsets are accepted but will be converted to the equivalent
	// value with offset zero (UTC+00:00) and will be returned as time
	// stamps with offset zero denoted by a trailing 'Z'.
	//
	// Policies with an expiration do not consider the timezone of
	// clients they are applied to, and expire "globally" at the point
	// given by their `expires_at` value.
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`
}

type ExpirationObservation struct {

	// (Number) The default duration a policy will be active in minutes. Must be set in order to use the reset_expiration endpoint on this rule.
	// The default duration a policy will be active in minutes. Must be set in order to use the `reset_expiration` endpoint on this rule.
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// (Boolean) Whether the policy has expired.
	// Whether the policy has expired.
	Expired *bool `json:"expired,omitempty" tf:"expired,omitempty"`

	// (String) The time stamp at which the policy will expire and cease to be
	// applied.
	// The time stamp at which the policy will expire and cease to be
	// applied.
	//
	// Must adhere to RFC 3339 and include a UTC offset. Non-zero
	// offsets are accepted but will be converted to the equivalent
	// value with offset zero (UTC+00:00) and will be returned as time
	// stamps with offset zero denoted by a trailing 'Z'.
	//
	// Policies with an expiration do not consider the timezone of
	// clients they are applied to, and expire "globally" at the point
	// given by their `expires_at` value.
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`
}

type ExpirationParameters struct {

	// (Number) The default duration a policy will be active in minutes. Must be set in order to use the reset_expiration endpoint on this rule.
	// The default duration a policy will be active in minutes. Must be set in order to use the `reset_expiration` endpoint on this rule.
	// +kubebuilder:validation:Optional
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// (Boolean) Whether the policy has expired.
	// Whether the policy has expired.
	// +kubebuilder:validation:Optional
	Expired *bool `json:"expired,omitempty" tf:"expired,omitempty"`

	// (String) The time stamp at which the policy will expire and cease to be
	// applied.
	// The time stamp at which the policy will expire and cease to be
	// applied.
	//
	// Must adhere to RFC 3339 and include a UTC offset. Non-zero
	// offsets are accepted but will be converted to the equivalent
	// value with offset zero (UTC+00:00) and will be returned as time
	// stamps with offset zero denoted by a trailing 'Z'.
	//
	// Policies with an expiration do not consider the timezone of
	// clients they are applied to, and expire "globally" at the point
	// given by their `expires_at` value.
	// +kubebuilder:validation:Optional
	ExpiresAt *string `json:"expiresAt" tf:"expires_at,omitempty"`
}

type L4OverrideInitParameters struct {

	// (String) IPv4 address of upstream resolver.
	// IPv4 or IPv6 address.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Number) A port number to use for upstream resolver. Defaults to 53 if unspecified.
	// A port number to use for TCP/UDP overrides.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type L4OverrideObservation struct {

	// (String) IPv4 address of upstream resolver.
	// IPv4 or IPv6 address.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Number) A port number to use for upstream resolver. Defaults to 53 if unspecified.
	// A port number to use for TCP/UDP overrides.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type L4OverrideParameters struct {

	// (String) IPv4 address of upstream resolver.
	// IPv4 or IPv6 address.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Number) A port number to use for upstream resolver. Defaults to 53 if unspecified.
	// A port number to use for TCP/UDP overrides.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type NotificationSettingsInitParameters struct {

	// (Boolean) True if the rule is enabled.
	// Set notification on
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Customize the message shown in the notification.
	// Customize the message shown in the notification.
	Msg *string `json:"msg,omitempty" tf:"msg,omitempty"`

	// (String) Optional URL to direct users to additional information. If not set, the notification will open a block page.
	// Optional URL to direct users to additional information. If not set, the notification will open a block page.
	SupportURL *string `json:"supportUrl,omitempty" tf:"support_url,omitempty"`
}

type NotificationSettingsObservation struct {

	// (Boolean) True if the rule is enabled.
	// Set notification on
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Customize the message shown in the notification.
	// Customize the message shown in the notification.
	Msg *string `json:"msg,omitempty" tf:"msg,omitempty"`

	// (String) Optional URL to direct users to additional information. If not set, the notification will open a block page.
	// Optional URL to direct users to additional information. If not set, the notification will open a block page.
	SupportURL *string `json:"supportUrl,omitempty" tf:"support_url,omitempty"`
}

type NotificationSettingsParameters struct {

	// (Boolean) True if the rule is enabled.
	// Set notification on
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Customize the message shown in the notification.
	// Customize the message shown in the notification.
	// +kubebuilder:validation:Optional
	Msg *string `json:"msg,omitempty" tf:"msg,omitempty"`

	// (String) Optional URL to direct users to additional information. If not set, the notification will open a block page.
	// Optional URL to direct users to additional information. If not set, the notification will open a block page.
	// +kubebuilder:validation:Optional
	SupportURL *string `json:"supportUrl,omitempty" tf:"support_url,omitempty"`
}

type PayloadLogInitParameters struct {

	// (Boolean) True if the rule is enabled.
	// Set to true to enable DLP payload logging for this rule.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PayloadLogObservation struct {

	// (Boolean) True if the rule is enabled.
	// Set to true to enable DLP payload logging for this rule.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PayloadLogParameters struct {

	// (Boolean) True if the rule is enabled.
	// Set to true to enable DLP payload logging for this rule.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type QuarantineInitParameters struct {

	// (List of String) Types of files to sandbox.
	// Types of files to sandbox.
	FileTypes []*string `json:"fileTypes,omitempty" tf:"file_types,omitempty"`
}

type QuarantineObservation struct {

	// (List of String) Types of files to sandbox.
	// Types of files to sandbox.
	FileTypes []*string `json:"fileTypes,omitempty" tf:"file_types,omitempty"`
}

type QuarantineParameters struct {

	// (List of String) Types of files to sandbox.
	// Types of files to sandbox.
	// +kubebuilder:validation:Optional
	FileTypes []*string `json:"fileTypes,omitempty" tf:"file_types,omitempty"`
}

type ResolveDNSInternallyInitParameters struct {

	// (String) The fallback behavior to apply when the internal DNS response code is different from 'NOERROR' or when the response data only contains CNAME records for 'A' or 'AAAA' queries.
	// The fallback behavior to apply when the internal DNS response code is different from 'NOERROR' or when the response data only contains CNAME records for 'A' or 'AAAA' queries.
	Fallback *string `json:"fallback,omitempty" tf:"fallback,omitempty"`

	// (String) The internal DNS view identifier that's passed to the internal DNS service.
	// The internal DNS view identifier that's passed to the internal DNS service.
	ViewID *string `json:"viewId,omitempty" tf:"view_id,omitempty"`
}

type ResolveDNSInternallyObservation struct {

	// (String) The fallback behavior to apply when the internal DNS response code is different from 'NOERROR' or when the response data only contains CNAME records for 'A' or 'AAAA' queries.
	// The fallback behavior to apply when the internal DNS response code is different from 'NOERROR' or when the response data only contains CNAME records for 'A' or 'AAAA' queries.
	Fallback *string `json:"fallback,omitempty" tf:"fallback,omitempty"`

	// (String) The internal DNS view identifier that's passed to the internal DNS service.
	// The internal DNS view identifier that's passed to the internal DNS service.
	ViewID *string `json:"viewId,omitempty" tf:"view_id,omitempty"`
}

type ResolveDNSInternallyParameters struct {

	// (String) The fallback behavior to apply when the internal DNS response code is different from 'NOERROR' or when the response data only contains CNAME records for 'A' or 'AAAA' queries.
	// The fallback behavior to apply when the internal DNS response code is different from 'NOERROR' or when the response data only contains CNAME records for 'A' or 'AAAA' queries.
	// +kubebuilder:validation:Optional
	Fallback *string `json:"fallback,omitempty" tf:"fallback,omitempty"`

	// (String) The internal DNS view identifier that's passed to the internal DNS service.
	// The internal DNS view identifier that's passed to the internal DNS service.
	// +kubebuilder:validation:Optional
	ViewID *string `json:"viewId,omitempty" tf:"view_id,omitempty"`
}

type RuleSettingsInitParameters struct {

	// value pairs. Keys are header names, pointing to an array with its header value(s).
	// Add custom headers to allowed requests, in the form of key-value pairs. Keys are header names, pointing to an array with its header value(s).
	// +mapType=granular
	AddHeaders map[string]*string `json:"addHeaders,omitempty" tf:"add_headers,omitempty"`

	// (Boolean) Set by parent MSP accounts to enable their children to bypass this rule.
	// Set by parent MSP accounts to enable their children to bypass this rule.
	AllowChildBypass *bool `json:"allowChildBypass,omitempty" tf:"allow_child_bypass,omitempty"`

	// (Attributes) Settings for the Audit SSH action. (see below for nested schema)
	AuditSSH *AuditSSHInitParameters `json:"auditSsh,omitempty" tf:"audit_ssh,omitempty"`

	// (Attributes) Configure how browser isolation behaves. (see below for nested schema)
	BisoAdminControls *BisoAdminControlsInitParameters `json:"bisoAdminControls,omitempty" tf:"biso_admin_controls,omitempty"`

	// (Boolean) Enable the custom block page.
	// Enable the custom block page.
	BlockPageEnabled *bool `json:"blockPageEnabled,omitempty" tf:"block_page_enabled,omitempty"`

	// (String) The text describing why this block occurred, displayed on the custom block page (if enabled).
	// The text describing why this block occurred, displayed on the custom block page (if enabled).
	BlockReason *string `json:"blockReason,omitempty" tf:"block_reason,omitempty"`

	// (Boolean) Set by children MSP accounts to bypass their parent's rules.
	// Set by children MSP accounts to bypass their parent's rules.
	BypassParentRule *bool `json:"bypassParentRule,omitempty" tf:"bypass_parent_rule,omitempty"`

	// (Attributes) Configure how session check behaves. (see below for nested schema)
	CheckSession *CheckSessionInitParameters `json:"checkSession,omitempty" tf:"check_session,omitempty"`

	// (Attributes) Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when 'resolve_dns_through_cloudflare' or 'resolve_dns_internally' are set. DNS queries will route to the address closest to their origin. Only valid when a rule's action is set to 'resolve'. (see below for nested schema)
	DNSResolvers *DNSResolversInitParameters `json:"dnsResolvers,omitempty" tf:"dns_resolvers,omitempty"`

	// (Attributes) Configure how Gateway Proxy traffic egresses. You can enable this setting for rules with Egress actions and filters, or omit it to indicate local egress via WARP IPs. (see below for nested schema)
	Egress *EgressInitParameters `json:"egress,omitempty" tf:"egress,omitempty"`

	// (Boolean) Set to true to enable IPs in DNS resolver category blocks. By default categories only block based on domain names.
	// Set to true to enable IPs in DNS resolver category blocks. By default categories only block based on domain names.
	IPCategories *bool `json:"ipCategories,omitempty" tf:"ip_categories,omitempty"`

	// (Boolean) Set to true to include IPs in DNS resolver indicator feed blocks. By default indicator feeds only block based on domain names.
	// Set to true to include IPs in DNS resolver indicator feed blocks. By default indicator feeds only block based on domain names.
	IPIndicatorFeeds *bool `json:"ipIndicatorFeeds,omitempty" tf:"ip_indicator_feeds,omitempty"`

	// (Boolean) Set to true, to ignore the category matches at CNAME domains in a response. If unchecked, the categories in this rule will be checked against all the CNAME domain categories in a response.
	// Set to true, to ignore the category matches at CNAME domains in a response. If unchecked, the categories in this rule will be checked against all the CNAME domain categories in a response.
	IgnoreCnameCategoryMatches *bool `json:"ignoreCnameCategoryMatches,omitempty" tf:"ignore_cname_category_matches,omitempty"`

	// disable DNSSEC validation (for Allow actions).
	// INSECURE - disable DNSSEC validation (for Allow actions).
	InsecureDisableDNSSECValidation *bool `json:"insecureDisableDnssecValidation,omitempty" tf:"insecure_disable_dnssec_validation,omitempty"`

	// (Attributes) Send matching traffic to the supplied destination IP address and port. (see below for nested schema)
	L4Override *L4OverrideInitParameters `json:"l4override,omitempty" tf:"l4override,omitempty"`

	// (Attributes) Configure a notification to display on the user's device when this rule is matched. (see below for nested schema)
	NotificationSettings *NotificationSettingsInitParameters `json:"notificationSettings,omitempty" tf:"notification_settings,omitempty"`

	// (String) Override matching DNS queries with a hostname.
	// Override matching DNS queries with a hostname.
	OverrideHost *string `json:"overrideHost,omitempty" tf:"override_host,omitempty"`

	// (List of String) Override matching DNS queries with an IP or set of IPs.
	// Override matching DNS queries with an IP or set of IPs.
	OverrideIps []*string `json:"overrideIps,omitempty" tf:"override_ips,omitempty"`

	// (Attributes) Configure DLP payload logging. (see below for nested schema)
	PayloadLog *PayloadLogInitParameters `json:"payloadLog,omitempty" tf:"payload_log,omitempty"`

	// (Attributes) Settings that apply to quarantine rules (see below for nested schema)
	Quarantine *QuarantineInitParameters `json:"quarantine,omitempty" tf:"quarantine,omitempty"`

	// (Attributes) Configure to forward the query to the internal DNS service, passing the specified 'view_id' as input. Cannot be set when 'dns_resolvers' are specified or 'resolve_dns_through_cloudflare' is set. Only valid when a rule's action is set to 'resolve'. (see below for nested schema)
	ResolveDNSInternally *ResolveDNSInternallyInitParameters `json:"resolveDnsInternally,omitempty" tf:"resolve_dns_internally,omitempty"`

	// (Boolean) Enable to send queries that match the policy to Cloudflare's default 1.1.1.1 DNS resolver. Cannot be set when 'dns_resolvers' are specified or 'resolve_dns_internally' is set. Only valid when a rule's action is set to 'resolve'.
	// Enable to send queries that match the policy to Cloudflare's default 1.1.1.1 DNS resolver. Cannot be set when 'dns_resolvers' are specified or 'resolve_dns_internally' is set. Only valid when a rule's action is set to 'resolve'.
	ResolveDNSThroughCloudflare *bool `json:"resolveDnsThroughCloudflare,omitempty" tf:"resolve_dns_through_cloudflare,omitempty"`

	// (Attributes) Configure behavior when an upstream cert is invalid or an SSL error occurs. (see below for nested schema)
	UntrustedCert *UntrustedCertInitParameters `json:"untrustedCert,omitempty" tf:"untrusted_cert,omitempty"`
}

type RuleSettingsObservation struct {

	// value pairs. Keys are header names, pointing to an array with its header value(s).
	// Add custom headers to allowed requests, in the form of key-value pairs. Keys are header names, pointing to an array with its header value(s).
	// +mapType=granular
	AddHeaders map[string]*string `json:"addHeaders,omitempty" tf:"add_headers,omitempty"`

	// (Boolean) Set by parent MSP accounts to enable their children to bypass this rule.
	// Set by parent MSP accounts to enable their children to bypass this rule.
	AllowChildBypass *bool `json:"allowChildBypass,omitempty" tf:"allow_child_bypass,omitempty"`

	// (Attributes) Settings for the Audit SSH action. (see below for nested schema)
	AuditSSH *AuditSSHObservation `json:"auditSsh,omitempty" tf:"audit_ssh,omitempty"`

	// (Attributes) Configure how browser isolation behaves. (see below for nested schema)
	BisoAdminControls *BisoAdminControlsObservation `json:"bisoAdminControls,omitempty" tf:"biso_admin_controls,omitempty"`

	// (Boolean) Enable the custom block page.
	// Enable the custom block page.
	BlockPageEnabled *bool `json:"blockPageEnabled,omitempty" tf:"block_page_enabled,omitempty"`

	// (String) The text describing why this block occurred, displayed on the custom block page (if enabled).
	// The text describing why this block occurred, displayed on the custom block page (if enabled).
	BlockReason *string `json:"blockReason,omitempty" tf:"block_reason,omitempty"`

	// (Boolean) Set by children MSP accounts to bypass their parent's rules.
	// Set by children MSP accounts to bypass their parent's rules.
	BypassParentRule *bool `json:"bypassParentRule,omitempty" tf:"bypass_parent_rule,omitempty"`

	// (Attributes) Configure how session check behaves. (see below for nested schema)
	CheckSession *CheckSessionObservation `json:"checkSession,omitempty" tf:"check_session,omitempty"`

	// (Attributes) Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when 'resolve_dns_through_cloudflare' or 'resolve_dns_internally' are set. DNS queries will route to the address closest to their origin. Only valid when a rule's action is set to 'resolve'. (see below for nested schema)
	DNSResolvers *DNSResolversObservation `json:"dnsResolvers,omitempty" tf:"dns_resolvers,omitempty"`

	// (Attributes) Configure how Gateway Proxy traffic egresses. You can enable this setting for rules with Egress actions and filters, or omit it to indicate local egress via WARP IPs. (see below for nested schema)
	Egress *EgressObservation `json:"egress,omitempty" tf:"egress,omitempty"`

	// (Boolean) Set to true to enable IPs in DNS resolver category blocks. By default categories only block based on domain names.
	// Set to true to enable IPs in DNS resolver category blocks. By default categories only block based on domain names.
	IPCategories *bool `json:"ipCategories,omitempty" tf:"ip_categories,omitempty"`

	// (Boolean) Set to true to include IPs in DNS resolver indicator feed blocks. By default indicator feeds only block based on domain names.
	// Set to true to include IPs in DNS resolver indicator feed blocks. By default indicator feeds only block based on domain names.
	IPIndicatorFeeds *bool `json:"ipIndicatorFeeds,omitempty" tf:"ip_indicator_feeds,omitempty"`

	// (Boolean) Set to true, to ignore the category matches at CNAME domains in a response. If unchecked, the categories in this rule will be checked against all the CNAME domain categories in a response.
	// Set to true, to ignore the category matches at CNAME domains in a response. If unchecked, the categories in this rule will be checked against all the CNAME domain categories in a response.
	IgnoreCnameCategoryMatches *bool `json:"ignoreCnameCategoryMatches,omitempty" tf:"ignore_cname_category_matches,omitempty"`

	// disable DNSSEC validation (for Allow actions).
	// INSECURE - disable DNSSEC validation (for Allow actions).
	InsecureDisableDNSSECValidation *bool `json:"insecureDisableDnssecValidation,omitempty" tf:"insecure_disable_dnssec_validation,omitempty"`

	// (Attributes) Send matching traffic to the supplied destination IP address and port. (see below for nested schema)
	L4Override *L4OverrideObservation `json:"l4override,omitempty" tf:"l4override,omitempty"`

	// (Attributes) Configure a notification to display on the user's device when this rule is matched. (see below for nested schema)
	NotificationSettings *NotificationSettingsObservation `json:"notificationSettings,omitempty" tf:"notification_settings,omitempty"`

	// (String) Override matching DNS queries with a hostname.
	// Override matching DNS queries with a hostname.
	OverrideHost *string `json:"overrideHost,omitempty" tf:"override_host,omitempty"`

	// (List of String) Override matching DNS queries with an IP or set of IPs.
	// Override matching DNS queries with an IP or set of IPs.
	OverrideIps []*string `json:"overrideIps,omitempty" tf:"override_ips,omitempty"`

	// (Attributes) Configure DLP payload logging. (see below for nested schema)
	PayloadLog *PayloadLogObservation `json:"payloadLog,omitempty" tf:"payload_log,omitempty"`

	// (Attributes) Settings that apply to quarantine rules (see below for nested schema)
	Quarantine *QuarantineObservation `json:"quarantine,omitempty" tf:"quarantine,omitempty"`

	// (Attributes) Configure to forward the query to the internal DNS service, passing the specified 'view_id' as input. Cannot be set when 'dns_resolvers' are specified or 'resolve_dns_through_cloudflare' is set. Only valid when a rule's action is set to 'resolve'. (see below for nested schema)
	ResolveDNSInternally *ResolveDNSInternallyObservation `json:"resolveDnsInternally,omitempty" tf:"resolve_dns_internally,omitempty"`

	// (Boolean) Enable to send queries that match the policy to Cloudflare's default 1.1.1.1 DNS resolver. Cannot be set when 'dns_resolvers' are specified or 'resolve_dns_internally' is set. Only valid when a rule's action is set to 'resolve'.
	// Enable to send queries that match the policy to Cloudflare's default 1.1.1.1 DNS resolver. Cannot be set when 'dns_resolvers' are specified or 'resolve_dns_internally' is set. Only valid when a rule's action is set to 'resolve'.
	ResolveDNSThroughCloudflare *bool `json:"resolveDnsThroughCloudflare,omitempty" tf:"resolve_dns_through_cloudflare,omitempty"`

	// (Attributes) Configure behavior when an upstream cert is invalid or an SSL error occurs. (see below for nested schema)
	UntrustedCert *UntrustedCertObservation `json:"untrustedCert,omitempty" tf:"untrusted_cert,omitempty"`
}

type RuleSettingsParameters struct {

	// value pairs. Keys are header names, pointing to an array with its header value(s).
	// Add custom headers to allowed requests, in the form of key-value pairs. Keys are header names, pointing to an array with its header value(s).
	// +kubebuilder:validation:Optional
	// +mapType=granular
	AddHeaders map[string]*string `json:"addHeaders,omitempty" tf:"add_headers,omitempty"`

	// (Boolean) Set by parent MSP accounts to enable their children to bypass this rule.
	// Set by parent MSP accounts to enable their children to bypass this rule.
	// +kubebuilder:validation:Optional
	AllowChildBypass *bool `json:"allowChildBypass,omitempty" tf:"allow_child_bypass,omitempty"`

	// (Attributes) Settings for the Audit SSH action. (see below for nested schema)
	// +kubebuilder:validation:Optional
	AuditSSH *AuditSSHParameters `json:"auditSsh,omitempty" tf:"audit_ssh,omitempty"`

	// (Attributes) Configure how browser isolation behaves. (see below for nested schema)
	// +kubebuilder:validation:Optional
	BisoAdminControls *BisoAdminControlsParameters `json:"bisoAdminControls,omitempty" tf:"biso_admin_controls,omitempty"`

	// (Boolean) Enable the custom block page.
	// Enable the custom block page.
	// +kubebuilder:validation:Optional
	BlockPageEnabled *bool `json:"blockPageEnabled,omitempty" tf:"block_page_enabled,omitempty"`

	// (String) The text describing why this block occurred, displayed on the custom block page (if enabled).
	// The text describing why this block occurred, displayed on the custom block page (if enabled).
	// +kubebuilder:validation:Optional
	BlockReason *string `json:"blockReason,omitempty" tf:"block_reason,omitempty"`

	// (Boolean) Set by children MSP accounts to bypass their parent's rules.
	// Set by children MSP accounts to bypass their parent's rules.
	// +kubebuilder:validation:Optional
	BypassParentRule *bool `json:"bypassParentRule,omitempty" tf:"bypass_parent_rule,omitempty"`

	// (Attributes) Configure how session check behaves. (see below for nested schema)
	// +kubebuilder:validation:Optional
	CheckSession *CheckSessionParameters `json:"checkSession,omitempty" tf:"check_session,omitempty"`

	// (Attributes) Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when 'resolve_dns_through_cloudflare' or 'resolve_dns_internally' are set. DNS queries will route to the address closest to their origin. Only valid when a rule's action is set to 'resolve'. (see below for nested schema)
	// +kubebuilder:validation:Optional
	DNSResolvers *DNSResolversParameters `json:"dnsResolvers,omitempty" tf:"dns_resolvers,omitempty"`

	// (Attributes) Configure how Gateway Proxy traffic egresses. You can enable this setting for rules with Egress actions and filters, or omit it to indicate local egress via WARP IPs. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Egress *EgressParameters `json:"egress,omitempty" tf:"egress,omitempty"`

	// (Boolean) Set to true to enable IPs in DNS resolver category blocks. By default categories only block based on domain names.
	// Set to true to enable IPs in DNS resolver category blocks. By default categories only block based on domain names.
	// +kubebuilder:validation:Optional
	IPCategories *bool `json:"ipCategories,omitempty" tf:"ip_categories,omitempty"`

	// (Boolean) Set to true to include IPs in DNS resolver indicator feed blocks. By default indicator feeds only block based on domain names.
	// Set to true to include IPs in DNS resolver indicator feed blocks. By default indicator feeds only block based on domain names.
	// +kubebuilder:validation:Optional
	IPIndicatorFeeds *bool `json:"ipIndicatorFeeds,omitempty" tf:"ip_indicator_feeds,omitempty"`

	// (Boolean) Set to true, to ignore the category matches at CNAME domains in a response. If unchecked, the categories in this rule will be checked against all the CNAME domain categories in a response.
	// Set to true, to ignore the category matches at CNAME domains in a response. If unchecked, the categories in this rule will be checked against all the CNAME domain categories in a response.
	// +kubebuilder:validation:Optional
	IgnoreCnameCategoryMatches *bool `json:"ignoreCnameCategoryMatches,omitempty" tf:"ignore_cname_category_matches,omitempty"`

	// disable DNSSEC validation (for Allow actions).
	// INSECURE - disable DNSSEC validation (for Allow actions).
	// +kubebuilder:validation:Optional
	InsecureDisableDNSSECValidation *bool `json:"insecureDisableDnssecValidation,omitempty" tf:"insecure_disable_dnssec_validation,omitempty"`

	// (Attributes) Send matching traffic to the supplied destination IP address and port. (see below for nested schema)
	// +kubebuilder:validation:Optional
	L4Override *L4OverrideParameters `json:"l4override,omitempty" tf:"l4override,omitempty"`

	// (Attributes) Configure a notification to display on the user's device when this rule is matched. (see below for nested schema)
	// +kubebuilder:validation:Optional
	NotificationSettings *NotificationSettingsParameters `json:"notificationSettings,omitempty" tf:"notification_settings,omitempty"`

	// (String) Override matching DNS queries with a hostname.
	// Override matching DNS queries with a hostname.
	// +kubebuilder:validation:Optional
	OverrideHost *string `json:"overrideHost,omitempty" tf:"override_host,omitempty"`

	// (List of String) Override matching DNS queries with an IP or set of IPs.
	// Override matching DNS queries with an IP or set of IPs.
	// +kubebuilder:validation:Optional
	OverrideIps []*string `json:"overrideIps,omitempty" tf:"override_ips,omitempty"`

	// (Attributes) Configure DLP payload logging. (see below for nested schema)
	// +kubebuilder:validation:Optional
	PayloadLog *PayloadLogParameters `json:"payloadLog,omitempty" tf:"payload_log,omitempty"`

	// (Attributes) Settings that apply to quarantine rules (see below for nested schema)
	// +kubebuilder:validation:Optional
	Quarantine *QuarantineParameters `json:"quarantine,omitempty" tf:"quarantine,omitempty"`

	// (Attributes) Configure to forward the query to the internal DNS service, passing the specified 'view_id' as input. Cannot be set when 'dns_resolvers' are specified or 'resolve_dns_through_cloudflare' is set. Only valid when a rule's action is set to 'resolve'. (see below for nested schema)
	// +kubebuilder:validation:Optional
	ResolveDNSInternally *ResolveDNSInternallyParameters `json:"resolveDnsInternally,omitempty" tf:"resolve_dns_internally,omitempty"`

	// (Boolean) Enable to send queries that match the policy to Cloudflare's default 1.1.1.1 DNS resolver. Cannot be set when 'dns_resolvers' are specified or 'resolve_dns_internally' is set. Only valid when a rule's action is set to 'resolve'.
	// Enable to send queries that match the policy to Cloudflare's default 1.1.1.1 DNS resolver. Cannot be set when 'dns_resolvers' are specified or 'resolve_dns_internally' is set. Only valid when a rule's action is set to 'resolve'.
	// +kubebuilder:validation:Optional
	ResolveDNSThroughCloudflare *bool `json:"resolveDnsThroughCloudflare,omitempty" tf:"resolve_dns_through_cloudflare,omitempty"`

	// (Attributes) Configure behavior when an upstream cert is invalid or an SSL error occurs. (see below for nested schema)
	// +kubebuilder:validation:Optional
	UntrustedCert *UntrustedCertParameters `json:"untrustedCert,omitempty" tf:"untrusted_cert,omitempty"`
}

type ScheduleInitParameters struct {

	// 24:00.  If this parameter is omitted, the rule will be deactivated on Fridays.
	// The time intervals when the rule will be active on Fridays, in increasing order from 00:00-24:00.  If this parameter is omitted, the rule will be deactivated on Fridays.
	Fri *string `json:"fri,omitempty" tf:"fri,omitempty"`

	// 24:00. If this parameter is omitted, the rule will be deactivated on Mondays.
	// The time intervals when the rule will be active on Mondays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Mondays.
	Mon *string `json:"mon,omitempty" tf:"mon,omitempty"`

	// 24:00.  If this parameter is omitted, the rule will be deactivated on Saturdays.
	// The time intervals when the rule will be active on Saturdays, in increasing order from 00:00-24:00.  If this parameter is omitted, the rule will be deactivated on Saturdays.
	Sat *string `json:"sat,omitempty" tf:"sat,omitempty"`

	// 24:00. If this parameter is omitted, the rule will be deactivated on Sundays.
	// The time intervals when the rule will be active on Sundays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Sundays.
	Sun *string `json:"sun,omitempty" tf:"sun,omitempty"`

	// 24:00. If this parameter is omitted, the rule will be deactivated on Thursdays.
	// The time intervals when the rule will be active on Thursdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Thursdays.
	Thu *string `json:"thu,omitempty" tf:"thu,omitempty"`

	// (String) The time zone the rule will be evaluated against. If a valid time zone city name is provided, Gateway will always use the current time at that time zone. If this parameter is omitted, then Gateway will use the time zone inferred from the user's source IP to evaluate the rule. If Gateway cannot determine the time zone from the IP, we will fall back to the time zone of the user's connected data center.
	// The time zone the rule will be evaluated against. If a [valid time zone city name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) is provided, Gateway will always use the current time at that time zone. If this parameter is omitted, then Gateway will use the time zone inferred from the user's source IP to evaluate the rule. If Gateway cannot determine the time zone from the IP, we will fall back to the time zone of the user's connected data center.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// 24:00. If this parameter is omitted, the rule will be deactivated on Tuesdays.
	// The time intervals when the rule will be active on Tuesdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Tuesdays.
	Tue *string `json:"tue,omitempty" tf:"tue,omitempty"`

	// 24:00. If this parameter is omitted, the rule will be deactivated on Wednesdays.
	// The time intervals when the rule will be active on Wednesdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Wednesdays.
	Wed *string `json:"wed,omitempty" tf:"wed,omitempty"`
}

type ScheduleObservation struct {

	// 24:00.  If this parameter is omitted, the rule will be deactivated on Fridays.
	// The time intervals when the rule will be active on Fridays, in increasing order from 00:00-24:00.  If this parameter is omitted, the rule will be deactivated on Fridays.
	Fri *string `json:"fri,omitempty" tf:"fri,omitempty"`

	// 24:00. If this parameter is omitted, the rule will be deactivated on Mondays.
	// The time intervals when the rule will be active on Mondays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Mondays.
	Mon *string `json:"mon,omitempty" tf:"mon,omitempty"`

	// 24:00.  If this parameter is omitted, the rule will be deactivated on Saturdays.
	// The time intervals when the rule will be active on Saturdays, in increasing order from 00:00-24:00.  If this parameter is omitted, the rule will be deactivated on Saturdays.
	Sat *string `json:"sat,omitempty" tf:"sat,omitempty"`

	// 24:00. If this parameter is omitted, the rule will be deactivated on Sundays.
	// The time intervals when the rule will be active on Sundays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Sundays.
	Sun *string `json:"sun,omitempty" tf:"sun,omitempty"`

	// 24:00. If this parameter is omitted, the rule will be deactivated on Thursdays.
	// The time intervals when the rule will be active on Thursdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Thursdays.
	Thu *string `json:"thu,omitempty" tf:"thu,omitempty"`

	// (String) The time zone the rule will be evaluated against. If a valid time zone city name is provided, Gateway will always use the current time at that time zone. If this parameter is omitted, then Gateway will use the time zone inferred from the user's source IP to evaluate the rule. If Gateway cannot determine the time zone from the IP, we will fall back to the time zone of the user's connected data center.
	// The time zone the rule will be evaluated against. If a [valid time zone city name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) is provided, Gateway will always use the current time at that time zone. If this parameter is omitted, then Gateway will use the time zone inferred from the user's source IP to evaluate the rule. If Gateway cannot determine the time zone from the IP, we will fall back to the time zone of the user's connected data center.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// 24:00. If this parameter is omitted, the rule will be deactivated on Tuesdays.
	// The time intervals when the rule will be active on Tuesdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Tuesdays.
	Tue *string `json:"tue,omitempty" tf:"tue,omitempty"`

	// 24:00. If this parameter is omitted, the rule will be deactivated on Wednesdays.
	// The time intervals when the rule will be active on Wednesdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Wednesdays.
	Wed *string `json:"wed,omitempty" tf:"wed,omitempty"`
}

type ScheduleParameters struct {

	// 24:00.  If this parameter is omitted, the rule will be deactivated on Fridays.
	// The time intervals when the rule will be active on Fridays, in increasing order from 00:00-24:00.  If this parameter is omitted, the rule will be deactivated on Fridays.
	// +kubebuilder:validation:Optional
	Fri *string `json:"fri,omitempty" tf:"fri,omitempty"`

	// 24:00. If this parameter is omitted, the rule will be deactivated on Mondays.
	// The time intervals when the rule will be active on Mondays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Mondays.
	// +kubebuilder:validation:Optional
	Mon *string `json:"mon,omitempty" tf:"mon,omitempty"`

	// 24:00.  If this parameter is omitted, the rule will be deactivated on Saturdays.
	// The time intervals when the rule will be active on Saturdays, in increasing order from 00:00-24:00.  If this parameter is omitted, the rule will be deactivated on Saturdays.
	// +kubebuilder:validation:Optional
	Sat *string `json:"sat,omitempty" tf:"sat,omitempty"`

	// 24:00. If this parameter is omitted, the rule will be deactivated on Sundays.
	// The time intervals when the rule will be active on Sundays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Sundays.
	// +kubebuilder:validation:Optional
	Sun *string `json:"sun,omitempty" tf:"sun,omitempty"`

	// 24:00. If this parameter is omitted, the rule will be deactivated on Thursdays.
	// The time intervals when the rule will be active on Thursdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Thursdays.
	// +kubebuilder:validation:Optional
	Thu *string `json:"thu,omitempty" tf:"thu,omitempty"`

	// (String) The time zone the rule will be evaluated against. If a valid time zone city name is provided, Gateway will always use the current time at that time zone. If this parameter is omitted, then Gateway will use the time zone inferred from the user's source IP to evaluate the rule. If Gateway cannot determine the time zone from the IP, we will fall back to the time zone of the user's connected data center.
	// The time zone the rule will be evaluated against. If a [valid time zone city name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) is provided, Gateway will always use the current time at that time zone. If this parameter is omitted, then Gateway will use the time zone inferred from the user's source IP to evaluate the rule. If Gateway cannot determine the time zone from the IP, we will fall back to the time zone of the user's connected data center.
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// 24:00. If this parameter is omitted, the rule will be deactivated on Tuesdays.
	// The time intervals when the rule will be active on Tuesdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Tuesdays.
	// +kubebuilder:validation:Optional
	Tue *string `json:"tue,omitempty" tf:"tue,omitempty"`

	// 24:00. If this parameter is omitted, the rule will be deactivated on Wednesdays.
	// The time intervals when the rule will be active on Wednesdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Wednesdays.
	// +kubebuilder:validation:Optional
	Wed *string `json:"wed,omitempty" tf:"wed,omitempty"`
}

type TrustGatewayPolicyInitParameters struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to true.
	// The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to `true`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) The description of the rule.
	// The description of the rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The wirefilter expression used for device posture check matching.
	// The wirefilter expression used for device posture check matching.
	DevicePosture *string `json:"devicePosture,omitempty" tf:"device_posture,omitempty"`

	// (Boolean) True if the rule is enabled.
	// True if the rule is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes) The expiration time stamp and default duration of a DNS policy. Takes
	// precedence over the policy's schedule configuration, if any.
	Expiration *ExpirationInitParameters `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// (List of String) The protocol or layer to evaluate the traffic, identity, and device posture expressions.
	// The protocol or layer to evaluate the traffic, identity, and device posture expressions.
	Filters []*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// (String) The wirefilter expression used for identity matching.
	// The wirefilter expression used for identity matching.
	Identity *string `json:"identity,omitempty" tf:"identity,omitempty"`

	// (Number) Precedence sets the order of your rules. Lower values indicate higher precedence. At each processing phase, applicable rules are evaluated in ascending order of this value.
	// Precedence sets the order of your rules. Lower values indicate higher precedence. At each processing phase, applicable rules are evaluated in ascending order of this value.
	Precedence *float64 `json:"precedence,omitempty" tf:"precedence,omitempty"`

	// (Attributes) Additional settings that modify the rule's action. (see below for nested schema)
	RuleSettings *RuleSettingsInitParameters `json:"ruleSettings,omitempty" tf:"rule_settings,omitempty"`

	// (Attributes) The schedule for activating DNS policies. This does not apply to HTTP or network policies. (see below for nested schema)
	Schedule *ScheduleInitParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// (String) The wirefilter expression used for traffic matching.
	// The wirefilter expression used for traffic matching.
	Traffic *string `json:"traffic,omitempty" tf:"traffic,omitempty"`
}

type TrustGatewayPolicyObservation struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to true.
	// The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to `true`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String)
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) Date of deletion, if any.
	// Date of deletion, if any.
	DeletedAt *string `json:"deletedAt,omitempty" tf:"deleted_at,omitempty"`

	// (String) The description of the rule.
	// The description of the rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The wirefilter expression used for device posture check matching.
	// The wirefilter expression used for device posture check matching.
	DevicePosture *string `json:"devicePosture,omitempty" tf:"device_posture,omitempty"`

	// (Boolean) True if the rule is enabled.
	// True if the rule is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes) The expiration time stamp and default duration of a DNS policy. Takes
	// precedence over the policy's schedule configuration, if any.
	Expiration *ExpirationObservation `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// (List of String) The protocol or layer to evaluate the traffic, identity, and device posture expressions.
	// The protocol or layer to evaluate the traffic, identity, and device posture expressions.
	Filters []*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// (String) The API resource UUID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The wirefilter expression used for identity matching.
	// The wirefilter expression used for identity matching.
	Identity *string `json:"identity,omitempty" tf:"identity,omitempty"`

	// (Number) Precedence sets the order of your rules. Lower values indicate higher precedence. At each processing phase, applicable rules are evaluated in ascending order of this value.
	// Precedence sets the order of your rules. Lower values indicate higher precedence. At each processing phase, applicable rules are evaluated in ascending order of this value.
	Precedence *float64 `json:"precedence,omitempty" tf:"precedence,omitempty"`

	// (Attributes) Additional settings that modify the rule's action. (see below for nested schema)
	RuleSettings *RuleSettingsObservation `json:"ruleSettings,omitempty" tf:"rule_settings,omitempty"`

	// (Attributes) The schedule for activating DNS policies. This does not apply to HTTP or network policies. (see below for nested schema)
	Schedule *ScheduleObservation `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// (String) The wirefilter expression used for traffic matching.
	// The wirefilter expression used for traffic matching.
	Traffic *string `json:"traffic,omitempty" tf:"traffic,omitempty"`

	// (String)
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// (Number) version number of the rule
	// version number of the rule
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type TrustGatewayPolicyParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to true.
	// The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to `true`.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) The description of the rule.
	// The description of the rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The wirefilter expression used for device posture check matching.
	// The wirefilter expression used for device posture check matching.
	// +kubebuilder:validation:Optional
	DevicePosture *string `json:"devicePosture,omitempty" tf:"device_posture,omitempty"`

	// (Boolean) True if the rule is enabled.
	// True if the rule is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes) The expiration time stamp and default duration of a DNS policy. Takes
	// precedence over the policy's schedule configuration, if any.
	// +kubebuilder:validation:Optional
	Expiration *ExpirationParameters `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// (List of String) The protocol or layer to evaluate the traffic, identity, and device posture expressions.
	// The protocol or layer to evaluate the traffic, identity, and device posture expressions.
	// +kubebuilder:validation:Optional
	Filters []*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// (String) The wirefilter expression used for identity matching.
	// The wirefilter expression used for identity matching.
	// +kubebuilder:validation:Optional
	Identity *string `json:"identity,omitempty" tf:"identity,omitempty"`

	// (Number) Precedence sets the order of your rules. Lower values indicate higher precedence. At each processing phase, applicable rules are evaluated in ascending order of this value.
	// Precedence sets the order of your rules. Lower values indicate higher precedence. At each processing phase, applicable rules are evaluated in ascending order of this value.
	// +kubebuilder:validation:Optional
	Precedence *float64 `json:"precedence,omitempty" tf:"precedence,omitempty"`

	// (Attributes) Additional settings that modify the rule's action. (see below for nested schema)
	// +kubebuilder:validation:Optional
	RuleSettings *RuleSettingsParameters `json:"ruleSettings,omitempty" tf:"rule_settings,omitempty"`

	// (Attributes) The schedule for activating DNS policies. This does not apply to HTTP or network policies. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Schedule *ScheduleParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// (String) The wirefilter expression used for traffic matching.
	// The wirefilter expression used for traffic matching.
	// +kubebuilder:validation:Optional
	Traffic *string `json:"traffic,omitempty" tf:"traffic,omitempty"`
}

type UntrustedCertInitParameters struct {

	// (String) The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to true.
	// The action performed when an untrusted certificate is seen. The default action is an error with HTTP code 526.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`
}

type UntrustedCertObservation struct {

	// (String) The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to true.
	// The action performed when an untrusted certificate is seen. The default action is an error with HTTP code 526.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`
}

type UntrustedCertParameters struct {

	// (String) The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to true.
	// The action performed when an untrusted certificate is seen. The default action is an error with HTTP code 526.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`
}

// TrustGatewayPolicySpec defines the desired state of TrustGatewayPolicy
type TrustGatewayPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrustGatewayPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrustGatewayPolicyInitParameters `json:"initProvider,omitempty"`
}

// TrustGatewayPolicyStatus defines the observed state of TrustGatewayPolicy.
type TrustGatewayPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrustGatewayPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrustGatewayPolicy is the Schema for the TrustGatewayPolicys API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type TrustGatewayPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.expiration) || (has(self.initProvider) && has(self.initProvider.expiration))",message="spec.forProvider.expiration is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ruleSettings) || (has(self.initProvider) && has(self.initProvider.ruleSettings))",message="spec.forProvider.ruleSettings is a required parameter"
	Spec   TrustGatewayPolicySpec   `json:"spec"`
	Status TrustGatewayPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrustGatewayPolicyList contains a list of TrustGatewayPolicys
type TrustGatewayPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrustGatewayPolicy `json:"items"`
}

// Repository type metadata.
var (
	TrustGatewayPolicy_Kind             = "TrustGatewayPolicy"
	TrustGatewayPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrustGatewayPolicy_Kind}.String()
	TrustGatewayPolicy_KindAPIVersion   = TrustGatewayPolicy_Kind + "." + CRDGroupVersion.String()
	TrustGatewayPolicy_GroupVersionKind = CRDGroupVersion.WithKind(TrustGatewayPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&TrustGatewayPolicy{}, &TrustGatewayPolicyList{})
}
