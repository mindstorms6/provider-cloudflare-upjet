// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ColumnsInitParameters struct {
}

type ColumnsObservation struct {

	// (String)
	EntryID *string `json:"entryId,omitempty" tf:"entry_id,omitempty"`

	// (String)
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// (Number)
	NumCells *float64 `json:"numCells,omitempty" tf:"num_cells,omitempty"`

	// (String)
	UploadStatus *string `json:"uploadStatus,omitempty" tf:"upload_status,omitempty"`
}

type ColumnsParameters struct {
}

type DatasetColumnsInitParameters struct {
}

type DatasetColumnsObservation struct {

	// (String)
	EntryID *string `json:"entryId,omitempty" tf:"entry_id,omitempty"`

	// (String)
	HeaderName *string `json:"headerName,omitempty" tf:"header_name,omitempty"`

	// (Number)
	NumCells *float64 `json:"numCells,omitempty" tf:"num_cells,omitempty"`

	// (String)
	UploadStatus *string `json:"uploadStatus,omitempty" tf:"upload_status,omitempty"`
}

type DatasetColumnsParameters struct {
}

type DatasetInitParameters struct {

	// (Attributes List) (see below for nested schema)
	Columns []DatasetColumnsInitParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// (Attributes List) (see below for nested schema)
	Uploads []UploadsInitParameters `json:"uploads,omitempty" tf:"uploads,omitempty"`
}

type DatasetObservation struct {

	// (Attributes List) (see below for nested schema)
	Columns []DatasetColumnsObservation `json:"columns,omitempty" tf:"columns,omitempty"`

	// (String)
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) The description of the dataset
	// The description of the dataset
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Number) Dataset encoding version
	EncodingVersion *float64 `json:"encodingVersion,omitempty" tf:"encoding_version,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number)
	NumCells *float64 `json:"numCells,omitempty" tf:"num_cells,omitempty"`

	// (Boolean) Generate a secret dataset.
	Secret *bool `json:"secret,omitempty" tf:"secret,omitempty"`

	// (String)
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) When the dataset was last updated.
	// When the dataset was last updated.
	//
	// This includes name or description changes as well as uploads.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// (Attributes List) (see below for nested schema)
	Uploads []UploadsObservation `json:"uploads,omitempty" tf:"uploads,omitempty"`
}

type DatasetParameters struct {

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Columns []DatasetColumnsParameters `json:"columns" tf:"columns,omitempty"`

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Uploads []UploadsParameters `json:"uploads" tf:"uploads,omitempty"`
}

type TrustDlpDatasetInitParameters struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes List) (see below for nested schema)
	Columns []ColumnsInitParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// (Attributes) (see below for nested schema)
	Dataset *DatasetInitParameters `json:"dataset,omitempty" tf:"dataset,omitempty"`

	// (String)
	DatasetID *string `json:"datasetId,omitempty" tf:"dataset_id,omitempty"`

	// (String) The description of the dataset
	// The description of the dataset
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Number) Dataset encoding version
	// Dataset encoding version
	//
	// Non-secret custom word lists with no header are always version 1.
	// Secret EDM lists with no header are version 1.
	// Multicolumn CSV with headers are version 2.
	// Omitting this field provides the default value 0, which is interpreted
	// the same as 1.
	EncodingVersion *float64 `json:"encodingVersion,omitempty" tf:"encoding_version,omitempty"`

	// (Boolean) Generate a secret dataset.
	// Generate a secret dataset.
	//
	// If true, the response will include a secret to use with the EDM encoder.
	// If false, the response has no secret and the dataset is uploaded in plaintext.
	Secret *bool `json:"secret,omitempty" tf:"secret,omitempty"`

	// (Attributes List) (see below for nested schema)
	Uploads []TrustDlpDatasetUploadsInitParameters `json:"uploads,omitempty" tf:"uploads,omitempty"`
}

type TrustDlpDatasetObservation struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes List) (see below for nested schema)
	Columns []ColumnsObservation `json:"columns,omitempty" tf:"columns,omitempty"`

	// (String)
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (Attributes) (see below for nested schema)
	Dataset *DatasetObservation `json:"dataset,omitempty" tf:"dataset,omitempty"`

	// (String)
	DatasetID *string `json:"datasetId,omitempty" tf:"dataset_id,omitempty"`

	// (String) The description of the dataset
	// The description of the dataset
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Number) Dataset encoding version
	// Dataset encoding version
	//
	// Non-secret custom word lists with no header are always version 1.
	// Secret EDM lists with no header are version 1.
	// Multicolumn CSV with headers are version 2.
	// Omitting this field provides the default value 0, which is interpreted
	// the same as 1.
	EncodingVersion *float64 `json:"encodingVersion,omitempty" tf:"encoding_version,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number)
	MaxCells *float64 `json:"maxCells,omitempty" tf:"max_cells,omitempty"`

	// (Number)
	NumCells *float64 `json:"numCells,omitempty" tf:"num_cells,omitempty"`

	// (Boolean) Generate a secret dataset.
	// Generate a secret dataset.
	//
	// If true, the response will include a secret to use with the EDM encoder.
	// If false, the response has no secret and the dataset is uploaded in plaintext.
	Secret *bool `json:"secret,omitempty" tf:"secret,omitempty"`

	// (String)
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) When the dataset was last updated.
	// When the dataset was last updated.
	//
	// This includes name or description changes as well as uploads.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// (Attributes List) (see below for nested schema)
	Uploads []TrustDlpDatasetUploadsObservation `json:"uploads,omitempty" tf:"uploads,omitempty"`

	// (Number) The version to use when uploading the dataset.
	// The version to use when uploading the dataset.
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type TrustDlpDatasetParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Columns []ColumnsParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Dataset *DatasetParameters `json:"dataset,omitempty" tf:"dataset,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	DatasetID *string `json:"datasetId,omitempty" tf:"dataset_id,omitempty"`

	// (String) The description of the dataset
	// The description of the dataset
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Number) Dataset encoding version
	// Dataset encoding version
	//
	// Non-secret custom word lists with no header are always version 1.
	// Secret EDM lists with no header are version 1.
	// Multicolumn CSV with headers are version 2.
	// Omitting this field provides the default value 0, which is interpreted
	// the same as 1.
	// +kubebuilder:validation:Optional
	EncodingVersion *float64 `json:"encodingVersion,omitempty" tf:"encoding_version,omitempty"`

	// (Boolean) Generate a secret dataset.
	// Generate a secret dataset.
	//
	// If true, the response will include a secret to use with the EDM encoder.
	// If false, the response has no secret and the dataset is uploaded in plaintext.
	// +kubebuilder:validation:Optional
	Secret *bool `json:"secret,omitempty" tf:"secret,omitempty"`

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Uploads []TrustDlpDatasetUploadsParameters `json:"uploads,omitempty" tf:"uploads,omitempty"`
}

type TrustDlpDatasetUploadsInitParameters struct {
}

type TrustDlpDatasetUploadsObservation struct {

	// (Number)
	NumCells *float64 `json:"numCells,omitempty" tf:"num_cells,omitempty"`

	// (String)
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Number) The version to use when uploading the dataset.
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type TrustDlpDatasetUploadsParameters struct {
}

type UploadsInitParameters struct {
}

type UploadsObservation struct {

	// (Number)
	NumCells *float64 `json:"numCells,omitempty" tf:"num_cells,omitempty"`

	// (String)
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Number) The version to use when uploading the dataset.
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type UploadsParameters struct {
}

// TrustDlpDatasetSpec defines the desired state of TrustDlpDataset
type TrustDlpDatasetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrustDlpDatasetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrustDlpDatasetInitParameters `json:"initProvider,omitempty"`
}

// TrustDlpDatasetStatus defines the observed state of TrustDlpDataset.
type TrustDlpDatasetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrustDlpDatasetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrustDlpDataset is the Schema for the TrustDlpDatasets API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type TrustDlpDataset struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.columns) || (has(self.initProvider) && has(self.initProvider.columns))",message="spec.forProvider.columns is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.uploads) || (has(self.initProvider) && has(self.initProvider.uploads))",message="spec.forProvider.uploads is a required parameter"
	Spec   TrustDlpDatasetSpec   `json:"spec"`
	Status TrustDlpDatasetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrustDlpDatasetList contains a list of TrustDlpDatasets
type TrustDlpDatasetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrustDlpDataset `json:"items"`
}

// Repository type metadata.
var (
	TrustDlpDataset_Kind             = "TrustDlpDataset"
	TrustDlpDataset_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrustDlpDataset_Kind}.String()
	TrustDlpDataset_KindAPIVersion   = TrustDlpDataset_Kind + "." + CRDGroupVersion.String()
	TrustDlpDataset_GroupVersionKind = CRDGroupVersion.WithKind(TrustDlpDataset_Kind)
)

func init() {
	SchemeBuilder.Register(&TrustDlpDataset{}, &TrustDlpDatasetList{})
}
