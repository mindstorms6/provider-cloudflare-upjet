// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TrustDlpPredefinedProfileContextAwarenessInitParameters struct {

	// (Boolean)
	// If true, scan the context of predefined entries to only return matches surrounded by keywords.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes) Content types to exclude from context analysis and return all matches. (see below for nested schema)
	Skip *TrustDlpPredefinedProfileContextAwarenessSkipInitParameters `json:"skip,omitempty" tf:"skip,omitempty"`
}

type TrustDlpPredefinedProfileContextAwarenessObservation struct {

	// (Boolean)
	// If true, scan the context of predefined entries to only return matches surrounded by keywords.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes) Content types to exclude from context analysis and return all matches. (see below for nested schema)
	Skip *TrustDlpPredefinedProfileContextAwarenessSkipObservation `json:"skip,omitempty" tf:"skip,omitempty"`
}

type TrustDlpPredefinedProfileContextAwarenessParameters struct {

	// (Boolean)
	// If true, scan the context of predefined entries to only return matches surrounded by keywords.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// (Attributes) Content types to exclude from context analysis and return all matches. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Skip *TrustDlpPredefinedProfileContextAwarenessSkipParameters `json:"skip" tf:"skip,omitempty"`
}

type TrustDlpPredefinedProfileContextAwarenessSkipInitParameters struct {

	// (Boolean) If the content type is a file, skip context analysis and return all matches.
	// If the content type is a file, skip context analysis and return all matches.
	Files *bool `json:"files,omitempty" tf:"files,omitempty"`
}

type TrustDlpPredefinedProfileContextAwarenessSkipObservation struct {

	// (Boolean) If the content type is a file, skip context analysis and return all matches.
	// If the content type is a file, skip context analysis and return all matches.
	Files *bool `json:"files,omitempty" tf:"files,omitempty"`
}

type TrustDlpPredefinedProfileContextAwarenessSkipParameters struct {

	// (Boolean) If the content type is a file, skip context analysis and return all matches.
	// If the content type is a file, skip context analysis and return all matches.
	// +kubebuilder:validation:Optional
	Files *bool `json:"files" tf:"files,omitempty"`
}

type TrustDlpPredefinedProfileEntriesInitParameters struct {

	// (Boolean)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TrustDlpPredefinedProfileEntriesObservation struct {

	// (Boolean)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TrustDlpPredefinedProfileEntriesParameters struct {

	// (Boolean)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`
}

type TrustDlpPredefinedProfileInitParameters struct {

	// (Boolean)
	AIContextEnabled *bool `json:"aiContextEnabled,omitempty" tf:"ai_context_enabled,omitempty"`

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Number)
	AllowedMatchCount *float64 `json:"allowedMatchCount,omitempty" tf:"allowed_match_count,omitempty"`

	// (String)
	ConfidenceThreshold *string `json:"confidenceThreshold,omitempty" tf:"confidence_threshold,omitempty"`

	// (Attributes) Scan the context of predefined entries to only return matches surrounded by keywords. (see below for nested schema)
	ContextAwareness *TrustDlpPredefinedProfileContextAwarenessInitParameters `json:"contextAwareness,omitempty" tf:"context_awareness,omitempty"`

	// (Attributes List) (see below for nested schema)
	Entries []TrustDlpPredefinedProfileEntriesInitParameters `json:"entries,omitempty" tf:"entries,omitempty"`

	// (Boolean)
	OcrEnabled *bool `json:"ocrEnabled,omitempty" tf:"ocr_enabled,omitempty"`

	// (String)
	ProfileID *string `json:"profileId,omitempty" tf:"profile_id,omitempty"`
}

type TrustDlpPredefinedProfileObservation struct {

	// (Boolean)
	AIContextEnabled *bool `json:"aiContextEnabled,omitempty" tf:"ai_context_enabled,omitempty"`

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Number)
	AllowedMatchCount *float64 `json:"allowedMatchCount,omitempty" tf:"allowed_match_count,omitempty"`

	// (String)
	ConfidenceThreshold *string `json:"confidenceThreshold,omitempty" tf:"confidence_threshold,omitempty"`

	// (Attributes) Scan the context of predefined entries to only return matches surrounded by keywords. (see below for nested schema)
	ContextAwareness *TrustDlpPredefinedProfileContextAwarenessObservation `json:"contextAwareness,omitempty" tf:"context_awareness,omitempty"`

	// (String) When the profile was created
	// When the profile was created
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) The description of the profile
	// The description of the profile
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Attributes List) (see below for nested schema)
	Entries []TrustDlpPredefinedProfileEntriesObservation `json:"entries,omitempty" tf:"entries,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean)
	OcrEnabled *bool `json:"ocrEnabled,omitempty" tf:"ocr_enabled,omitempty"`

	// (Boolean) Whether this profile can be accessed by anyone
	// Whether this profile can be accessed by anyone
	OpenAccess *bool `json:"openAccess,omitempty" tf:"open_access,omitempty"`

	// (String)
	ProfileID *string `json:"profileId,omitempty" tf:"profile_id,omitempty"`

	// (String)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) When the profile was lasted updated
	// When the profile was lasted updated
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type TrustDlpPredefinedProfileParameters struct {

	// (Boolean)
	// +kubebuilder:validation:Optional
	AIContextEnabled *bool `json:"aiContextEnabled,omitempty" tf:"ai_context_enabled,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	AllowedMatchCount *float64 `json:"allowedMatchCount,omitempty" tf:"allowed_match_count,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	ConfidenceThreshold *string `json:"confidenceThreshold,omitempty" tf:"confidence_threshold,omitempty"`

	// (Attributes) Scan the context of predefined entries to only return matches surrounded by keywords. (see below for nested schema)
	// +kubebuilder:validation:Optional
	ContextAwareness *TrustDlpPredefinedProfileContextAwarenessParameters `json:"contextAwareness,omitempty" tf:"context_awareness,omitempty"`

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Entries []TrustDlpPredefinedProfileEntriesParameters `json:"entries,omitempty" tf:"entries,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	OcrEnabled *bool `json:"ocrEnabled,omitempty" tf:"ocr_enabled,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	ProfileID *string `json:"profileId,omitempty" tf:"profile_id,omitempty"`
}

// TrustDlpPredefinedProfileSpec defines the desired state of TrustDlpPredefinedProfile
type TrustDlpPredefinedProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrustDlpPredefinedProfileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrustDlpPredefinedProfileInitParameters `json:"initProvider,omitempty"`
}

// TrustDlpPredefinedProfileStatus defines the observed state of TrustDlpPredefinedProfile.
type TrustDlpPredefinedProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrustDlpPredefinedProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrustDlpPredefinedProfile is the Schema for the TrustDlpPredefinedProfiles API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type TrustDlpPredefinedProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contextAwareness) || (has(self.initProvider) && has(self.initProvider.contextAwareness))",message="spec.forProvider.contextAwareness is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.entries) || (has(self.initProvider) && has(self.initProvider.entries))",message="spec.forProvider.entries is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.profileId) || (has(self.initProvider) && has(self.initProvider.profileId))",message="spec.forProvider.profileId is a required parameter"
	Spec   TrustDlpPredefinedProfileSpec   `json:"spec"`
	Status TrustDlpPredefinedProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrustDlpPredefinedProfileList contains a list of TrustDlpPredefinedProfiles
type TrustDlpPredefinedProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrustDlpPredefinedProfile `json:"items"`
}

// Repository type metadata.
var (
	TrustDlpPredefinedProfile_Kind             = "TrustDlpPredefinedProfile"
	TrustDlpPredefinedProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrustDlpPredefinedProfile_Kind}.String()
	TrustDlpPredefinedProfile_KindAPIVersion   = TrustDlpPredefinedProfile_Kind + "." + CRDGroupVersion.String()
	TrustDlpPredefinedProfile_GroupVersionKind = CRDGroupVersion.WithKind(TrustDlpPredefinedProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&TrustDlpPredefinedProfile{}, &TrustDlpPredefinedProfileList{})
}
