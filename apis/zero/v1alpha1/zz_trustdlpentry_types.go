// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfidenceInitParameters struct {
}

type ConfidenceObservation struct {

	// (Boolean)
	AIContextAvailable *bool `json:"aiContextAvailable,omitempty" tf:"ai_context_available,omitempty"`

	// (Boolean) Indicates whether this entry can be made more or less sensitive by setting a confidence threshold.
	// Profiles that use an entry with available set to true can use confidence thresholds
	// Indicates whether this entry can be made more or less sensitive by setting a confidence threshold.
	// Profiles that use an entry with `available` set to true can use confidence thresholds
	Available *bool `json:"available,omitempty" tf:"available,omitempty"`
}

type ConfidenceParameters struct {
}

type TrustDlpEntryInitParameters struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) (see below for nested schema)
	Confidence *ConfidenceInitParameters `json:"confidence,omitempty" tf:"confidence,omitempty"`

	// (Boolean)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes) (see below for nested schema)
	Pattern *TrustDlpEntryPatternInitParameters `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// (String)
	ProfileID *string `json:"profileId,omitempty" tf:"profile_id,omitempty"`

	// (String)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TrustDlpEntryObservation struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) (see below for nested schema)
	Confidence *ConfidenceObservation `json:"confidence,omitempty" tf:"confidence,omitempty"`

	// (String)
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (Boolean)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes) (see below for nested schema)
	Pattern *TrustDlpEntryPatternObservation `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// (String)
	ProfileID *string `json:"profileId,omitempty" tf:"profile_id,omitempty"`

	// (Boolean)
	Secret *bool `json:"secret,omitempty" tf:"secret,omitempty"`

	// (String)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String)
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// (String)
	WordList *string `json:"wordList,omitempty" tf:"word_list,omitempty"`
}

type TrustDlpEntryParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Confidence *ConfidenceParameters `json:"confidence,omitempty" tf:"confidence,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Pattern *TrustDlpEntryPatternParameters `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	ProfileID *string `json:"profileId,omitempty" tf:"profile_id,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TrustDlpEntryPatternInitParameters struct {

	// (String)
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`

	// (String)
	Validation *string `json:"validation,omitempty" tf:"validation,omitempty"`
}

type TrustDlpEntryPatternObservation struct {

	// (String)
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`

	// (String)
	Validation *string `json:"validation,omitempty" tf:"validation,omitempty"`
}

type TrustDlpEntryPatternParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	Regex *string `json:"regex" tf:"regex,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Validation *string `json:"validation,omitempty" tf:"validation,omitempty"`
}

// TrustDlpEntrySpec defines the desired state of TrustDlpEntry
type TrustDlpEntrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrustDlpEntryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrustDlpEntryInitParameters `json:"initProvider,omitempty"`
}

// TrustDlpEntryStatus defines the observed state of TrustDlpEntry.
type TrustDlpEntryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrustDlpEntryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrustDlpEntry is the Schema for the TrustDlpEntrys API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type TrustDlpEntry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.pattern) || (has(self.initProvider) && has(self.initProvider.pattern))",message="spec.forProvider.pattern is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.profileId) || (has(self.initProvider) && has(self.initProvider.profileId))",message="spec.forProvider.profileId is a required parameter"
	Spec   TrustDlpEntrySpec   `json:"spec"`
	Status TrustDlpEntryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrustDlpEntryList contains a list of TrustDlpEntrys
type TrustDlpEntryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrustDlpEntry `json:"items"`
}

// Repository type metadata.
var (
	TrustDlpEntry_Kind             = "TrustDlpEntry"
	TrustDlpEntry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrustDlpEntry_Kind}.String()
	TrustDlpEntry_KindAPIVersion   = TrustDlpEntry_Kind + "." + CRDGroupVersion.String()
	TrustDlpEntry_GroupVersionKind = CRDGroupVersion.WithKind(TrustDlpEntry_Kind)
)

func init() {
	SchemeBuilder.Register(&TrustDlpEntry{}, &TrustDlpEntryList{})
}
