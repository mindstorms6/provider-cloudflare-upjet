// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DohInitParameters struct {

	// (Boolean) True if the endpoint is enabled for this location.
	// True if the endpoint is enabled for this location.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// empty list is only effective if the ipv4 endpoint is enabled for this location. (see below for nested schema)
	Networks []NetworksInitParameters `json:"networks,omitempty" tf:"networks,omitempty"`

	// (Boolean) True if the endpoint requires user identity authentication.
	// True if the endpoint requires [user identity](https://developers.cloudflare.com/cloudflare-one/connections/connect-devices/agentless/dns/dns-over-https/#filter-doh-requests-by-user) authentication.
	RequireToken *bool `json:"requireToken,omitempty" tf:"require_token,omitempty"`
}

type DohObservation struct {

	// (Boolean) True if the endpoint is enabled for this location.
	// True if the endpoint is enabled for this location.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// empty list is only effective if the ipv4 endpoint is enabled for this location. (see below for nested schema)
	Networks []NetworksObservation `json:"networks,omitempty" tf:"networks,omitempty"`

	// (Boolean) True if the endpoint requires user identity authentication.
	// True if the endpoint requires [user identity](https://developers.cloudflare.com/cloudflare-one/connections/connect-devices/agentless/dns/dns-over-https/#filter-doh-requests-by-user) authentication.
	RequireToken *bool `json:"requireToken,omitempty" tf:"require_token,omitempty"`
}

type DohParameters struct {

	// (Boolean) True if the endpoint is enabled for this location.
	// True if the endpoint is enabled for this location.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// empty list is only effective if the ipv4 endpoint is enabled for this location. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Networks []NetworksParameters `json:"networks" tf:"networks,omitempty"`

	// (Boolean) True if the endpoint requires user identity authentication.
	// True if the endpoint requires [user identity](https://developers.cloudflare.com/cloudflare-one/connections/connect-devices/agentless/dns/dns-over-https/#filter-doh-requests-by-user) authentication.
	// +kubebuilder:validation:Optional
	RequireToken *bool `json:"requireToken,omitempty" tf:"require_token,omitempty"`
}

type DotInitParameters struct {

	// (Boolean) True if the endpoint is enabled for this location.
	// True if the endpoint is enabled for this location.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// empty list is only effective if the ipv4 endpoint is enabled for this location. (see below for nested schema)
	Networks []DotNetworksInitParameters `json:"networks,omitempty" tf:"networks,omitempty"`
}

type DotNetworksInitParameters struct {

	// (String) The IP address or IP CIDR.
	// The IP address or IP CIDR.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

type DotNetworksObservation struct {

	// (String) The IP address or IP CIDR.
	// The IP address or IP CIDR.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

type DotNetworksParameters struct {

	// (String) The IP address or IP CIDR.
	// The IP address or IP CIDR.
	// +kubebuilder:validation:Optional
	Network *string `json:"network" tf:"network,omitempty"`
}

type DotObservation struct {

	// (Boolean) True if the endpoint is enabled for this location.
	// True if the endpoint is enabled for this location.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// empty list is only effective if the ipv4 endpoint is enabled for this location. (see below for nested schema)
	Networks []DotNetworksObservation `json:"networks,omitempty" tf:"networks,omitempty"`
}

type DotParameters struct {

	// (Boolean) True if the endpoint is enabled for this location.
	// True if the endpoint is enabled for this location.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// empty list is only effective if the ipv4 endpoint is enabled for this location. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Networks []DotNetworksParameters `json:"networks" tf:"networks,omitempty"`
}

type EndpointsIPv4InitParameters struct {

	// (Boolean) True if the endpoint is enabled for this location.
	// True if the endpoint is enabled for this location.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type EndpointsIPv4Observation struct {

	// (Boolean) True if the endpoint is enabled for this location.
	// True if the endpoint is enabled for this location.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type EndpointsIPv4Parameters struct {

	// (Boolean) True if the endpoint is enabled for this location.
	// True if the endpoint is enabled for this location.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type EndpointsIPv6InitParameters struct {

	// (Boolean) True if the endpoint is enabled for this location.
	// True if the endpoint is enabled for this location.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// empty list is only effective if the ipv4 endpoint is enabled for this location. (see below for nested schema)
	Networks []IPv6NetworksInitParameters `json:"networks,omitempty" tf:"networks,omitempty"`
}

type EndpointsIPv6Observation struct {

	// (Boolean) True if the endpoint is enabled for this location.
	// True if the endpoint is enabled for this location.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// empty list is only effective if the ipv4 endpoint is enabled for this location. (see below for nested schema)
	Networks []IPv6NetworksObservation `json:"networks,omitempty" tf:"networks,omitempty"`
}

type EndpointsIPv6Parameters struct {

	// (Boolean) True if the endpoint is enabled for this location.
	// True if the endpoint is enabled for this location.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// empty list is only effective if the ipv4 endpoint is enabled for this location. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Networks []IPv6NetworksParameters `json:"networks" tf:"networks,omitempty"`
}

type EndpointsInitParameters struct {

	// (Attributes) (see below for nested schema)
	Doh *DohInitParameters `json:"doh,omitempty" tf:"doh,omitempty"`

	// (Attributes) (see below for nested schema)
	Dot *DotInitParameters `json:"dot,omitempty" tf:"dot,omitempty"`

	// (Attributes) (see below for nested schema)
	IPv4 *EndpointsIPv4InitParameters `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// (Attributes) (see below for nested schema)
	IPv6 *EndpointsIPv6InitParameters `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type EndpointsObservation struct {

	// (Attributes) (see below for nested schema)
	Doh *DohObservation `json:"doh,omitempty" tf:"doh,omitempty"`

	// (Attributes) (see below for nested schema)
	Dot *DotObservation `json:"dot,omitempty" tf:"dot,omitempty"`

	// (Attributes) (see below for nested schema)
	IPv4 *EndpointsIPv4Observation `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// (Attributes) (see below for nested schema)
	IPv6 *EndpointsIPv6Observation `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type EndpointsParameters struct {

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Doh *DohParameters `json:"doh,omitempty" tf:"doh,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Dot *DotParameters `json:"dot,omitempty" tf:"dot,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	IPv4 *EndpointsIPv4Parameters `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	IPv6 *EndpointsIPv6Parameters `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type IPv6NetworksInitParameters struct {

	// (String) The IP address or IP CIDR.
	// The IPv6 address or IPv6 CIDR.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

type IPv6NetworksObservation struct {

	// (String) The IP address or IP CIDR.
	// The IPv6 address or IPv6 CIDR.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

type IPv6NetworksParameters struct {

	// (String) The IP address or IP CIDR.
	// The IPv6 address or IPv6 CIDR.
	// +kubebuilder:validation:Optional
	Network *string `json:"network" tf:"network,omitempty"`
}

type NetworksInitParameters struct {

	// (String) The IP address or IP CIDR.
	// The IP address or IP CIDR.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

type NetworksObservation struct {

	// (String) The IP address or IP CIDR.
	// The IP address or IP CIDR.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

type NetworksParameters struct {

	// (String) The IP address or IP CIDR.
	// The IP address or IP CIDR.
	// +kubebuilder:validation:Optional
	Network *string `json:"network" tf:"network,omitempty"`
}

type TrustDNSLocationInitParameters struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) True if the location is the default location.
	// True if the location is the default location.
	ClientDefault *bool `json:"clientDefault,omitempty" tf:"client_default,omitempty"`

	// 6fb8-4858-9296-98f51631e8e6) is auto-assigned. When updating a location, if the field is absent or set with null, the pre-assigned pair remains unchanged.
	// The identifier of the pair of IPv4 addresses assigned to this location. When creating a location, if this field is absent or set with null, the pair of shared IPv4 addresses (0e4a32c6-6fb8-4858-9296-98f51631e8e6) is auto-assigned. When updating a location, if the field is absent or set with null, the pre-assigned pair remains unchanged.
	DNSDestinationIpsID *string `json:"dnsDestinationIpsId,omitempty" tf:"dns_destination_ips_id,omitempty"`

	// (Boolean) True if the location needs to resolve EDNS queries.
	// True if the location needs to resolve EDNS queries.
	EcsSupport *bool `json:"ecsSupport,omitempty" tf:"ecs_support,omitempty"`

	// (Attributes) The destination endpoints configured for this location. When updating a location, if this field is absent or set with null, the endpoints configuration remains unchanged. (see below for nested schema)
	Endpoints *EndpointsInitParameters `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	// empty list is only effective if the ipv4 endpoint is enabled for this location. (see below for nested schema)
	Networks []TrustDNSLocationNetworksInitParameters `json:"networks,omitempty" tf:"networks,omitempty"`
}

type TrustDNSLocationNetworksInitParameters struct {

	// (String) The IP address or IP CIDR.
	// The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a maximum of /24.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

type TrustDNSLocationNetworksObservation struct {

	// (String) The IP address or IP CIDR.
	// The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a maximum of /24.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

type TrustDNSLocationNetworksParameters struct {

	// (String) The IP address or IP CIDR.
	// The IPv4 address or IPv4 CIDR. IPv4 CIDRs are limited to a maximum of /24.
	// +kubebuilder:validation:Optional
	Network *string `json:"network" tf:"network,omitempty"`
}

type TrustDNSLocationObservation struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) True if the location is the default location.
	// True if the location is the default location.
	ClientDefault *bool `json:"clientDefault,omitempty" tf:"client_default,omitempty"`

	// (String)
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) The uuid identifier of the IPv6 block brought to the gateway, so that this location's IPv6 address is allocated from the Bring Your Own Ipv6(BYOIPv6) block and not from the standard CloudFlare IPv6 block.
	// The uuid identifier of the IPv6 block brought to the gateway, so that this location's IPv6 address is allocated from the Bring Your Own Ipv6(BYOIPv6) block and not from the standard CloudFlare IPv6 block.
	DNSDestinationIPv6BlockID *string `json:"dnsDestinationIpv6BlockId,omitempty" tf:"dns_destination_ipv6_block_id,omitempty"`

	// 6fb8-4858-9296-98f51631e8e6) is auto-assigned. When updating a location, if the field is absent or set with null, the pre-assigned pair remains unchanged.
	// The identifier of the pair of IPv4 addresses assigned to this location. When creating a location, if this field is absent or set with null, the pair of shared IPv4 addresses (0e4a32c6-6fb8-4858-9296-98f51631e8e6) is auto-assigned. When updating a location, if the field is absent or set with null, the pre-assigned pair remains unchanged.
	DNSDestinationIpsID *string `json:"dnsDestinationIpsId,omitempty" tf:"dns_destination_ips_id,omitempty"`

	// generated by Gateway.
	// The DNS over HTTPS domain to send DNS requests to. This field is auto-generated by Gateway.
	DohSubdomain *string `json:"dohSubdomain,omitempty" tf:"doh_subdomain,omitempty"`

	// (Boolean) True if the location needs to resolve EDNS queries.
	// True if the location needs to resolve EDNS queries.
	EcsSupport *bool `json:"ecsSupport,omitempty" tf:"ecs_support,omitempty"`

	// (Attributes) The destination endpoints configured for this location. When updating a location, if this field is absent or set with null, the endpoints configuration remains unchanged. (see below for nested schema)
	Endpoints *EndpointsObservation `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// generated by Gateway.
	// IPV6 destination ip assigned to this location. DNS requests sent to this IP will counted as the request under this location. This field is auto-generated by Gateway.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// only.
	// The primary destination IPv4 address from the pair identified by the dns_destination_ips_id. This field is read-only.
	IPv4Destination *string `json:"ipv4Destination,omitempty" tf:"ipv4_destination,omitempty"`

	// only.
	// The backup destination IPv4 address from the pair identified by the dns_destination_ips_id. This field is read-only.
	IPv4DestinationBackup *string `json:"ipv4DestinationBackup,omitempty" tf:"ipv4_destination_backup,omitempty"`

	// empty list is only effective if the ipv4 endpoint is enabled for this location. (see below for nested schema)
	Networks []TrustDNSLocationNetworksObservation `json:"networks,omitempty" tf:"networks,omitempty"`

	// (String)
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type TrustDNSLocationParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) True if the location is the default location.
	// True if the location is the default location.
	// +kubebuilder:validation:Optional
	ClientDefault *bool `json:"clientDefault,omitempty" tf:"client_default,omitempty"`

	// 6fb8-4858-9296-98f51631e8e6) is auto-assigned. When updating a location, if the field is absent or set with null, the pre-assigned pair remains unchanged.
	// The identifier of the pair of IPv4 addresses assigned to this location. When creating a location, if this field is absent or set with null, the pair of shared IPv4 addresses (0e4a32c6-6fb8-4858-9296-98f51631e8e6) is auto-assigned. When updating a location, if the field is absent or set with null, the pre-assigned pair remains unchanged.
	// +kubebuilder:validation:Optional
	DNSDestinationIpsID *string `json:"dnsDestinationIpsId,omitempty" tf:"dns_destination_ips_id,omitempty"`

	// (Boolean) True if the location needs to resolve EDNS queries.
	// True if the location needs to resolve EDNS queries.
	// +kubebuilder:validation:Optional
	EcsSupport *bool `json:"ecsSupport,omitempty" tf:"ecs_support,omitempty"`

	// (Attributes) The destination endpoints configured for this location. When updating a location, if this field is absent or set with null, the endpoints configuration remains unchanged. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Endpoints *EndpointsParameters `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	// empty list is only effective if the ipv4 endpoint is enabled for this location. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Networks []TrustDNSLocationNetworksParameters `json:"networks,omitempty" tf:"networks,omitempty"`
}

// TrustDNSLocationSpec defines the desired state of TrustDNSLocation
type TrustDNSLocationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrustDNSLocationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrustDNSLocationInitParameters `json:"initProvider,omitempty"`
}

// TrustDNSLocationStatus defines the observed state of TrustDNSLocation.
type TrustDNSLocationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrustDNSLocationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrustDNSLocation is the Schema for the TrustDNSLocations API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type TrustDNSLocation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endpoints) || (has(self.initProvider) && has(self.initProvider.endpoints))",message="spec.forProvider.endpoints is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.networks) || (has(self.initProvider) && has(self.initProvider.networks))",message="spec.forProvider.networks is a required parameter"
	Spec   TrustDNSLocationSpec   `json:"spec"`
	Status TrustDNSLocationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrustDNSLocationList contains a list of TrustDNSLocations
type TrustDNSLocationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrustDNSLocation `json:"items"`
}

// Repository type metadata.
var (
	TrustDNSLocation_Kind             = "TrustDNSLocation"
	TrustDNSLocation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrustDNSLocation_Kind}.String()
	TrustDNSLocation_KindAPIVersion   = TrustDNSLocation_Kind + "." + CRDGroupVersion.String()
	TrustDNSLocation_GroupVersionKind = CRDGroupVersion.WithKind(TrustDNSLocation_Kind)
)

func init() {
	SchemeBuilder.Register(&TrustDNSLocation{}, &TrustDNSLocationList{})
}
