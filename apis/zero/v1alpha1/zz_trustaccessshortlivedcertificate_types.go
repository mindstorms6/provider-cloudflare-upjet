// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TrustAccessShortLivedCertificateInitParameters struct {

	// (String) The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) UUID
	// UUID
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// (String) The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type TrustAccessShortLivedCertificateObservation struct {

	// (String) The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) UUID
	// UUID
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// (String) The Application Audience (AUD) tag. Identifies the application associated with the CA.
	// The Application Audience (AUD) tag. Identifies the application associated with the CA.
	Aud *string `json:"aud,omitempty" tf:"aud,omitempty"`

	// (String) UUID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The public key to add to your SSH server configuration.
	// The public key to add to your SSH server configuration.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// (String) The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type TrustAccessShortLivedCertificateParameters struct {

	// (String) The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) UUID
	// UUID
	// +kubebuilder:validation:Optional
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// (String) The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// TrustAccessShortLivedCertificateSpec defines the desired state of TrustAccessShortLivedCertificate
type TrustAccessShortLivedCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrustAccessShortLivedCertificateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrustAccessShortLivedCertificateInitParameters `json:"initProvider,omitempty"`
}

// TrustAccessShortLivedCertificateStatus defines the observed state of TrustAccessShortLivedCertificate.
type TrustAccessShortLivedCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrustAccessShortLivedCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrustAccessShortLivedCertificate is the Schema for the TrustAccessShortLivedCertificates API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type TrustAccessShortLivedCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.appId) || (has(self.initProvider) && has(self.initProvider.appId))",message="spec.forProvider.appId is a required parameter"
	Spec   TrustAccessShortLivedCertificateSpec   `json:"spec"`
	Status TrustAccessShortLivedCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrustAccessShortLivedCertificateList contains a list of TrustAccessShortLivedCertificates
type TrustAccessShortLivedCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrustAccessShortLivedCertificate `json:"items"`
}

// Repository type metadata.
var (
	TrustAccessShortLivedCertificate_Kind             = "TrustAccessShortLivedCertificate"
	TrustAccessShortLivedCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrustAccessShortLivedCertificate_Kind}.String()
	TrustAccessShortLivedCertificate_KindAPIVersion   = TrustAccessShortLivedCertificate_Kind + "." + CRDGroupVersion.String()
	TrustAccessShortLivedCertificate_GroupVersionKind = CRDGroupVersion.WithKind(TrustAccessShortLivedCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&TrustAccessShortLivedCertificate{}, &TrustAccessShortLivedCertificateList{})
}
