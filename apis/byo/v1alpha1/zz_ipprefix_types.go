// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPPrefixInitParameters struct {

	// (String) Identifier of a Cloudflare account.
	// Identifier of a Cloudflare account.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Number) Autonomous System Number (ASN) the prefix will be advertised under.
	// Autonomous System Number (ASN) the prefix will be advertised under.
	Asn *float64 `json:"asn,omitempty" tf:"asn,omitempty"`

	// Domain Routing format.
	// IP Prefix in Classless Inter-Domain Routing format.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// (String) Description of the prefix.
	// Description of the prefix.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Identifier for the uploaded LOA document.
	// Identifier for the uploaded LOA document.
	LoaDocumentID *string `json:"loaDocumentId,omitempty" tf:"loa_document_id,omitempty"`
}

type IPPrefixObservation struct {

	// (String) Identifier of a Cloudflare account.
	// Identifier of a Cloudflare account.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) Prefix advertisement status to the Internet. This field is only not 'null' if on demand is enabled.
	// Prefix advertisement status to the Internet. This field is only not 'null' if on demand is enabled.
	Advertised *bool `json:"advertised,omitempty" tf:"advertised,omitempty"`

	// (String) Last time the advertisement status was changed. This field is only not 'null' if on demand is enabled.
	// Last time the advertisement status was changed. This field is only not 'null' if on demand is enabled.
	AdvertisedModifiedAt *string `json:"advertisedModifiedAt,omitempty" tf:"advertised_modified_at,omitempty"`

	// (String) Approval state of the prefix (P = pending, V = active).
	// Approval state of the prefix (P = pending, V = active).
	Approved *string `json:"approved,omitempty" tf:"approved,omitempty"`

	// (Number) Autonomous System Number (ASN) the prefix will be advertised under.
	// Autonomous System Number (ASN) the prefix will be advertised under.
	Asn *float64 `json:"asn,omitempty" tf:"asn,omitempty"`

	// Domain Routing format.
	// IP Prefix in Classless Inter-Domain Routing format.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// (String)
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) Description of the prefix.
	// Description of the prefix.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Identifier of an IP Prefix.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Identifier for the uploaded LOA document.
	// Identifier for the uploaded LOA document.
	LoaDocumentID *string `json:"loaDocumentId,omitempty" tf:"loa_document_id,omitempty"`

	// (String)
	ModifiedAt *string `json:"modifiedAt,omitempty" tf:"modified_at,omitempty"`

	// (Boolean) Whether advertisement of the prefix to the Internet may be dynamically enabled or disabled.
	// Whether advertisement of the prefix to the Internet may be dynamically enabled or disabled.
	OnDemandEnabled *bool `json:"onDemandEnabled,omitempty" tf:"on_demand_enabled,omitempty"`

	// (Boolean) Whether advertisement status of the prefix is locked, meaning it cannot be changed.
	// Whether advertisement status of the prefix is locked, meaning it cannot be changed.
	OnDemandLocked *bool `json:"onDemandLocked,omitempty" tf:"on_demand_locked,omitempty"`
}

type IPPrefixParameters struct {

	// (String) Identifier of a Cloudflare account.
	// Identifier of a Cloudflare account.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Number) Autonomous System Number (ASN) the prefix will be advertised under.
	// Autonomous System Number (ASN) the prefix will be advertised under.
	// +kubebuilder:validation:Optional
	Asn *float64 `json:"asn,omitempty" tf:"asn,omitempty"`

	// Domain Routing format.
	// IP Prefix in Classless Inter-Domain Routing format.
	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// (String) Description of the prefix.
	// Description of the prefix.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Identifier for the uploaded LOA document.
	// Identifier for the uploaded LOA document.
	// +kubebuilder:validation:Optional
	LoaDocumentID *string `json:"loaDocumentId,omitempty" tf:"loa_document_id,omitempty"`
}

// IPPrefixSpec defines the desired state of IPPrefix
type IPPrefixSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPPrefixParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IPPrefixInitParameters `json:"initProvider,omitempty"`
}

// IPPrefixStatus defines the observed state of IPPrefix.
type IPPrefixStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPPrefixObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IPPrefix is the Schema for the IPPrefixs API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type IPPrefix struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.asn) || (has(self.initProvider) && has(self.initProvider.asn))",message="spec.forProvider.asn is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cidr) || (has(self.initProvider) && has(self.initProvider.cidr))",message="spec.forProvider.cidr is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.loaDocumentId) || (has(self.initProvider) && has(self.initProvider.loaDocumentId))",message="spec.forProvider.loaDocumentId is a required parameter"
	Spec   IPPrefixSpec   `json:"spec"`
	Status IPPrefixStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPPrefixList contains a list of IPPrefixs
type IPPrefixList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPPrefix `json:"items"`
}

// Repository type metadata.
var (
	IPPrefix_Kind             = "IPPrefix"
	IPPrefix_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPPrefix_Kind}.String()
	IPPrefix_KindAPIVersion   = IPPrefix_Kind + "." + CRDGroupVersion.String()
	IPPrefix_GroupVersionKind = CRDGroupVersion.WithKind(IPPrefix_Kind)
)

func init() {
	SchemeBuilder.Register(&IPPrefix{}, &IPPrefixList{})
}
