// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AIBindingsInitParameters struct {

	// (String)
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type AIBindingsObservation struct {

	// (String)
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type AIBindingsParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type AnalyticsEngineDatasetsInitParameters struct {

	// (String) Name of the dataset.
	// Name of the dataset.
	Dataset *string `json:"dataset,omitempty" tf:"dataset,omitempty"`
}

type AnalyticsEngineDatasetsObservation struct {

	// (String) Name of the dataset.
	// Name of the dataset.
	Dataset *string `json:"dataset,omitempty" tf:"dataset,omitempty"`
}

type AnalyticsEngineDatasetsParameters struct {

	// (String) Name of the dataset.
	// Name of the dataset.
	// +kubebuilder:validation:Optional
	Dataset *string `json:"dataset,omitempty" tf:"dataset,omitempty"`
}

type BrowsersInitParameters struct {
}

type BrowsersObservation struct {
}

type BrowsersParameters struct {
}

type BuildConfigInitParameters struct {

	// (Boolean) Enable build caching for the project.
	// Enable build caching for the project.
	BuildCaching *bool `json:"buildCaching,omitempty" tf:"build_caching,omitempty"`

	// (String) Command used to build project.
	// Command used to build project.
	BuildCommand *string `json:"buildCommand,omitempty" tf:"build_command,omitempty"`

	// (String) Output directory of the build.
	// Output directory of the build.
	DestinationDir *string `json:"destinationDir,omitempty" tf:"destination_dir,omitempty"`

	// (String) Directory to run the command.
	// Directory to run the command.
	RootDir *string `json:"rootDir,omitempty" tf:"root_dir,omitempty"`

	// (String) The classifying tag for analytics.
	// The classifying tag for analytics.
	WebAnalyticsTag *string `json:"webAnalyticsTag,omitempty" tf:"web_analytics_tag,omitempty"`

	// (String) The auth token for analytics.
	// The auth token for analytics.
	WebAnalyticsToken *string `json:"webAnalyticsToken,omitempty" tf:"web_analytics_token,omitempty"`
}

type BuildConfigObservation struct {

	// (Boolean) Enable build caching for the project.
	// Enable build caching for the project.
	BuildCaching *bool `json:"buildCaching,omitempty" tf:"build_caching,omitempty"`

	// (String) Command used to build project.
	// Command used to build project.
	BuildCommand *string `json:"buildCommand,omitempty" tf:"build_command,omitempty"`

	// (String) Output directory of the build.
	// Output directory of the build.
	DestinationDir *string `json:"destinationDir,omitempty" tf:"destination_dir,omitempty"`

	// (String) Directory to run the command.
	// Directory to run the command.
	RootDir *string `json:"rootDir,omitempty" tf:"root_dir,omitempty"`

	// (String) The classifying tag for analytics.
	// The classifying tag for analytics.
	WebAnalyticsTag *string `json:"webAnalyticsTag,omitempty" tf:"web_analytics_tag,omitempty"`

	// (String) The auth token for analytics.
	// The auth token for analytics.
	WebAnalyticsToken *string `json:"webAnalyticsToken,omitempty" tf:"web_analytics_token,omitempty"`
}

type BuildConfigParameters struct {

	// (Boolean) Enable build caching for the project.
	// Enable build caching for the project.
	// +kubebuilder:validation:Optional
	BuildCaching *bool `json:"buildCaching,omitempty" tf:"build_caching,omitempty"`

	// (String) Command used to build project.
	// Command used to build project.
	// +kubebuilder:validation:Optional
	BuildCommand *string `json:"buildCommand,omitempty" tf:"build_command,omitempty"`

	// (String) Output directory of the build.
	// Output directory of the build.
	// +kubebuilder:validation:Optional
	DestinationDir *string `json:"destinationDir,omitempty" tf:"destination_dir,omitempty"`

	// (String) Directory to run the command.
	// Directory to run the command.
	// +kubebuilder:validation:Optional
	RootDir *string `json:"rootDir,omitempty" tf:"root_dir,omitempty"`

	// (String) The classifying tag for analytics.
	// The classifying tag for analytics.
	// +kubebuilder:validation:Optional
	WebAnalyticsTag *string `json:"webAnalyticsTag,omitempty" tf:"web_analytics_tag,omitempty"`

	// (String) The auth token for analytics.
	// The auth token for analytics.
	// +kubebuilder:validation:Optional
	WebAnalyticsToken *string `json:"webAnalyticsToken,omitempty" tf:"web_analytics_token,omitempty"`
}

type CanonicalDeploymentBuildConfigInitParameters struct {
}

type CanonicalDeploymentBuildConfigObservation struct {

	// (Boolean) Enable build caching for the project.
	// Enable build caching for the project.
	BuildCaching *bool `json:"buildCaching,omitempty" tf:"build_caching,omitempty"`

	// (String) Command used to build project.
	// Command used to build project.
	BuildCommand *string `json:"buildCommand,omitempty" tf:"build_command,omitempty"`

	// (String) Output directory of the build.
	// Output directory of the build.
	DestinationDir *string `json:"destinationDir,omitempty" tf:"destination_dir,omitempty"`

	// (String) Directory to run the command.
	// Directory to run the command.
	RootDir *string `json:"rootDir,omitempty" tf:"root_dir,omitempty"`

	// (String) The classifying tag for analytics.
	// The classifying tag for analytics.
	WebAnalyticsTag *string `json:"webAnalyticsTag,omitempty" tf:"web_analytics_tag,omitempty"`

	// (String) The auth token for analytics.
	// The auth token for analytics.
	WebAnalyticsToken *string `json:"webAnalyticsToken,omitempty" tf:"web_analytics_token,omitempty"`
}

type CanonicalDeploymentBuildConfigParameters struct {
}

type CanonicalDeploymentInitParameters struct {

	// (Attributes) Configs for the project build process. (see below for nested schema)
	BuildConfig *CanonicalDeploymentBuildConfigInitParameters `json:"buildConfig,omitempty" tf:"build_config,omitempty"`

	// (Attributes) Info about what caused the deployment. (see below for nested schema)
	DeploymentTrigger *DeploymentTriggerInitParameters `json:"deploymentTrigger,omitempty" tf:"deployment_trigger,omitempty"`

	// (Attributes Map) Environment variables for build configs. (see below for nested schema)
	EnvVars map[string]EnvVarsInitParameters `json:"envVars,omitempty" tf:"env_vars,omitempty"`

	// (Attributes) The status of the deployment. (see below for nested schema)
	LatestStage *LatestStageInitParameters `json:"latestStage,omitempty" tf:"latest_stage,omitempty"`

	// (Attributes) (see below for nested schema)
	Source *SourceInitParameters `json:"source,omitempty" tf:"source,omitempty"`

	// (Attributes List) List of past stages. (see below for nested schema)
	Stages []StagesInitParameters `json:"stages,omitempty" tf:"stages,omitempty"`
}

type CanonicalDeploymentObservation struct {

	// (List of String) A list of alias URLs pointing to this deployment.
	// A list of alias URLs pointing to this deployment.
	Aliases []*string `json:"aliases,omitempty" tf:"aliases,omitempty"`

	// (Attributes) Configs for the project build process. (see below for nested schema)
	BuildConfig *CanonicalDeploymentBuildConfigObservation `json:"buildConfig,omitempty" tf:"build_config,omitempty"`

	// (String) When the project was created.
	// When the deployment was created.
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (Attributes) Info about what caused the deployment. (see below for nested schema)
	DeploymentTrigger *DeploymentTriggerObservation `json:"deploymentTrigger,omitempty" tf:"deployment_trigger,omitempty"`

	// (Attributes Map) Environment variables for build configs. (see below for nested schema)
	EnvVars []EnvVarsObservation `json:"envVars,omitempty" tf:"env_vars,omitempty"`

	// (String) The Service environment.
	// Type of deploy.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Name of the project.
	// Id of the deployment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) If the deployment has been skipped.
	// If the deployment has been skipped.
	IsSkipped *bool `json:"isSkipped,omitempty" tf:"is_skipped,omitempty"`

	// (Attributes) The status of the deployment. (see below for nested schema)
	LatestStage *LatestStageObservation `json:"latestStage,omitempty" tf:"latest_stage,omitempty"`

	// (String) When the deployment was last modified.
	// When the deployment was last modified.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (String)
	// Id of the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (String) Name of the project.
	// Name of the project.
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// (String) Short Id (8 character) of the deployment.
	// Short Id (8 character) of the deployment.
	ShortID *string `json:"shortId,omitempty" tf:"short_id,omitempty"`

	// (Attributes) (see below for nested schema)
	Source *SourceObservation `json:"source,omitempty" tf:"source,omitempty"`

	// (Attributes List) List of past stages. (see below for nested schema)
	Stages []StagesObservation `json:"stages,omitempty" tf:"stages,omitempty"`

	// (String) The live URL to view this deployment.
	// The live URL to view this deployment.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type CanonicalDeploymentParameters struct {

	// (Attributes) Configs for the project build process. (see below for nested schema)
	// +kubebuilder:validation:Optional
	BuildConfig *CanonicalDeploymentBuildConfigParameters `json:"buildConfig,omitempty" tf:"build_config,omitempty"`

	// (Attributes) Info about what caused the deployment. (see below for nested schema)
	// +kubebuilder:validation:Optional
	DeploymentTrigger *DeploymentTriggerParameters `json:"deploymentTrigger,omitempty" tf:"deployment_trigger,omitempty"`

	// (Attributes Map) Environment variables for build configs. (see below for nested schema)
	// +kubebuilder:validation:Optional
	EnvVars map[string]EnvVarsParameters `json:"envVars" tf:"env_vars,omitempty"`

	// (Attributes) The status of the deployment. (see below for nested schema)
	// +kubebuilder:validation:Optional
	LatestStage *LatestStageParameters `json:"latestStage,omitempty" tf:"latest_stage,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Source *SourceParameters `json:"source,omitempty" tf:"source,omitempty"`

	// (Attributes List) List of past stages. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Stages []StagesParameters `json:"stages" tf:"stages,omitempty"`
}

type ConfigInitParameters struct {
}

type ConfigObservation struct {

	// (Boolean)
	DeploymentsEnabled *bool `json:"deploymentsEnabled,omitempty" tf:"deployments_enabled,omitempty"`

	// (String)
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (List of String)
	PathExcludes []*string `json:"pathExcludes,omitempty" tf:"path_excludes,omitempty"`

	// (List of String)
	PathIncludes []*string `json:"pathIncludes,omitempty" tf:"path_includes,omitempty"`

	// (Boolean)
	PrCommentsEnabled *bool `json:"prCommentsEnabled,omitempty" tf:"pr_comments_enabled,omitempty"`

	// (List of String)
	PreviewBranchExcludes []*string `json:"previewBranchExcludes,omitempty" tf:"preview_branch_excludes,omitempty"`

	// (List of String)
	PreviewBranchIncludes []*string `json:"previewBranchIncludes,omitempty" tf:"preview_branch_includes,omitempty"`

	// (String)
	PreviewDeploymentSetting *string `json:"previewDeploymentSetting,omitempty" tf:"preview_deployment_setting,omitempty"`

	// (String) Production branch of the project. Used to identify production deployments.
	ProductionBranch *string `json:"productionBranch,omitempty" tf:"production_branch,omitempty"`

	// (Boolean)
	ProductionDeploymentsEnabled *bool `json:"productionDeploymentsEnabled,omitempty" tf:"production_deployments_enabled,omitempty"`

	// (String)
	RepoName *string `json:"repoName,omitempty" tf:"repo_name,omitempty"`
}

type ConfigParameters struct {
}

type D1DatabasesInitParameters struct {

	// (String) Name of the project.
	// UUID of the D1 database.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type D1DatabasesObservation struct {

	// (String) Name of the project.
	// UUID of the D1 database.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type D1DatabasesParameters struct {

	// (String) Name of the project.
	// UUID of the D1 database.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DeploymentConfigsInitParameters struct {

	// (Attributes) Configs for preview deploys. (see below for nested schema)
	Preview *PreviewInitParameters `json:"preview,omitempty" tf:"preview,omitempty"`

	// (Attributes) Configs for production deploys. (see below for nested schema)
	Production *ProductionInitParameters `json:"production,omitempty" tf:"production,omitempty"`
}

type DeploymentConfigsObservation struct {

	// (Attributes) Configs for preview deploys. (see below for nested schema)
	Preview *PreviewObservation `json:"preview,omitempty" tf:"preview,omitempty"`

	// (Attributes) Configs for production deploys. (see below for nested schema)
	Production *ProductionObservation `json:"production,omitempty" tf:"production,omitempty"`
}

type DeploymentConfigsParameters struct {

	// (Attributes) Configs for preview deploys. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Preview *PreviewParameters `json:"preview,omitempty" tf:"preview,omitempty"`

	// (Attributes) Configs for production deploys. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Production *ProductionParameters `json:"production,omitempty" tf:"production,omitempty"`
}

type DeploymentTriggerInitParameters struct {

	// (Attributes) Additional info about the trigger. (see below for nested schema)
	Metadata *MetadataInitParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`
}

type DeploymentTriggerMetadataInitParameters struct {
}

type DeploymentTriggerMetadataObservation struct {

	// (String) Where the trigger happened.
	// Where the trigger happened.
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// (String) Hash of the deployment trigger commit.
	// Hash of the deployment trigger commit.
	CommitHash *string `json:"commitHash,omitempty" tf:"commit_hash,omitempty"`

	// (String) Message of the deployment trigger commit.
	// Message of the deployment trigger commit.
	CommitMessage *string `json:"commitMessage,omitempty" tf:"commit_message,omitempty"`
}

type DeploymentTriggerMetadataParameters struct {
}

type DeploymentTriggerObservation struct {

	// (Attributes) Additional info about the trigger. (see below for nested schema)
	Metadata *MetadataObservation `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) The type of environment variable.
	// What caused the deployment.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DeploymentTriggerParameters struct {

	// (Attributes) Additional info about the trigger. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Metadata *MetadataParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`
}

type DurableObjectNamespacesInitParameters struct {

	// (String) ID of the Durabble Object namespace.
	// ID of the Durabble Object namespace.
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`
}

type DurableObjectNamespacesObservation struct {

	// (String) ID of the Durabble Object namespace.
	// ID of the Durabble Object namespace.
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`
}

type DurableObjectNamespacesParameters struct {

	// (String) ID of the Durabble Object namespace.
	// ID of the Durabble Object namespace.
	// +kubebuilder:validation:Optional
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`
}

type EnvVarsInitParameters struct {
}

type EnvVarsObservation struct {

	// (String) The type of environment variable.
	// The type of environment variable.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Environment variable value.
	// Environment variable value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EnvVarsParameters struct {
}

type HyperdriveBindingsInitParameters struct {

	// (String) Name of the project.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HyperdriveBindingsObservation struct {

	// (String) Name of the project.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HyperdriveBindingsParameters struct {

	// (String) Name of the project.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type KvNamespacesInitParameters struct {

	// (String) ID of the Durabble Object namespace.
	// ID of the KV namespace.
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`
}

type KvNamespacesObservation struct {

	// (String) ID of the Durabble Object namespace.
	// ID of the KV namespace.
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`
}

type KvNamespacesParameters struct {

	// (String) ID of the Durabble Object namespace.
	// ID of the KV namespace.
	// +kubebuilder:validation:Optional
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`
}

type LatestDeploymentBuildConfigInitParameters struct {
}

type LatestDeploymentBuildConfigObservation struct {

	// (Boolean) Enable build caching for the project.
	// Enable build caching for the project.
	BuildCaching *bool `json:"buildCaching,omitempty" tf:"build_caching,omitempty"`

	// (String) Command used to build project.
	// Command used to build project.
	BuildCommand *string `json:"buildCommand,omitempty" tf:"build_command,omitempty"`

	// (String) Output directory of the build.
	// Output directory of the build.
	DestinationDir *string `json:"destinationDir,omitempty" tf:"destination_dir,omitempty"`

	// (String) Directory to run the command.
	// Directory to run the command.
	RootDir *string `json:"rootDir,omitempty" tf:"root_dir,omitempty"`

	// (String) The classifying tag for analytics.
	// The classifying tag for analytics.
	WebAnalyticsTag *string `json:"webAnalyticsTag,omitempty" tf:"web_analytics_tag,omitempty"`

	// (String) The auth token for analytics.
	// The auth token for analytics.
	WebAnalyticsToken *string `json:"webAnalyticsToken,omitempty" tf:"web_analytics_token,omitempty"`
}

type LatestDeploymentBuildConfigParameters struct {
}

type LatestDeploymentDeploymentTriggerInitParameters struct {

	// (Attributes) Additional info about the trigger. (see below for nested schema)
	Metadata *DeploymentTriggerMetadataInitParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`
}

type LatestDeploymentDeploymentTriggerObservation struct {

	// (Attributes) Additional info about the trigger. (see below for nested schema)
	Metadata *DeploymentTriggerMetadataObservation `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) The type of environment variable.
	// What caused the deployment.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type LatestDeploymentDeploymentTriggerParameters struct {

	// (Attributes) Additional info about the trigger. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Metadata *DeploymentTriggerMetadataParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`
}

type LatestDeploymentEnvVarsInitParameters struct {
}

type LatestDeploymentEnvVarsObservation struct {

	// (String) The type of environment variable.
	// The type of environment variable.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Environment variable value.
	// Environment variable value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LatestDeploymentEnvVarsParameters struct {
}

type LatestDeploymentInitParameters struct {

	// (Attributes) Configs for the project build process. (see below for nested schema)
	BuildConfig *LatestDeploymentBuildConfigInitParameters `json:"buildConfig,omitempty" tf:"build_config,omitempty"`

	// (Attributes) Info about what caused the deployment. (see below for nested schema)
	DeploymentTrigger *LatestDeploymentDeploymentTriggerInitParameters `json:"deploymentTrigger,omitempty" tf:"deployment_trigger,omitempty"`

	// (Attributes Map) Environment variables for build configs. (see below for nested schema)
	EnvVars map[string]LatestDeploymentEnvVarsInitParameters `json:"envVars,omitempty" tf:"env_vars,omitempty"`

	// (Attributes) The status of the deployment. (see below for nested schema)
	LatestStage *LatestDeploymentLatestStageInitParameters `json:"latestStage,omitempty" tf:"latest_stage,omitempty"`

	// (Attributes) (see below for nested schema)
	Source *LatestDeploymentSourceInitParameters `json:"source,omitempty" tf:"source,omitempty"`

	// (Attributes List) List of past stages. (see below for nested schema)
	Stages []LatestDeploymentStagesInitParameters `json:"stages,omitempty" tf:"stages,omitempty"`
}

type LatestDeploymentLatestStageInitParameters struct {
}

type LatestDeploymentLatestStageObservation struct {

	// (String) When the stage ended.
	// When the stage ended.
	EndedOn *string `json:"endedOn,omitempty" tf:"ended_on,omitempty"`

	// (String) Name of the project.
	// The current build stage.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) When the stage started.
	// When the stage started.
	StartedOn *string `json:"startedOn,omitempty" tf:"started_on,omitempty"`

	// (String) State of the current stage.
	// State of the current stage.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type LatestDeploymentLatestStageParameters struct {
}

type LatestDeploymentObservation struct {

	// (List of String) A list of alias URLs pointing to this deployment.
	// A list of alias URLs pointing to this deployment.
	Aliases []*string `json:"aliases,omitempty" tf:"aliases,omitempty"`

	// (Attributes) Configs for the project build process. (see below for nested schema)
	BuildConfig *LatestDeploymentBuildConfigObservation `json:"buildConfig,omitempty" tf:"build_config,omitempty"`

	// (String) When the project was created.
	// When the deployment was created.
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (Attributes) Info about what caused the deployment. (see below for nested schema)
	DeploymentTrigger *LatestDeploymentDeploymentTriggerObservation `json:"deploymentTrigger,omitempty" tf:"deployment_trigger,omitempty"`

	// (Attributes Map) Environment variables for build configs. (see below for nested schema)
	EnvVars []LatestDeploymentEnvVarsObservation `json:"envVars,omitempty" tf:"env_vars,omitempty"`

	// (String) The Service environment.
	// Type of deploy.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Name of the project.
	// Id of the deployment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) If the deployment has been skipped.
	// If the deployment has been skipped.
	IsSkipped *bool `json:"isSkipped,omitempty" tf:"is_skipped,omitempty"`

	// (Attributes) The status of the deployment. (see below for nested schema)
	LatestStage *LatestDeploymentLatestStageObservation `json:"latestStage,omitempty" tf:"latest_stage,omitempty"`

	// (String) When the deployment was last modified.
	// When the deployment was last modified.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (String)
	// Id of the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (String) Name of the project.
	// Name of the project.
	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	// (String) Short Id (8 character) of the deployment.
	// Short Id (8 character) of the deployment.
	ShortID *string `json:"shortId,omitempty" tf:"short_id,omitempty"`

	// (Attributes) (see below for nested schema)
	Source *LatestDeploymentSourceObservation `json:"source,omitempty" tf:"source,omitempty"`

	// (Attributes List) List of past stages. (see below for nested schema)
	Stages []LatestDeploymentStagesObservation `json:"stages,omitempty" tf:"stages,omitempty"`

	// (String) The live URL to view this deployment.
	// The live URL to view this deployment.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type LatestDeploymentParameters struct {

	// (Attributes) Configs for the project build process. (see below for nested schema)
	// +kubebuilder:validation:Optional
	BuildConfig *LatestDeploymentBuildConfigParameters `json:"buildConfig,omitempty" tf:"build_config,omitempty"`

	// (Attributes) Info about what caused the deployment. (see below for nested schema)
	// +kubebuilder:validation:Optional
	DeploymentTrigger *LatestDeploymentDeploymentTriggerParameters `json:"deploymentTrigger,omitempty" tf:"deployment_trigger,omitempty"`

	// (Attributes Map) Environment variables for build configs. (see below for nested schema)
	// +kubebuilder:validation:Optional
	EnvVars map[string]LatestDeploymentEnvVarsParameters `json:"envVars" tf:"env_vars,omitempty"`

	// (Attributes) The status of the deployment. (see below for nested schema)
	// +kubebuilder:validation:Optional
	LatestStage *LatestDeploymentLatestStageParameters `json:"latestStage,omitempty" tf:"latest_stage,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Source *LatestDeploymentSourceParameters `json:"source,omitempty" tf:"source,omitempty"`

	// (Attributes List) List of past stages. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Stages []LatestDeploymentStagesParameters `json:"stages" tf:"stages,omitempty"`
}

type LatestDeploymentSourceInitParameters struct {

	// (Attributes) (see below for nested schema)
	Config *SourceConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`
}

type LatestDeploymentSourceObservation struct {

	// (Attributes) (see below for nested schema)
	Config *SourceConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// (String) The type of environment variable.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type LatestDeploymentSourceParameters struct {

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Config *SourceConfigParameters `json:"config,omitempty" tf:"config,omitempty"`
}

type LatestDeploymentStagesInitParameters struct {
}

type LatestDeploymentStagesObservation struct {

	// (String) When the stage ended.
	// When the stage ended.
	EndedOn *string `json:"endedOn,omitempty" tf:"ended_on,omitempty"`

	// (String) Name of the project.
	// The current build stage.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) When the stage started.
	// When the stage started.
	StartedOn *string `json:"startedOn,omitempty" tf:"started_on,omitempty"`

	// (String) State of the current stage.
	// State of the current stage.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type LatestDeploymentStagesParameters struct {
}

type LatestStageInitParameters struct {
}

type LatestStageObservation struct {

	// (String) When the stage ended.
	// When the stage ended.
	EndedOn *string `json:"endedOn,omitempty" tf:"ended_on,omitempty"`

	// (String) Name of the project.
	// The current build stage.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) When the stage started.
	// When the stage started.
	StartedOn *string `json:"startedOn,omitempty" tf:"started_on,omitempty"`

	// (String) State of the current stage.
	// State of the current stage.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type LatestStageParameters struct {
}

type MetadataInitParameters struct {
}

type MetadataObservation struct {

	// (String) Where the trigger happened.
	// Where the trigger happened.
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// (String) Hash of the deployment trigger commit.
	// Hash of the deployment trigger commit.
	CommitHash *string `json:"commitHash,omitempty" tf:"commit_hash,omitempty"`

	// (String) Message of the deployment trigger commit.
	// Message of the deployment trigger commit.
	CommitMessage *string `json:"commitMessage,omitempty" tf:"commit_message,omitempty"`
}

type MetadataParameters struct {
}

type MtlsCertificatesInitParameters struct {

	// (String)
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`
}

type MtlsCertificatesObservation struct {

	// (String)
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`
}

type MtlsCertificatesParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`
}

type PlacementInitParameters struct {

	// (String) Placement mode.
	// Placement mode.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type PlacementObservation struct {

	// (String) Placement mode.
	// Placement mode.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type PlacementParameters struct {

	// (String) Placement mode.
	// Placement mode.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type PreviewEnvVarsInitParameters struct {

	// (String) The type of environment variable.
	// The type of environment variable.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Environment variable value.
	// Environment variable value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PreviewEnvVarsObservation struct {

	// (String) The type of environment variable.
	// The type of environment variable.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Environment variable value.
	// Environment variable value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PreviewEnvVarsParameters struct {

	// (String) The type of environment variable.
	// The type of environment variable.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Environment variable value.
	// Environment variable value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type PreviewInitParameters struct {

	// (Attributes Map) Constellation bindings used for Pages Functions. (see below for nested schema)
	AIBindings map[string]AIBindingsInitParameters `json:"aiBindings,omitempty" tf:"ai_bindings,omitempty"`

	// (Attributes Map) Analytics Engine bindings used for Pages Functions. (see below for nested schema)
	AnalyticsEngineDatasets map[string]AnalyticsEngineDatasetsInitParameters `json:"analyticsEngineDatasets,omitempty" tf:"analytics_engine_datasets,omitempty"`

	// (Attributes Map) Browser bindings used for Pages Functions. (see below for nested schema)
	Browsers map[string]BrowsersInitParameters `json:"browsers,omitempty" tf:"browsers,omitempty"`

	// (String) Compatibility date used for Pages Functions.
	// Compatibility date used for Pages Functions.
	CompatibilityDate *string `json:"compatibilityDate,omitempty" tf:"compatibility_date,omitempty"`

	// (List of String) Compatibility flags used for Pages Functions.
	// Compatibility flags used for Pages Functions.
	CompatibilityFlags []*string `json:"compatibilityFlags,omitempty" tf:"compatibility_flags,omitempty"`

	// (Attributes Map) D1 databases used for Pages Functions. (see below for nested schema)
	D1Databases map[string]D1DatabasesInitParameters `json:"d1Databases,omitempty" tf:"d1_databases,omitempty"`

	// (Attributes Map) Durabble Object namespaces used for Pages Functions. (see below for nested schema)
	DurableObjectNamespaces map[string]DurableObjectNamespacesInitParameters `json:"durableObjectNamespaces,omitempty" tf:"durable_object_namespaces,omitempty"`

	// (Attributes Map) Environment variables for build configs. (see below for nested schema)
	EnvVars map[string]PreviewEnvVarsInitParameters `json:"envVars,omitempty" tf:"env_vars,omitempty"`

	// (Attributes Map) Hyperdrive bindings used for Pages Functions. (see below for nested schema)
	HyperdriveBindings map[string]HyperdriveBindingsInitParameters `json:"hyperdriveBindings,omitempty" tf:"hyperdrive_bindings,omitempty"`

	// (Attributes Map) KV namespaces used for Pages Functions. (see below for nested schema)
	KvNamespaces map[string]KvNamespacesInitParameters `json:"kvNamespaces,omitempty" tf:"kv_namespaces,omitempty"`

	// (Attributes Map) mTLS bindings used for Pages Functions. (see below for nested schema)
	MtlsCertificates map[string]MtlsCertificatesInitParameters `json:"mtlsCertificates,omitempty" tf:"mtls_certificates,omitempty"`

	// (Attributes) Placement setting used for Pages Functions. (see below for nested schema)
	Placement *PlacementInitParameters `json:"placement,omitempty" tf:"placement,omitempty"`

	// (Attributes Map) Queue Producer bindings used for Pages Functions. (see below for nested schema)
	QueueProducers map[string]QueueProducersInitParameters `json:"queueProducers,omitempty" tf:"queue_producers,omitempty"`

	// (Attributes Map) R2 buckets used for Pages Functions. (see below for nested schema)
	R2Buckets map[string]R2BucketsInitParameters `json:"r2Buckets,omitempty" tf:"r2_buckets,omitempty"`

	// (Attributes Map) Services used for Pages Functions. (see below for nested schema)
	Services map[string]ServicesInitParameters `json:"services,omitempty" tf:"services,omitempty"`

	// (Attributes Map) Vectorize bindings used for Pages Functions. (see below for nested schema)
	VectorizeBindings map[string]VectorizeBindingsInitParameters `json:"vectorizeBindings,omitempty" tf:"vectorize_bindings,omitempty"`
}

type PreviewObservation struct {

	// (Attributes Map) Constellation bindings used for Pages Functions. (see below for nested schema)
	AIBindings []AIBindingsObservation `json:"aiBindings,omitempty" tf:"ai_bindings,omitempty"`

	// (Attributes Map) Analytics Engine bindings used for Pages Functions. (see below for nested schema)
	AnalyticsEngineDatasets []AnalyticsEngineDatasetsObservation `json:"analyticsEngineDatasets,omitempty" tf:"analytics_engine_datasets,omitempty"`

	// (Attributes Map) Browser bindings used for Pages Functions. (see below for nested schema)
	Browsers map[string]BrowsersParameters `json:"browsers,omitempty" tf:"browsers,omitempty"`

	// (String) Compatibility date used for Pages Functions.
	// Compatibility date used for Pages Functions.
	CompatibilityDate *string `json:"compatibilityDate,omitempty" tf:"compatibility_date,omitempty"`

	// (List of String) Compatibility flags used for Pages Functions.
	// Compatibility flags used for Pages Functions.
	CompatibilityFlags []*string `json:"compatibilityFlags,omitempty" tf:"compatibility_flags,omitempty"`

	// (Attributes Map) D1 databases used for Pages Functions. (see below for nested schema)
	D1Databases []D1DatabasesObservation `json:"d1Databases,omitempty" tf:"d1_databases,omitempty"`

	// (Attributes Map) Durabble Object namespaces used for Pages Functions. (see below for nested schema)
	DurableObjectNamespaces []DurableObjectNamespacesObservation `json:"durableObjectNamespaces,omitempty" tf:"durable_object_namespaces,omitempty"`

	// (Attributes Map) Environment variables for build configs. (see below for nested schema)
	EnvVars []PreviewEnvVarsObservation `json:"envVars,omitempty" tf:"env_vars,omitempty"`

	// (Attributes Map) Hyperdrive bindings used for Pages Functions. (see below for nested schema)
	HyperdriveBindings []HyperdriveBindingsObservation `json:"hyperdriveBindings,omitempty" tf:"hyperdrive_bindings,omitempty"`

	// (Attributes Map) KV namespaces used for Pages Functions. (see below for nested schema)
	KvNamespaces []KvNamespacesObservation `json:"kvNamespaces,omitempty" tf:"kv_namespaces,omitempty"`

	// (Attributes Map) mTLS bindings used for Pages Functions. (see below for nested schema)
	MtlsCertificates []MtlsCertificatesObservation `json:"mtlsCertificates,omitempty" tf:"mtls_certificates,omitempty"`

	// (Attributes) Placement setting used for Pages Functions. (see below for nested schema)
	Placement *PlacementObservation `json:"placement,omitempty" tf:"placement,omitempty"`

	// (Attributes Map) Queue Producer bindings used for Pages Functions. (see below for nested schema)
	QueueProducers []QueueProducersObservation `json:"queueProducers,omitempty" tf:"queue_producers,omitempty"`

	// (Attributes Map) R2 buckets used for Pages Functions. (see below for nested schema)
	R2Buckets []R2BucketsObservation `json:"r2Buckets,omitempty" tf:"r2_buckets,omitempty"`

	// (Attributes Map) Services used for Pages Functions. (see below for nested schema)
	Services []ServicesObservation `json:"services,omitempty" tf:"services,omitempty"`

	// (Attributes Map) Vectorize bindings used for Pages Functions. (see below for nested schema)
	VectorizeBindings []VectorizeBindingsObservation `json:"vectorizeBindings,omitempty" tf:"vectorize_bindings,omitempty"`
}

type PreviewParameters struct {

	// (Attributes Map) Constellation bindings used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	AIBindings map[string]AIBindingsParameters `json:"aiBindings" tf:"ai_bindings,omitempty"`

	// (Attributes Map) Analytics Engine bindings used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	AnalyticsEngineDatasets map[string]AnalyticsEngineDatasetsParameters `json:"analyticsEngineDatasets" tf:"analytics_engine_datasets,omitempty"`

	// (Attributes Map) Browser bindings used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Browsers map[string]BrowsersParameters `json:"browsers" tf:"browsers,omitempty"`

	// (String) Compatibility date used for Pages Functions.
	// Compatibility date used for Pages Functions.
	// +kubebuilder:validation:Optional
	CompatibilityDate *string `json:"compatibilityDate,omitempty" tf:"compatibility_date,omitempty"`

	// (List of String) Compatibility flags used for Pages Functions.
	// Compatibility flags used for Pages Functions.
	// +kubebuilder:validation:Optional
	CompatibilityFlags []*string `json:"compatibilityFlags,omitempty" tf:"compatibility_flags,omitempty"`

	// (Attributes Map) D1 databases used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	D1Databases map[string]D1DatabasesParameters `json:"d1Databases" tf:"d1_databases,omitempty"`

	// (Attributes Map) Durabble Object namespaces used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	DurableObjectNamespaces map[string]DurableObjectNamespacesParameters `json:"durableObjectNamespaces" tf:"durable_object_namespaces,omitempty"`

	// (Attributes Map) Environment variables for build configs. (see below for nested schema)
	// +kubebuilder:validation:Optional
	EnvVars map[string]PreviewEnvVarsParameters `json:"envVars" tf:"env_vars,omitempty"`

	// (Attributes Map) Hyperdrive bindings used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	HyperdriveBindings map[string]HyperdriveBindingsParameters `json:"hyperdriveBindings" tf:"hyperdrive_bindings,omitempty"`

	// (Attributes Map) KV namespaces used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	KvNamespaces map[string]KvNamespacesParameters `json:"kvNamespaces" tf:"kv_namespaces,omitempty"`

	// (Attributes Map) mTLS bindings used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	MtlsCertificates map[string]MtlsCertificatesParameters `json:"mtlsCertificates" tf:"mtls_certificates,omitempty"`

	// (Attributes) Placement setting used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Placement *PlacementParameters `json:"placement,omitempty" tf:"placement,omitempty"`

	// (Attributes Map) Queue Producer bindings used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	QueueProducers map[string]QueueProducersParameters `json:"queueProducers" tf:"queue_producers,omitempty"`

	// (Attributes Map) R2 buckets used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	R2Buckets map[string]R2BucketsParameters `json:"r2Buckets" tf:"r2_buckets,omitempty"`

	// (Attributes Map) Services used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Services map[string]ServicesParameters `json:"services" tf:"services,omitempty"`

	// (Attributes Map) Vectorize bindings used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	VectorizeBindings map[string]VectorizeBindingsParameters `json:"vectorizeBindings" tf:"vectorize_bindings,omitempty"`
}

type ProductionAIBindingsInitParameters struct {

	// (String)
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type ProductionAIBindingsObservation struct {

	// (String)
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type ProductionAIBindingsParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type ProductionAnalyticsEngineDatasetsInitParameters struct {

	// (String) Name of the dataset.
	// Name of the dataset.
	Dataset *string `json:"dataset,omitempty" tf:"dataset,omitempty"`
}

type ProductionAnalyticsEngineDatasetsObservation struct {

	// (String) Name of the dataset.
	// Name of the dataset.
	Dataset *string `json:"dataset,omitempty" tf:"dataset,omitempty"`
}

type ProductionAnalyticsEngineDatasetsParameters struct {

	// (String) Name of the dataset.
	// Name of the dataset.
	// +kubebuilder:validation:Optional
	Dataset *string `json:"dataset,omitempty" tf:"dataset,omitempty"`
}

type ProductionBrowsersInitParameters struct {
}

type ProductionBrowsersObservation struct {
}

type ProductionBrowsersParameters struct {
}

type ProductionD1DatabasesInitParameters struct {

	// (String) Name of the project.
	// UUID of the D1 database.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ProductionD1DatabasesObservation struct {

	// (String) Name of the project.
	// UUID of the D1 database.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ProductionD1DatabasesParameters struct {

	// (String) Name of the project.
	// UUID of the D1 database.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ProductionDurableObjectNamespacesInitParameters struct {

	// (String) ID of the Durabble Object namespace.
	// ID of the Durabble Object namespace.
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`
}

type ProductionDurableObjectNamespacesObservation struct {

	// (String) ID of the Durabble Object namespace.
	// ID of the Durabble Object namespace.
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`
}

type ProductionDurableObjectNamespacesParameters struct {

	// (String) ID of the Durabble Object namespace.
	// ID of the Durabble Object namespace.
	// +kubebuilder:validation:Optional
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`
}

type ProductionEnvVarsInitParameters struct {

	// (String) The type of environment variable.
	// The type of environment variable.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Environment variable value.
	// Environment variable value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ProductionEnvVarsObservation struct {

	// (String) The type of environment variable.
	// The type of environment variable.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Environment variable value.
	// Environment variable value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ProductionEnvVarsParameters struct {

	// (String) The type of environment variable.
	// The type of environment variable.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Environment variable value.
	// Environment variable value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type ProductionHyperdriveBindingsInitParameters struct {

	// (String) Name of the project.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ProductionHyperdriveBindingsObservation struct {

	// (String) Name of the project.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ProductionHyperdriveBindingsParameters struct {

	// (String) Name of the project.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ProductionInitParameters struct {

	// (Attributes Map) Constellation bindings used for Pages Functions. (see below for nested schema)
	AIBindings map[string]ProductionAIBindingsInitParameters `json:"aiBindings,omitempty" tf:"ai_bindings,omitempty"`

	// (Attributes Map) Analytics Engine bindings used for Pages Functions. (see below for nested schema)
	AnalyticsEngineDatasets map[string]ProductionAnalyticsEngineDatasetsInitParameters `json:"analyticsEngineDatasets,omitempty" tf:"analytics_engine_datasets,omitempty"`

	// (Attributes Map) Browser bindings used for Pages Functions. (see below for nested schema)
	Browsers map[string]ProductionBrowsersInitParameters `json:"browsers,omitempty" tf:"browsers,omitempty"`

	// (String) Compatibility date used for Pages Functions.
	// Compatibility date used for Pages Functions.
	CompatibilityDate *string `json:"compatibilityDate,omitempty" tf:"compatibility_date,omitempty"`

	// (List of String) Compatibility flags used for Pages Functions.
	// Compatibility flags used for Pages Functions.
	CompatibilityFlags []*string `json:"compatibilityFlags,omitempty" tf:"compatibility_flags,omitempty"`

	// (Attributes Map) D1 databases used for Pages Functions. (see below for nested schema)
	D1Databases map[string]ProductionD1DatabasesInitParameters `json:"d1Databases,omitempty" tf:"d1_databases,omitempty"`

	// (Attributes Map) Durabble Object namespaces used for Pages Functions. (see below for nested schema)
	DurableObjectNamespaces map[string]ProductionDurableObjectNamespacesInitParameters `json:"durableObjectNamespaces,omitempty" tf:"durable_object_namespaces,omitempty"`

	// (Attributes Map) Environment variables for build configs. (see below for nested schema)
	EnvVars map[string]ProductionEnvVarsInitParameters `json:"envVars,omitempty" tf:"env_vars,omitempty"`

	// (Attributes Map) Hyperdrive bindings used for Pages Functions. (see below for nested schema)
	HyperdriveBindings map[string]ProductionHyperdriveBindingsInitParameters `json:"hyperdriveBindings,omitempty" tf:"hyperdrive_bindings,omitempty"`

	// (Attributes Map) KV namespaces used for Pages Functions. (see below for nested schema)
	KvNamespaces map[string]ProductionKvNamespacesInitParameters `json:"kvNamespaces,omitempty" tf:"kv_namespaces,omitempty"`

	// (Attributes Map) mTLS bindings used for Pages Functions. (see below for nested schema)
	MtlsCertificates map[string]ProductionMtlsCertificatesInitParameters `json:"mtlsCertificates,omitempty" tf:"mtls_certificates,omitempty"`

	// (Attributes) Placement setting used for Pages Functions. (see below for nested schema)
	Placement *ProductionPlacementInitParameters `json:"placement,omitempty" tf:"placement,omitempty"`

	// (Attributes Map) Queue Producer bindings used for Pages Functions. (see below for nested schema)
	QueueProducers map[string]ProductionQueueProducersInitParameters `json:"queueProducers,omitempty" tf:"queue_producers,omitempty"`

	// (Attributes Map) R2 buckets used for Pages Functions. (see below for nested schema)
	R2Buckets map[string]ProductionR2BucketsInitParameters `json:"r2Buckets,omitempty" tf:"r2_buckets,omitempty"`

	// (Attributes Map) Services used for Pages Functions. (see below for nested schema)
	Services map[string]ProductionServicesInitParameters `json:"services,omitempty" tf:"services,omitempty"`

	// (Attributes Map) Vectorize bindings used for Pages Functions. (see below for nested schema)
	VectorizeBindings map[string]ProductionVectorizeBindingsInitParameters `json:"vectorizeBindings,omitempty" tf:"vectorize_bindings,omitempty"`
}

type ProductionKvNamespacesInitParameters struct {

	// (String) ID of the Durabble Object namespace.
	// ID of the KV namespace.
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`
}

type ProductionKvNamespacesObservation struct {

	// (String) ID of the Durabble Object namespace.
	// ID of the KV namespace.
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`
}

type ProductionKvNamespacesParameters struct {

	// (String) ID of the Durabble Object namespace.
	// ID of the KV namespace.
	// +kubebuilder:validation:Optional
	NamespaceID *string `json:"namespaceId,omitempty" tf:"namespace_id,omitempty"`
}

type ProductionMtlsCertificatesInitParameters struct {

	// (String)
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`
}

type ProductionMtlsCertificatesObservation struct {

	// (String)
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`
}

type ProductionMtlsCertificatesParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`
}

type ProductionObservation struct {

	// (Attributes Map) Constellation bindings used for Pages Functions. (see below for nested schema)
	AIBindings []ProductionAIBindingsObservation `json:"aiBindings,omitempty" tf:"ai_bindings,omitempty"`

	// (Attributes Map) Analytics Engine bindings used for Pages Functions. (see below for nested schema)
	AnalyticsEngineDatasets []ProductionAnalyticsEngineDatasetsObservation `json:"analyticsEngineDatasets,omitempty" tf:"analytics_engine_datasets,omitempty"`

	// (Attributes Map) Browser bindings used for Pages Functions. (see below for nested schema)
	Browsers map[string]ProductionBrowsersParameters `json:"browsers,omitempty" tf:"browsers,omitempty"`

	// (String) Compatibility date used for Pages Functions.
	// Compatibility date used for Pages Functions.
	CompatibilityDate *string `json:"compatibilityDate,omitempty" tf:"compatibility_date,omitempty"`

	// (List of String) Compatibility flags used for Pages Functions.
	// Compatibility flags used for Pages Functions.
	CompatibilityFlags []*string `json:"compatibilityFlags,omitempty" tf:"compatibility_flags,omitempty"`

	// (Attributes Map) D1 databases used for Pages Functions. (see below for nested schema)
	D1Databases []ProductionD1DatabasesObservation `json:"d1Databases,omitempty" tf:"d1_databases,omitempty"`

	// (Attributes Map) Durabble Object namespaces used for Pages Functions. (see below for nested schema)
	DurableObjectNamespaces []ProductionDurableObjectNamespacesObservation `json:"durableObjectNamespaces,omitempty" tf:"durable_object_namespaces,omitempty"`

	// (Attributes Map) Environment variables for build configs. (see below for nested schema)
	EnvVars []ProductionEnvVarsObservation `json:"envVars,omitempty" tf:"env_vars,omitempty"`

	// (Attributes Map) Hyperdrive bindings used for Pages Functions. (see below for nested schema)
	HyperdriveBindings []ProductionHyperdriveBindingsObservation `json:"hyperdriveBindings,omitempty" tf:"hyperdrive_bindings,omitempty"`

	// (Attributes Map) KV namespaces used for Pages Functions. (see below for nested schema)
	KvNamespaces []ProductionKvNamespacesObservation `json:"kvNamespaces,omitempty" tf:"kv_namespaces,omitempty"`

	// (Attributes Map) mTLS bindings used for Pages Functions. (see below for nested schema)
	MtlsCertificates []ProductionMtlsCertificatesObservation `json:"mtlsCertificates,omitempty" tf:"mtls_certificates,omitempty"`

	// (Attributes) Placement setting used for Pages Functions. (see below for nested schema)
	Placement *ProductionPlacementObservation `json:"placement,omitempty" tf:"placement,omitempty"`

	// (Attributes Map) Queue Producer bindings used for Pages Functions. (see below for nested schema)
	QueueProducers []ProductionQueueProducersObservation `json:"queueProducers,omitempty" tf:"queue_producers,omitempty"`

	// (Attributes Map) R2 buckets used for Pages Functions. (see below for nested schema)
	R2Buckets []ProductionR2BucketsObservation `json:"r2Buckets,omitempty" tf:"r2_buckets,omitempty"`

	// (Attributes Map) Services used for Pages Functions. (see below for nested schema)
	Services []ProductionServicesObservation `json:"services,omitempty" tf:"services,omitempty"`

	// (Attributes Map) Vectorize bindings used for Pages Functions. (see below for nested schema)
	VectorizeBindings []ProductionVectorizeBindingsObservation `json:"vectorizeBindings,omitempty" tf:"vectorize_bindings,omitempty"`
}

type ProductionParameters struct {

	// (Attributes Map) Constellation bindings used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	AIBindings map[string]ProductionAIBindingsParameters `json:"aiBindings" tf:"ai_bindings,omitempty"`

	// (Attributes Map) Analytics Engine bindings used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	AnalyticsEngineDatasets map[string]ProductionAnalyticsEngineDatasetsParameters `json:"analyticsEngineDatasets" tf:"analytics_engine_datasets,omitempty"`

	// (Attributes Map) Browser bindings used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Browsers map[string]ProductionBrowsersParameters `json:"browsers" tf:"browsers,omitempty"`

	// (String) Compatibility date used for Pages Functions.
	// Compatibility date used for Pages Functions.
	// +kubebuilder:validation:Optional
	CompatibilityDate *string `json:"compatibilityDate,omitempty" tf:"compatibility_date,omitempty"`

	// (List of String) Compatibility flags used for Pages Functions.
	// Compatibility flags used for Pages Functions.
	// +kubebuilder:validation:Optional
	CompatibilityFlags []*string `json:"compatibilityFlags,omitempty" tf:"compatibility_flags,omitempty"`

	// (Attributes Map) D1 databases used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	D1Databases map[string]ProductionD1DatabasesParameters `json:"d1Databases" tf:"d1_databases,omitempty"`

	// (Attributes Map) Durabble Object namespaces used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	DurableObjectNamespaces map[string]ProductionDurableObjectNamespacesParameters `json:"durableObjectNamespaces" tf:"durable_object_namespaces,omitempty"`

	// (Attributes Map) Environment variables for build configs. (see below for nested schema)
	// +kubebuilder:validation:Optional
	EnvVars map[string]ProductionEnvVarsParameters `json:"envVars" tf:"env_vars,omitempty"`

	// (Attributes Map) Hyperdrive bindings used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	HyperdriveBindings map[string]ProductionHyperdriveBindingsParameters `json:"hyperdriveBindings" tf:"hyperdrive_bindings,omitempty"`

	// (Attributes Map) KV namespaces used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	KvNamespaces map[string]ProductionKvNamespacesParameters `json:"kvNamespaces" tf:"kv_namespaces,omitempty"`

	// (Attributes Map) mTLS bindings used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	MtlsCertificates map[string]ProductionMtlsCertificatesParameters `json:"mtlsCertificates" tf:"mtls_certificates,omitempty"`

	// (Attributes) Placement setting used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Placement *ProductionPlacementParameters `json:"placement,omitempty" tf:"placement,omitempty"`

	// (Attributes Map) Queue Producer bindings used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	QueueProducers map[string]ProductionQueueProducersParameters `json:"queueProducers" tf:"queue_producers,omitempty"`

	// (Attributes Map) R2 buckets used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	R2Buckets map[string]ProductionR2BucketsParameters `json:"r2Buckets" tf:"r2_buckets,omitempty"`

	// (Attributes Map) Services used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Services map[string]ProductionServicesParameters `json:"services" tf:"services,omitempty"`

	// (Attributes Map) Vectorize bindings used for Pages Functions. (see below for nested schema)
	// +kubebuilder:validation:Optional
	VectorizeBindings map[string]ProductionVectorizeBindingsParameters `json:"vectorizeBindings" tf:"vectorize_bindings,omitempty"`
}

type ProductionPlacementInitParameters struct {

	// (String) Placement mode.
	// Placement mode.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type ProductionPlacementObservation struct {

	// (String) Placement mode.
	// Placement mode.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type ProductionPlacementParameters struct {

	// (String) Placement mode.
	// Placement mode.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type ProductionQueueProducersInitParameters struct {

	// (String) Name of the project.
	// Name of the Queue.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ProductionQueueProducersObservation struct {

	// (String) Name of the project.
	// Name of the Queue.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ProductionQueueProducersParameters struct {

	// (String) Name of the project.
	// Name of the Queue.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ProductionR2BucketsInitParameters struct {

	// (String) Jurisdiction of the R2 bucket.
	// Jurisdiction of the R2 bucket.
	Jurisdiction *string `json:"jurisdiction,omitempty" tf:"jurisdiction,omitempty"`

	// (String) Name of the project.
	// Name of the R2 bucket.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ProductionR2BucketsObservation struct {

	// (String) Jurisdiction of the R2 bucket.
	// Jurisdiction of the R2 bucket.
	Jurisdiction *string `json:"jurisdiction,omitempty" tf:"jurisdiction,omitempty"`

	// (String) Name of the project.
	// Name of the R2 bucket.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ProductionR2BucketsParameters struct {

	// (String) Jurisdiction of the R2 bucket.
	// Jurisdiction of the R2 bucket.
	// +kubebuilder:validation:Optional
	Jurisdiction *string `json:"jurisdiction,omitempty" tf:"jurisdiction,omitempty"`

	// (String) Name of the project.
	// Name of the R2 bucket.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ProductionServicesInitParameters struct {

	// (String) The entrypoint to bind to.
	// The entrypoint to bind to.
	Entrypoint *string `json:"entrypoint,omitempty" tf:"entrypoint,omitempty"`

	// (String) The Service environment.
	// The Service environment.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The Service name.
	// The Service name.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ProductionServicesObservation struct {

	// (String) The entrypoint to bind to.
	// The entrypoint to bind to.
	Entrypoint *string `json:"entrypoint,omitempty" tf:"entrypoint,omitempty"`

	// (String) The Service environment.
	// The Service environment.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The Service name.
	// The Service name.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ProductionServicesParameters struct {

	// (String) The entrypoint to bind to.
	// The entrypoint to bind to.
	// +kubebuilder:validation:Optional
	Entrypoint *string `json:"entrypoint,omitempty" tf:"entrypoint,omitempty"`

	// (String) The Service environment.
	// The Service environment.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The Service name.
	// The Service name.
	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ProductionVectorizeBindingsInitParameters struct {

	// (String)
	IndexName *string `json:"indexName,omitempty" tf:"index_name,omitempty"`
}

type ProductionVectorizeBindingsObservation struct {

	// (String)
	IndexName *string `json:"indexName,omitempty" tf:"index_name,omitempty"`
}

type ProductionVectorizeBindingsParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	IndexName *string `json:"indexName,omitempty" tf:"index_name,omitempty"`
}

type ProjectInitParameters struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) Configs for the project build process. (see below for nested schema)
	BuildConfig *BuildConfigInitParameters `json:"buildConfig,omitempty" tf:"build_config,omitempty"`

	// (Attributes) Most recent deployment to the repo. (see below for nested schema)
	CanonicalDeployment *CanonicalDeploymentInitParameters `json:"canonicalDeployment,omitempty" tf:"canonical_deployment,omitempty"`

	// (Attributes) Configs for deployments in a project. (see below for nested schema)
	DeploymentConfigs *DeploymentConfigsInitParameters `json:"deploymentConfigs,omitempty" tf:"deployment_configs,omitempty"`

	// (Attributes) Most recent deployment to the repo. (see below for nested schema)
	LatestDeployment *LatestDeploymentInitParameters `json:"latestDeployment,omitempty" tf:"latest_deployment,omitempty"`

	// (String) Production branch of the project. Used to identify production deployments.
	// Production branch of the project. Used to identify production deployments.
	ProductionBranch *string `json:"productionBranch,omitempty" tf:"production_branch,omitempty"`

	// (Attributes) (see below for nested schema)
	Source *ProjectSourceInitParameters `json:"source,omitempty" tf:"source,omitempty"`
}

type ProjectObservation struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) Configs for the project build process. (see below for nested schema)
	BuildConfig *BuildConfigObservation `json:"buildConfig,omitempty" tf:"build_config,omitempty"`

	// (Attributes) Most recent deployment to the repo. (see below for nested schema)
	CanonicalDeployment *CanonicalDeploymentObservation `json:"canonicalDeployment,omitempty" tf:"canonical_deployment,omitempty"`

	// (String) When the project was created.
	// When the project was created.
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (Attributes) Configs for deployments in a project. (see below for nested schema)
	DeploymentConfigs *DeploymentConfigsObservation `json:"deploymentConfigs,omitempty" tf:"deployment_configs,omitempty"`

	// (List of String) A list of associated custom domains for the project.
	// A list of associated custom domains for the project.
	Domains []*string `json:"domains,omitempty" tf:"domains,omitempty"`

	// (String) Name of the project.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes) Most recent deployment to the repo. (see below for nested schema)
	LatestDeployment *LatestDeploymentObservation `json:"latestDeployment,omitempty" tf:"latest_deployment,omitempty"`

	// (String) Production branch of the project. Used to identify production deployments.
	// Production branch of the project. Used to identify production deployments.
	ProductionBranch *string `json:"productionBranch,omitempty" tf:"production_branch,omitempty"`

	// (Attributes) (see below for nested schema)
	Source *ProjectSourceObservation `json:"source,omitempty" tf:"source,omitempty"`

	// (String) The Cloudflare subdomain associated with the project.
	// The Cloudflare subdomain associated with the project.
	Subdomain *string `json:"subdomain,omitempty" tf:"subdomain,omitempty"`
}

type ProjectParameters struct {

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) Configs for the project build process. (see below for nested schema)
	// +kubebuilder:validation:Optional
	BuildConfig *BuildConfigParameters `json:"buildConfig,omitempty" tf:"build_config,omitempty"`

	// (Attributes) Most recent deployment to the repo. (see below for nested schema)
	// +kubebuilder:validation:Optional
	CanonicalDeployment *CanonicalDeploymentParameters `json:"canonicalDeployment,omitempty" tf:"canonical_deployment,omitempty"`

	// (Attributes) Configs for deployments in a project. (see below for nested schema)
	// +kubebuilder:validation:Optional
	DeploymentConfigs *DeploymentConfigsParameters `json:"deploymentConfigs,omitempty" tf:"deployment_configs,omitempty"`

	// (Attributes) Most recent deployment to the repo. (see below for nested schema)
	// +kubebuilder:validation:Optional
	LatestDeployment *LatestDeploymentParameters `json:"latestDeployment,omitempty" tf:"latest_deployment,omitempty"`

	// (String) Production branch of the project. Used to identify production deployments.
	// Production branch of the project. Used to identify production deployments.
	// +kubebuilder:validation:Optional
	ProductionBranch *string `json:"productionBranch,omitempty" tf:"production_branch,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Source *ProjectSourceParameters `json:"source,omitempty" tf:"source,omitempty"`
}

type ProjectSourceConfigInitParameters struct {
}

type ProjectSourceConfigObservation struct {

	// (Boolean)
	DeploymentsEnabled *bool `json:"deploymentsEnabled,omitempty" tf:"deployments_enabled,omitempty"`

	// (String)
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (List of String)
	PathExcludes []*string `json:"pathExcludes,omitempty" tf:"path_excludes,omitempty"`

	// (List of String)
	PathIncludes []*string `json:"pathIncludes,omitempty" tf:"path_includes,omitempty"`

	// (Boolean)
	PrCommentsEnabled *bool `json:"prCommentsEnabled,omitempty" tf:"pr_comments_enabled,omitempty"`

	// (List of String)
	PreviewBranchExcludes []*string `json:"previewBranchExcludes,omitempty" tf:"preview_branch_excludes,omitempty"`

	// (List of String)
	PreviewBranchIncludes []*string `json:"previewBranchIncludes,omitempty" tf:"preview_branch_includes,omitempty"`

	// (String)
	PreviewDeploymentSetting *string `json:"previewDeploymentSetting,omitempty" tf:"preview_deployment_setting,omitempty"`

	// (String) Production branch of the project. Used to identify production deployments.
	ProductionBranch *string `json:"productionBranch,omitempty" tf:"production_branch,omitempty"`

	// (Boolean)
	ProductionDeploymentsEnabled *bool `json:"productionDeploymentsEnabled,omitempty" tf:"production_deployments_enabled,omitempty"`

	// (String)
	RepoName *string `json:"repoName,omitempty" tf:"repo_name,omitempty"`
}

type ProjectSourceConfigParameters struct {
}

type ProjectSourceInitParameters struct {

	// (Attributes) (see below for nested schema)
	Config *ProjectSourceConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`
}

type ProjectSourceObservation struct {

	// (Attributes) (see below for nested schema)
	Config *ProjectSourceConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// (String) The type of environment variable.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ProjectSourceParameters struct {

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Config *ProjectSourceConfigParameters `json:"config,omitempty" tf:"config,omitempty"`
}

type QueueProducersInitParameters struct {

	// (String) Name of the project.
	// Name of the Queue.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type QueueProducersObservation struct {

	// (String) Name of the project.
	// Name of the Queue.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type QueueProducersParameters struct {

	// (String) Name of the project.
	// Name of the Queue.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type R2BucketsInitParameters struct {

	// (String) Jurisdiction of the R2 bucket.
	// Jurisdiction of the R2 bucket.
	Jurisdiction *string `json:"jurisdiction,omitempty" tf:"jurisdiction,omitempty"`

	// (String) Name of the project.
	// Name of the R2 bucket.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type R2BucketsObservation struct {

	// (String) Jurisdiction of the R2 bucket.
	// Jurisdiction of the R2 bucket.
	Jurisdiction *string `json:"jurisdiction,omitempty" tf:"jurisdiction,omitempty"`

	// (String) Name of the project.
	// Name of the R2 bucket.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type R2BucketsParameters struct {

	// (String) Jurisdiction of the R2 bucket.
	// Jurisdiction of the R2 bucket.
	// +kubebuilder:validation:Optional
	Jurisdiction *string `json:"jurisdiction,omitempty" tf:"jurisdiction,omitempty"`

	// (String) Name of the project.
	// Name of the R2 bucket.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ServicesInitParameters struct {

	// (String) The entrypoint to bind to.
	// The entrypoint to bind to.
	Entrypoint *string `json:"entrypoint,omitempty" tf:"entrypoint,omitempty"`

	// (String) The Service environment.
	// The Service environment.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The Service name.
	// The Service name.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ServicesObservation struct {

	// (String) The entrypoint to bind to.
	// The entrypoint to bind to.
	Entrypoint *string `json:"entrypoint,omitempty" tf:"entrypoint,omitempty"`

	// (String) The Service environment.
	// The Service environment.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The Service name.
	// The Service name.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ServicesParameters struct {

	// (String) The entrypoint to bind to.
	// The entrypoint to bind to.
	// +kubebuilder:validation:Optional
	Entrypoint *string `json:"entrypoint,omitempty" tf:"entrypoint,omitempty"`

	// (String) The Service environment.
	// The Service environment.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The Service name.
	// The Service name.
	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type SourceConfigInitParameters struct {
}

type SourceConfigObservation struct {

	// (Boolean)
	DeploymentsEnabled *bool `json:"deploymentsEnabled,omitempty" tf:"deployments_enabled,omitempty"`

	// (String)
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (List of String)
	PathExcludes []*string `json:"pathExcludes,omitempty" tf:"path_excludes,omitempty"`

	// (List of String)
	PathIncludes []*string `json:"pathIncludes,omitempty" tf:"path_includes,omitempty"`

	// (Boolean)
	PrCommentsEnabled *bool `json:"prCommentsEnabled,omitempty" tf:"pr_comments_enabled,omitempty"`

	// (List of String)
	PreviewBranchExcludes []*string `json:"previewBranchExcludes,omitempty" tf:"preview_branch_excludes,omitempty"`

	// (List of String)
	PreviewBranchIncludes []*string `json:"previewBranchIncludes,omitempty" tf:"preview_branch_includes,omitempty"`

	// (String)
	PreviewDeploymentSetting *string `json:"previewDeploymentSetting,omitempty" tf:"preview_deployment_setting,omitempty"`

	// (String) Production branch of the project. Used to identify production deployments.
	ProductionBranch *string `json:"productionBranch,omitempty" tf:"production_branch,omitempty"`

	// (Boolean)
	ProductionDeploymentsEnabled *bool `json:"productionDeploymentsEnabled,omitempty" tf:"production_deployments_enabled,omitempty"`

	// (String)
	RepoName *string `json:"repoName,omitempty" tf:"repo_name,omitempty"`
}

type SourceConfigParameters struct {
}

type SourceInitParameters struct {

	// (Attributes) (see below for nested schema)
	Config *ConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`
}

type SourceObservation struct {

	// (Attributes) (see below for nested schema)
	Config *ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// (String) The type of environment variable.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SourceParameters struct {

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Config *ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`
}

type StagesInitParameters struct {
}

type StagesObservation struct {

	// (String) When the stage ended.
	// When the stage ended.
	EndedOn *string `json:"endedOn,omitempty" tf:"ended_on,omitempty"`

	// (String) Name of the project.
	// The current build stage.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) When the stage started.
	// When the stage started.
	StartedOn *string `json:"startedOn,omitempty" tf:"started_on,omitempty"`

	// (String) State of the current stage.
	// State of the current stage.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type StagesParameters struct {
}

type VectorizeBindingsInitParameters struct {

	// (String)
	IndexName *string `json:"indexName,omitempty" tf:"index_name,omitempty"`
}

type VectorizeBindingsObservation struct {

	// (String)
	IndexName *string `json:"indexName,omitempty" tf:"index_name,omitempty"`
}

type VectorizeBindingsParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	IndexName *string `json:"indexName,omitempty" tf:"index_name,omitempty"`
}

// ProjectSpec defines the desired state of Project
type ProjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectInitParameters `json:"initProvider,omitempty"`
}

// ProjectStatus defines the observed state of Project.
type ProjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Project is the Schema for the Projects API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Project struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	Spec   ProjectSpec   `json:"spec"`
	Status ProjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectList contains a list of Projects
type ProjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Project `json:"items"`
}

// Repository type metadata.
var (
	Project_Kind             = "Project"
	Project_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Project_Kind}.String()
	Project_KindAPIVersion   = Project_Kind + "." + CRDGroupVersion.String()
	Project_GroupVersionKind = CRDGroupVersion.WithKind(Project_Kind)
)

func init() {
	SchemeBuilder.Register(&Project{}, &ProjectList{})
}
