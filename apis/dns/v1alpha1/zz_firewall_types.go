// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttackMitigationInitParameters struct {

	// prefix attacks to protect upstream DNS servers
	// When enabled, automatically mitigate random-prefix attacks to protect upstream DNS servers
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) Only mitigate attacks when upstream servers seem unhealthy
	// Only mitigate attacks when upstream servers seem unhealthy
	OnlyWhenUpstreamUnhealthy *bool `json:"onlyWhenUpstreamUnhealthy,omitempty" tf:"only_when_upstream_unhealthy,omitempty"`
}

type AttackMitigationObservation struct {

	// prefix attacks to protect upstream DNS servers
	// When enabled, automatically mitigate random-prefix attacks to protect upstream DNS servers
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) Only mitigate attacks when upstream servers seem unhealthy
	// Only mitigate attacks when upstream servers seem unhealthy
	OnlyWhenUpstreamUnhealthy *bool `json:"onlyWhenUpstreamUnhealthy,omitempty" tf:"only_when_upstream_unhealthy,omitempty"`
}

type AttackMitigationParameters struct {

	// prefix attacks to protect upstream DNS servers
	// When enabled, automatically mitigate random-prefix attacks to protect upstream DNS servers
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) Only mitigate attacks when upstream servers seem unhealthy
	// Only mitigate attacks when upstream servers seem unhealthy
	// +kubebuilder:validation:Optional
	OnlyWhenUpstreamUnhealthy *bool `json:"onlyWhenUpstreamUnhealthy,omitempty" tf:"only_when_upstream_unhealthy,omitempty"`
}

type FirewallInitParameters struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) Attack mitigation settings (see below for nested schema)
	AttackMitigation *AttackMitigationInitParameters `json:"attackMitigation,omitempty" tf:"attack_mitigation,omitempty"`

	// (Boolean) Whether to refuse to answer queries for the ANY type
	// Whether to refuse to answer queries for the ANY type
	DeprecateAnyRequests *bool `json:"deprecateAnyRequests,omitempty" tf:"deprecate_any_requests,omitempty"`

	// (Boolean) Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
	// Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
	EcsFallback *bool `json:"ecsFallback,omitempty" tf:"ecs_fallback,omitempty"`

	// (Number) Maximum DNS cache TTL This setting sets an upper bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Higher TTLs will be decreased to the maximum defined here for caching purposes.
	// Maximum DNS cache TTL This setting sets an upper bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Higher TTLs will be decreased to the maximum defined here for caching purposes.
	MaximumCacheTTL *float64 `json:"maximumCacheTtl,omitempty" tf:"maximum_cache_ttl,omitempty"`

	// (Number) Minimum DNS cache TTL This setting sets a lower bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Lower TTLs will be increased to the minimum defined here for caching purposes.
	// Minimum DNS cache TTL This setting sets a lower bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Lower TTLs will be increased to the minimum defined here for caching purposes.
	MinimumCacheTTL *float64 `json:"minimumCacheTtl,omitempty" tf:"minimum_cache_ttl,omitempty"`

	// (Number) Negative DNS cache TTL This setting controls how long DNS Firewall should cache negative responses (e.g., NXDOMAIN) from the upstream servers.
	// Negative DNS cache TTL This setting controls how long DNS Firewall should cache negative responses (e.g., NXDOMAIN) from the upstream servers.
	NegativeCacheTTL *float64 `json:"negativeCacheTtl,omitempty" tf:"negative_cache_ttl,omitempty"`

	// (Number) Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)
	// Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)
	Ratelimit *float64 `json:"ratelimit,omitempty" tf:"ratelimit,omitempty"`

	// (Number) Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)
	// Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)
	Retries *float64 `json:"retries,omitempty" tf:"retries,omitempty"`

	// (List of String)
	UpstreamIps []*string `json:"upstreamIps,omitempty" tf:"upstream_ips,omitempty"`
}

type FirewallObservation struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) Attack mitigation settings (see below for nested schema)
	AttackMitigation *AttackMitigationObservation `json:"attackMitigation,omitempty" tf:"attack_mitigation,omitempty"`

	// (List of String)
	DNSFirewallIps []*string `json:"dnsFirewallIps,omitempty" tf:"dns_firewall_ips,omitempty"`

	// (Boolean) Whether to refuse to answer queries for the ANY type
	// Whether to refuse to answer queries for the ANY type
	DeprecateAnyRequests *bool `json:"deprecateAnyRequests,omitempty" tf:"deprecate_any_requests,omitempty"`

	// (Boolean) Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
	// Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
	EcsFallback *bool `json:"ecsFallback,omitempty" tf:"ecs_fallback,omitempty"`

	// (String) Identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) Maximum DNS cache TTL This setting sets an upper bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Higher TTLs will be decreased to the maximum defined here for caching purposes.
	// Maximum DNS cache TTL This setting sets an upper bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Higher TTLs will be decreased to the maximum defined here for caching purposes.
	MaximumCacheTTL *float64 `json:"maximumCacheTtl,omitempty" tf:"maximum_cache_ttl,omitempty"`

	// (Number) Minimum DNS cache TTL This setting sets a lower bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Lower TTLs will be increased to the minimum defined here for caching purposes.
	// Minimum DNS cache TTL This setting sets a lower bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Lower TTLs will be increased to the minimum defined here for caching purposes.
	MinimumCacheTTL *float64 `json:"minimumCacheTtl,omitempty" tf:"minimum_cache_ttl,omitempty"`

	// (String) Last modification of DNS Firewall cluster
	// Last modification of DNS Firewall cluster
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (Number) Negative DNS cache TTL This setting controls how long DNS Firewall should cache negative responses (e.g., NXDOMAIN) from the upstream servers.
	// Negative DNS cache TTL This setting controls how long DNS Firewall should cache negative responses (e.g., NXDOMAIN) from the upstream servers.
	NegativeCacheTTL *float64 `json:"negativeCacheTtl,omitempty" tf:"negative_cache_ttl,omitempty"`

	// (Number) Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)
	// Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)
	Ratelimit *float64 `json:"ratelimit,omitempty" tf:"ratelimit,omitempty"`

	// (Number) Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)
	// Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)
	Retries *float64 `json:"retries,omitempty" tf:"retries,omitempty"`

	// (List of String)
	UpstreamIps []*string `json:"upstreamIps,omitempty" tf:"upstream_ips,omitempty"`
}

type FirewallParameters struct {

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes) Attack mitigation settings (see below for nested schema)
	// +kubebuilder:validation:Optional
	AttackMitigation *AttackMitigationParameters `json:"attackMitigation,omitempty" tf:"attack_mitigation,omitempty"`

	// (Boolean) Whether to refuse to answer queries for the ANY type
	// Whether to refuse to answer queries for the ANY type
	// +kubebuilder:validation:Optional
	DeprecateAnyRequests *bool `json:"deprecateAnyRequests,omitempty" tf:"deprecate_any_requests,omitempty"`

	// (Boolean) Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
	// Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
	// +kubebuilder:validation:Optional
	EcsFallback *bool `json:"ecsFallback,omitempty" tf:"ecs_fallback,omitempty"`

	// (Number) Maximum DNS cache TTL This setting sets an upper bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Higher TTLs will be decreased to the maximum defined here for caching purposes.
	// Maximum DNS cache TTL This setting sets an upper bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Higher TTLs will be decreased to the maximum defined here for caching purposes.
	// +kubebuilder:validation:Optional
	MaximumCacheTTL *float64 `json:"maximumCacheTtl,omitempty" tf:"maximum_cache_ttl,omitempty"`

	// (Number) Minimum DNS cache TTL This setting sets a lower bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Lower TTLs will be increased to the minimum defined here for caching purposes.
	// Minimum DNS cache TTL This setting sets a lower bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Lower TTLs will be increased to the minimum defined here for caching purposes.
	// +kubebuilder:validation:Optional
	MinimumCacheTTL *float64 `json:"minimumCacheTtl,omitempty" tf:"minimum_cache_ttl,omitempty"`

	// (Number) Negative DNS cache TTL This setting controls how long DNS Firewall should cache negative responses (e.g., NXDOMAIN) from the upstream servers.
	// Negative DNS cache TTL This setting controls how long DNS Firewall should cache negative responses (e.g., NXDOMAIN) from the upstream servers.
	// +kubebuilder:validation:Optional
	NegativeCacheTTL *float64 `json:"negativeCacheTtl,omitempty" tf:"negative_cache_ttl,omitempty"`

	// (Number) Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)
	// Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)
	// +kubebuilder:validation:Optional
	Ratelimit *float64 `json:"ratelimit,omitempty" tf:"ratelimit,omitempty"`

	// (Number) Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)
	// Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)
	// +kubebuilder:validation:Optional
	Retries *float64 `json:"retries,omitempty" tf:"retries,omitempty"`

	// (List of String)
	// +kubebuilder:validation:Optional
	UpstreamIps []*string `json:"upstreamIps,omitempty" tf:"upstream_ips,omitempty"`
}

// FirewallSpec defines the desired state of Firewall
type FirewallSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FirewallParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FirewallInitParameters `json:"initProvider,omitempty"`
}

// FirewallStatus defines the observed state of Firewall.
type FirewallStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FirewallObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Firewall is the Schema for the Firewalls API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Firewall struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.upstreamIps) || (has(self.initProvider) && has(self.initProvider.upstreamIps))",message="spec.forProvider.upstreamIps is a required parameter"
	Spec   FirewallSpec   `json:"spec"`
	Status FirewallStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallList contains a list of Firewalls
type FirewallList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Firewall `json:"items"`
}

// Repository type metadata.
var (
	Firewall_Kind             = "Firewall"
	Firewall_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Firewall_Kind}.String()
	Firewall_KindAPIVersion   = Firewall_Kind + "." + CRDGroupVersion.String()
	Firewall_GroupVersionKind = CRDGroupVersion.WithKind(Firewall_Kind)
)

func init() {
	SchemeBuilder.Register(&Firewall{}, &FirewallList{})
}
