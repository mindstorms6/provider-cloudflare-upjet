// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ZoneTransfersIncomingInitParameters struct {

	// (Number) How often should a secondary zone auto refresh regardless of DNS NOTIFY.
	// Not applicable for primary zones.
	// How often should a secondary zone auto refresh regardless of DNS NOTIFY.
	// Not applicable for primary zones.
	AutoRefreshSeconds *float64 `json:"autoRefreshSeconds,omitempty" tf:"auto_refresh_seconds,omitempty"`

	// (List of String) A list of peer tags.
	// A list of peer tags.
	Peers []*string `json:"peers,omitempty" tf:"peers,omitempty"`

	// (String)
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ZoneTransfersIncomingObservation struct {

	// (Number) How often should a secondary zone auto refresh regardless of DNS NOTIFY.
	// Not applicable for primary zones.
	// How often should a secondary zone auto refresh regardless of DNS NOTIFY.
	// Not applicable for primary zones.
	AutoRefreshSeconds *float64 `json:"autoRefreshSeconds,omitempty" tf:"auto_refresh_seconds,omitempty"`

	// (String) The time for a specific event.
	// The time for a specific event.
	CheckedTime *string `json:"checkedTime,omitempty" tf:"checked_time,omitempty"`

	// (String) The time for a specific event.
	// The time for a specific event.
	CreatedTime *string `json:"createdTime,omitempty" tf:"created_time,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The time for a specific event.
	// The time for a specific event.
	ModifiedTime *string `json:"modifiedTime,omitempty" tf:"modified_time,omitempty"`

	// (List of String) A list of peer tags.
	// A list of peer tags.
	Peers []*string `json:"peers,omitempty" tf:"peers,omitempty"`

	// (Number) The serial number of the SOA for the given zone.
	// The serial number of the SOA for the given zone.
	SoaSerial *float64 `json:"soaSerial,omitempty" tf:"soa_serial,omitempty"`

	// (String)
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ZoneTransfersIncomingParameters struct {

	// (Number) How often should a secondary zone auto refresh regardless of DNS NOTIFY.
	// Not applicable for primary zones.
	// How often should a secondary zone auto refresh regardless of DNS NOTIFY.
	// Not applicable for primary zones.
	// +kubebuilder:validation:Optional
	AutoRefreshSeconds *float64 `json:"autoRefreshSeconds,omitempty" tf:"auto_refresh_seconds,omitempty"`

	// (List of String) A list of peer tags.
	// A list of peer tags.
	// +kubebuilder:validation:Optional
	Peers []*string `json:"peers,omitempty" tf:"peers,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// ZoneTransfersIncomingSpec defines the desired state of ZoneTransfersIncoming
type ZoneTransfersIncomingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ZoneTransfersIncomingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ZoneTransfersIncomingInitParameters `json:"initProvider,omitempty"`
}

// ZoneTransfersIncomingStatus defines the observed state of ZoneTransfersIncoming.
type ZoneTransfersIncomingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ZoneTransfersIncomingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ZoneTransfersIncoming is the Schema for the ZoneTransfersIncomings API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type ZoneTransfersIncoming struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.autoRefreshSeconds) || (has(self.initProvider) && has(self.initProvider.autoRefreshSeconds))",message="spec.forProvider.autoRefreshSeconds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.peers) || (has(self.initProvider) && has(self.initProvider.peers))",message="spec.forProvider.peers is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   ZoneTransfersIncomingSpec   `json:"spec"`
	Status ZoneTransfersIncomingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneTransfersIncomingList contains a list of ZoneTransfersIncomings
type ZoneTransfersIncomingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ZoneTransfersIncoming `json:"items"`
}

// Repository type metadata.
var (
	ZoneTransfersIncoming_Kind             = "ZoneTransfersIncoming"
	ZoneTransfersIncoming_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ZoneTransfersIncoming_Kind}.String()
	ZoneTransfersIncoming_KindAPIVersion   = ZoneTransfersIncoming_Kind + "." + CRDGroupVersion.String()
	ZoneTransfersIncoming_GroupVersionKind = CRDGroupVersion.WithKind(ZoneTransfersIncoming_Kind)
)

func init() {
	SchemeBuilder.Register(&ZoneTransfersIncoming{}, &ZoneTransfersIncomingList{})
}
