// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ZoneTransfersPeerInitParameters struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
	// IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Boolean) Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
	// Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
	IxfrEnable *bool `json:"ixfrEnable,omitempty" tf:"ixfr_enable,omitempty"`

	// (Number) DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
	// DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) TSIG authentication will be used for zone transfer if configured.
	// TSIG authentication will be used for zone transfer if configured.
	TsigID *string `json:"tsigId,omitempty" tf:"tsig_id,omitempty"`
}

type ZoneTransfersPeerObservation struct {

	// (String)
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
	// IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Boolean) Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
	// Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
	IxfrEnable *bool `json:"ixfrEnable,omitempty" tf:"ixfr_enable,omitempty"`

	// (Number) DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
	// DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) TSIG authentication will be used for zone transfer if configured.
	// TSIG authentication will be used for zone transfer if configured.
	TsigID *string `json:"tsigId,omitempty" tf:"tsig_id,omitempty"`
}

type ZoneTransfersPeerParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
	// IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Boolean) Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
	// Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
	// +kubebuilder:validation:Optional
	IxfrEnable *bool `json:"ixfrEnable,omitempty" tf:"ixfr_enable,omitempty"`

	// (Number) DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
	// DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) TSIG authentication will be used for zone transfer if configured.
	// TSIG authentication will be used for zone transfer if configured.
	// +kubebuilder:validation:Optional
	TsigID *string `json:"tsigId,omitempty" tf:"tsig_id,omitempty"`
}

// ZoneTransfersPeerSpec defines the desired state of ZoneTransfersPeer
type ZoneTransfersPeerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ZoneTransfersPeerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ZoneTransfersPeerInitParameters `json:"initProvider,omitempty"`
}

// ZoneTransfersPeerStatus defines the observed state of ZoneTransfersPeer.
type ZoneTransfersPeerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ZoneTransfersPeerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ZoneTransfersPeer is the Schema for the ZoneTransfersPeers API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type ZoneTransfersPeer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	Spec   ZoneTransfersPeerSpec   `json:"spec"`
	Status ZoneTransfersPeerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneTransfersPeerList contains a list of ZoneTransfersPeers
type ZoneTransfersPeerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ZoneTransfersPeer `json:"items"`
}

// Repository type metadata.
var (
	ZoneTransfersPeer_Kind             = "ZoneTransfersPeer"
	ZoneTransfersPeer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ZoneTransfersPeer_Kind}.String()
	ZoneTransfersPeer_KindAPIVersion   = ZoneTransfersPeer_Kind + "." + CRDGroupVersion.String()
	ZoneTransfersPeer_GroupVersionKind = CRDGroupVersion.WithKind(ZoneTransfersPeer_Kind)
)

func init() {
	SchemeBuilder.Register(&ZoneTransfersPeer{}, &ZoneTransfersPeerList{})
}
