// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WatermarkInitParameters struct {

	// (String) The account identifier tag.
	// The account identifier tag.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The image file to upload.
	// The image file to upload.
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// (String) The unique identifier for a watermark profile.
	// The unique identifier for a watermark profile.
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// transparent, setting this to 1.0 will not make the image completely opaque.
	// The translucency of the image. A value of `0.0` makes the image completely transparent, and `1.0` makes the image completely opaque. Note that if the image is already semi-transparent, setting this to `1.0` will not make the image completely opaque.
	Opacity *float64 `json:"opacity,omitempty" tf:"opacity,omitempty"`

	// (Number) The whitespace between the adjacent edges (determined by position) of the video and the image. 0.0 indicates no padding, and 1.0 indicates a fully padded video width or length, as determined by the algorithm.
	// The whitespace between the adjacent edges (determined by position) of the video and the image. `0.0` indicates no padding, and `1.0` indicates a fully padded video width or length, as determined by the algorithm.
	Padding *float64 `json:"padding,omitempty" tf:"padding,omitempty"`

	// (String) The location of the image. Valid positions are: upperRight, upperLeft, lowerLeft, lowerRight, and center. Note that center ignores the padding parameter.
	// The location of the image. Valid positions are: `upperRight`, `upperLeft`, `lowerLeft`, `lowerRight`, and `center`. Note that `center` ignores the `padding` parameter.
	Position *string `json:"position,omitempty" tf:"position,omitempty"`

	// is), and 1.0 fills the entire video.
	// The size of the image relative to the overall size of the video. This parameter will adapt to horizontal and vertical videos automatically. `0.0` indicates no scaling (use the size of the image as-is), and `1.0 `fills the entire video.
	Scale *float64 `json:"scale,omitempty" tf:"scale,omitempty"`
}

type WatermarkObservation struct {

	// (String) The account identifier tag.
	// The account identifier tag.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The date and a time a watermark profile was created.
	// The date and a time a watermark profile was created.
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	// (String) The source URL for a downloaded image. If the watermark profile was created via direct upload, this field is null.
	// The source URL for a downloaded image. If the watermark profile was created via direct upload, this field is null.
	DownloadedFrom *string `json:"downloadedFrom,omitempty" tf:"downloaded_from,omitempty"`

	// (String) The image file to upload.
	// The image file to upload.
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// (Number) The height of the image in pixels.
	// The height of the image in pixels.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The unique identifier for a watermark profile.
	// The unique identifier for a watermark profile.
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// transparent, setting this to 1.0 will not make the image completely opaque.
	// The translucency of the image. A value of `0.0` makes the image completely transparent, and `1.0` makes the image completely opaque. Note that if the image is already semi-transparent, setting this to `1.0` will not make the image completely opaque.
	Opacity *float64 `json:"opacity,omitempty" tf:"opacity,omitempty"`

	// (Number) The whitespace between the adjacent edges (determined by position) of the video and the image. 0.0 indicates no padding, and 1.0 indicates a fully padded video width or length, as determined by the algorithm.
	// The whitespace between the adjacent edges (determined by position) of the video and the image. `0.0` indicates no padding, and `1.0` indicates a fully padded video width or length, as determined by the algorithm.
	Padding *float64 `json:"padding,omitempty" tf:"padding,omitempty"`

	// (String) The location of the image. Valid positions are: upperRight, upperLeft, lowerLeft, lowerRight, and center. Note that center ignores the padding parameter.
	// The location of the image. Valid positions are: `upperRight`, `upperLeft`, `lowerLeft`, `lowerRight`, and `center`. Note that `center` ignores the `padding` parameter.
	Position *string `json:"position,omitempty" tf:"position,omitempty"`

	// is), and 1.0 fills the entire video.
	// The size of the image relative to the overall size of the video. This parameter will adapt to horizontal and vertical videos automatically. `0.0` indicates no scaling (use the size of the image as-is), and `1.0 `fills the entire video.
	Scale *float64 `json:"scale,omitempty" tf:"scale,omitempty"`

	// (Number) The size of the image in bytes.
	// The size of the image in bytes.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// (String) The unique identifier for a watermark profile.
	// The unique identifier for a watermark profile.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// (Number) The width of the image in pixels.
	// The width of the image in pixels.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type WatermarkParameters struct {

	// (String) The account identifier tag.
	// The account identifier tag.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The image file to upload.
	// The image file to upload.
	// +kubebuilder:validation:Optional
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// (String) The unique identifier for a watermark profile.
	// The unique identifier for a watermark profile.
	// +kubebuilder:validation:Optional
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// transparent, setting this to 1.0 will not make the image completely opaque.
	// The translucency of the image. A value of `0.0` makes the image completely transparent, and `1.0` makes the image completely opaque. Note that if the image is already semi-transparent, setting this to `1.0` will not make the image completely opaque.
	// +kubebuilder:validation:Optional
	Opacity *float64 `json:"opacity,omitempty" tf:"opacity,omitempty"`

	// (Number) The whitespace between the adjacent edges (determined by position) of the video and the image. 0.0 indicates no padding, and 1.0 indicates a fully padded video width or length, as determined by the algorithm.
	// The whitespace between the adjacent edges (determined by position) of the video and the image. `0.0` indicates no padding, and `1.0` indicates a fully padded video width or length, as determined by the algorithm.
	// +kubebuilder:validation:Optional
	Padding *float64 `json:"padding,omitempty" tf:"padding,omitempty"`

	// (String) The location of the image. Valid positions are: upperRight, upperLeft, lowerLeft, lowerRight, and center. Note that center ignores the padding parameter.
	// The location of the image. Valid positions are: `upperRight`, `upperLeft`, `lowerLeft`, `lowerRight`, and `center`. Note that `center` ignores the `padding` parameter.
	// +kubebuilder:validation:Optional
	Position *string `json:"position,omitempty" tf:"position,omitempty"`

	// is), and 1.0 fills the entire video.
	// The size of the image relative to the overall size of the video. This parameter will adapt to horizontal and vertical videos automatically. `0.0` indicates no scaling (use the size of the image as-is), and `1.0 `fills the entire video.
	// +kubebuilder:validation:Optional
	Scale *float64 `json:"scale,omitempty" tf:"scale,omitempty"`
}

// WatermarkSpec defines the desired state of Watermark
type WatermarkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WatermarkParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WatermarkInitParameters `json:"initProvider,omitempty"`
}

// WatermarkStatus defines the observed state of Watermark.
type WatermarkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WatermarkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Watermark is the Schema for the Watermarks API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Watermark struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.file) || (has(self.initProvider) && has(self.initProvider.file))",message="spec.forProvider.file is a required parameter"
	Spec   WatermarkSpec   `json:"spec"`
	Status WatermarkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WatermarkList contains a list of Watermarks
type WatermarkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Watermark `json:"items"`
}

// Repository type metadata.
var (
	Watermark_Kind             = "Watermark"
	Watermark_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Watermark_Kind}.String()
	Watermark_KindAPIVersion   = Watermark_Kind + "." + CRDGroupVersion.String()
	Watermark_GroupVersionKind = CRDGroupVersion.WithKind(Watermark_Kind)
)

func init() {
	SchemeBuilder.Register(&Watermark{}, &WatermarkList{})
}
