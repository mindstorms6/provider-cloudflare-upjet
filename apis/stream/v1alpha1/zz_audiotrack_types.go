// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AudioTrackInitParameters struct {

	// (String) The account identifier tag.
	// The account identifier tag.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The unique identifier for an additional audio track.
	// The unique identifier for an additional audio track.
	AudioIdentifier *string `json:"audioIdentifier,omitempty" tf:"audio_identifier,omitempty"`

	// (Boolean) Denotes whether the audio track will be played by default in a player.
	// Denotes whether the audio track will be played by default in a player.
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// generated unique identifier for a media item.
	// A Cloudflare-generated unique identifier for a media item.
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (String) A string to uniquely identify the track amongst other audio track labels for the specified video.
	// A string to uniquely identify the track amongst other audio track labels for the specified video.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`
}

type AudioTrackObservation struct {

	// (String) The account identifier tag.
	// The account identifier tag.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The unique identifier for an additional audio track.
	// The unique identifier for an additional audio track.
	AudioIdentifier *string `json:"audioIdentifier,omitempty" tf:"audio_identifier,omitempty"`

	// (Boolean) Denotes whether the audio track will be played by default in a player.
	// Denotes whether the audio track will be played by default in a player.
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// generated unique identifier for a media item.
	// A Cloudflare-generated unique identifier for a media item.
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (String) A string to uniquely identify the track amongst other audio track labels for the specified video.
	// A string to uniquely identify the track amongst other audio track labels for the specified video.
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// (String) Specifies the processing status of the video.
	// Specifies the processing status of the video.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// generated unique identifier for a media item.
	// A Cloudflare-generated unique identifier for a media item.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type AudioTrackParameters struct {

	// (String) The account identifier tag.
	// The account identifier tag.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The unique identifier for an additional audio track.
	// The unique identifier for an additional audio track.
	// +kubebuilder:validation:Optional
	AudioIdentifier *string `json:"audioIdentifier,omitempty" tf:"audio_identifier,omitempty"`

	// (Boolean) Denotes whether the audio track will be played by default in a player.
	// Denotes whether the audio track will be played by default in a player.
	// +kubebuilder:validation:Optional
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// generated unique identifier for a media item.
	// A Cloudflare-generated unique identifier for a media item.
	// +kubebuilder:validation:Optional
	Identifier *string `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (String) A string to uniquely identify the track amongst other audio track labels for the specified video.
	// A string to uniquely identify the track amongst other audio track labels for the specified video.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`
}

// AudioTrackSpec defines the desired state of AudioTrack
type AudioTrackSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AudioTrackParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AudioTrackInitParameters `json:"initProvider,omitempty"`
}

// AudioTrackStatus defines the observed state of AudioTrack.
type AudioTrackStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AudioTrackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AudioTrack is the Schema for the AudioTracks API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type AudioTrack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.identifier) || (has(self.initProvider) && has(self.initProvider.identifier))",message="spec.forProvider.identifier is a required parameter"
	Spec   AudioTrackSpec   `json:"spec"`
	Status AudioTrackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AudioTrackList contains a list of AudioTracks
type AudioTrackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AudioTrack `json:"items"`
}

// Repository type metadata.
var (
	AudioTrack_Kind             = "AudioTrack"
	AudioTrack_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AudioTrack_Kind}.String()
	AudioTrack_KindAPIVersion   = AudioTrack_Kind + "." + CRDGroupVersion.String()
	AudioTrack_GroupVersionKind = CRDGroupVersion.WithKind(AudioTrack_Kind)
)

func init() {
	SchemeBuilder.Register(&AudioTrack{}, &AudioTrackList{})
}
