// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RetentionInitParameters struct {

	// (Boolean) The log retention flag for Logpull API.
	// The log retention flag for Logpull API.
	Flag *bool `json:"flag,omitempty" tf:"flag,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RetentionObservation struct {

	// (Boolean) The log retention flag for Logpull API.
	// The log retention flag for Logpull API.
	Flag *bool `json:"flag,omitempty" tf:"flag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RetentionParameters struct {

	// (Boolean) The log retention flag for Logpull API.
	// The log retention flag for Logpull API.
	// +kubebuilder:validation:Optional
	Flag *bool `json:"flag,omitempty" tf:"flag,omitempty"`

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// RetentionSpec defines the desired state of Retention
type RetentionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RetentionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RetentionInitParameters `json:"initProvider,omitempty"`
}

// RetentionStatus defines the observed state of Retention.
type RetentionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RetentionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Retention is the Schema for the Retentions API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Retention struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   RetentionSpec   `json:"spec"`
	Status RetentionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RetentionList contains a list of Retentions
type RetentionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Retention `json:"items"`
}

// Repository type metadata.
var (
	Retention_Kind             = "Retention"
	Retention_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Retention_Kind}.String()
	Retention_KindAPIVersion   = Retention_Kind + "." + CRDGroupVersion.String()
	Retention_GroupVersionKind = CRDGroupVersion.WithKind(Retention_Kind)
)

func init() {
	SchemeBuilder.Register(&Retention{}, &RetentionList{})
}
