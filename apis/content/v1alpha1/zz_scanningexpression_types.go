// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BodyInitParameters struct {

	// (String) Ruleset expression to use in matching content objects
	// Ruleset expression to use in matching content objects
	Payload *string `json:"payload,omitempty" tf:"payload,omitempty"`
}

type BodyObservation struct {

	// (String) Ruleset expression to use in matching content objects
	// Ruleset expression to use in matching content objects
	Payload *string `json:"payload,omitempty" tf:"payload,omitempty"`
}

type BodyParameters struct {

	// (String) Ruleset expression to use in matching content objects
	// Ruleset expression to use in matching content objects
	// +kubebuilder:validation:Optional
	Payload *string `json:"payload" tf:"payload,omitempty"`
}

type ScanningExpressionInitParameters struct {

	// (Attributes List) (see below for nested schema)
	Body []BodyInitParameters `json:"body,omitempty" tf:"body,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ScanningExpressionObservation struct {

	// (Attributes List) (see below for nested schema)
	Body []BodyObservation `json:"body,omitempty" tf:"body,omitempty"`

	// (String) The unique ID for this custom scan expression
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Ruleset expression to use in matching content objects
	// Ruleset expression to use in matching content objects
	Payload *string `json:"payload,omitempty" tf:"payload,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ScanningExpressionParameters struct {

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Body []BodyParameters `json:"body,omitempty" tf:"body,omitempty"`

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// ScanningExpressionSpec defines the desired state of ScanningExpression
type ScanningExpressionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScanningExpressionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ScanningExpressionInitParameters `json:"initProvider,omitempty"`
}

// ScanningExpressionStatus defines the observed state of ScanningExpression.
type ScanningExpressionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScanningExpressionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ScanningExpression is the Schema for the ScanningExpressions API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type ScanningExpression struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.body) || (has(self.initProvider) && has(self.initProvider.body))",message="spec.forProvider.body is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   ScanningExpressionSpec   `json:"spec"`
	Status ScanningExpressionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScanningExpressionList contains a list of ScanningExpressions
type ScanningExpressionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ScanningExpression `json:"items"`
}

// Repository type metadata.
var (
	ScanningExpression_Kind             = "ScanningExpression"
	ScanningExpression_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ScanningExpression_Kind}.String()
	ScanningExpression_KindAPIVersion   = ScanningExpression_Kind + "." + CRDGroupVersion.String()
	ScanningExpression_GroupVersionKind = CRDGroupVersion.WithKind(ScanningExpression_Kind)
)

func init() {
	SchemeBuilder.Register(&ScanningExpression{}, &ScanningExpressionList{})
}
