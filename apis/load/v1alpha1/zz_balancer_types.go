// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdaptiveRoutingInitParameters struct {

	// downtime failover of requests to healthy origins from alternate pools, when no healthy alternate exists in the same pool, according to the failover order defined by traffic and origin steering. When set false (the default) zero-downtime failover will only occur between origins within the same pool. See session_affinity_attributes for control over when sessions are broken or reassigned.
	// Extends zero-downtime failover of requests to healthy origins from alternate pools, when no healthy alternate exists in the same pool, according to the failover order defined by traffic and origin steering. When set false (the default) zero-downtime failover will only occur between origins within the same pool. See `session_affinity_attributes` for control over when sessions are broken or reassigned.
	FailoverAcrossPools *bool `json:"failoverAcrossPools,omitempty" tf:"failover_across_pools,omitempty"`
}

type AdaptiveRoutingObservation struct {

	// downtime failover of requests to healthy origins from alternate pools, when no healthy alternate exists in the same pool, according to the failover order defined by traffic and origin steering. When set false (the default) zero-downtime failover will only occur between origins within the same pool. See session_affinity_attributes for control over when sessions are broken or reassigned.
	// Extends zero-downtime failover of requests to healthy origins from alternate pools, when no healthy alternate exists in the same pool, according to the failover order defined by traffic and origin steering. When set false (the default) zero-downtime failover will only occur between origins within the same pool. See `session_affinity_attributes` for control over when sessions are broken or reassigned.
	FailoverAcrossPools *bool `json:"failoverAcrossPools,omitempty" tf:"failover_across_pools,omitempty"`
}

type AdaptiveRoutingParameters struct {

	// downtime failover of requests to healthy origins from alternate pools, when no healthy alternate exists in the same pool, according to the failover order defined by traffic and origin steering. When set false (the default) zero-downtime failover will only occur between origins within the same pool. See session_affinity_attributes for control over when sessions are broken or reassigned.
	// Extends zero-downtime failover of requests to healthy origins from alternate pools, when no healthy alternate exists in the same pool, according to the failover order defined by traffic and origin steering. When set false (the default) zero-downtime failover will only occur between origins within the same pool. See `session_affinity_attributes` for control over when sessions are broken or reassigned.
	// +kubebuilder:validation:Optional
	FailoverAcrossPools *bool `json:"failoverAcrossPools,omitempty" tf:"failover_across_pools,omitempty"`
}

type BalancerInitParameters struct {

	// downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin. (see below for nested schema)
	AdaptiveRouting *AdaptiveRoutingInitParameters `json:"adaptiveRouting,omitempty" tf:"adaptive_routing,omitempty"`

	// (Map of List of String) A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region_pool mapping if it exists else to default_pools.
	// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region_pool mapping if it exists else to default_pools.
	CountryPools map[string][]*string `json:"countryPools,omitempty" tf:"country_pools,omitempty"`

	// (List of String) A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
	// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
	DefaultPools []*string `json:"defaultPools,omitempty" tf:"default_pools,omitempty"`

	// (String) Object description.
	// Object description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether to enable (the default) this load balancer.
	// Whether to enable (the default) this load balancer.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The pool ID to use when all other pools are detected as unhealthy.
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPool *string `json:"fallbackPool,omitempty" tf:"fallback_pool,omitempty"`

	// based steering for non-proxied requests. See steering_policy to learn how steering is affected. (see below for nested schema)
	LocationStrategy *LocationStrategyInitParameters `json:"locationStrategy,omitempty" tf:"location_strategy,omitempty"`

	// (List of String) List of networks where Load Balancer or Pool is enabled.
	// List of networks where Load Balancer or Pool is enabled.
	Networks []*string `json:"networks,omitempty" tf:"networks,omitempty"`

	// (Map of List of String) (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country_pool, then region_pool mapping if it exists else to default_pools.
	// (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country_pool, then region_pool mapping if it exists else to default_pools.
	PopPools map[string][]*string `json:"popPools,omitempty" tf:"pop_pools,omitempty"`

	// (Boolean) Whether the hostname should be gray clouded (false) or orange clouded (true).
	// Whether the hostname should be gray clouded (false) or orange clouded (true).
	Proxied *bool `json:"proxied,omitempty" tf:"proxied,omitempty"`

	// (Attributes) Configures pool weights.
	RandomSteering *RandomSteeringInitParameters `json:"randomSteering,omitempty" tf:"random_steering,omitempty"`

	// (Map of List of String) A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	RegionPools map[string][]*string `json:"regionPools,omitempty" tf:"region_pools,omitempty"`

	// (Attributes List) BETA Field Not General Access: A list of rules for this load balancer to execute. (see below for nested schema)
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) Specifies the type of session affinity the load balancer should use unless specified as "none". The supported types are:
	// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are:
	// - `"cookie"`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used.
	// - `"ip_cookie"`: Behaves the same as `"cookie"` except the initial origin selection is stable and based on the client's ip address.
	// - `"header"`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `session_affinity_ttl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `session_affinity_attributes` for additional required configuration.
	SessionAffinity *string `json:"sessionAffinity,omitempty" tf:"session_affinity,omitempty"`

	// (Attributes) Configures attributes for session affinity. (see below for nested schema)
	SessionAffinityAttributes *BalancerSessionAffinityAttributesInitParameters `json:"sessionAffinityAttributes,omitempty" tf:"session_affinity_attributes,omitempty"`

	// (Number) Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per session_affinity policy are:
	// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are:
	// - `"cookie"` / `"ip_cookie"`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800].
	// - `"header"`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven't been used for the number of seconds specified.
	SessionAffinityTTL *float64 `json:"sessionAffinityTtl,omitempty" tf:"session_affinity_ttl,omitempty"`

	// (String) Steering Policy for this load balancer.
	// Steering Policy for this load balancer.
	// - `"off"`: Use `default_pools`.
	// - `"geo"`: Use `region_pools`/`country_pools`/`pop_pools`. For non-proxied requests, the country for `country_pools` is determined by `location_strategy`.
	// - `"random"`: Select a pool randomly.
	// - `"dynamic_latency"`: Use round trip time to select the closest pool in default_pools (requires pool health checks).
	// - `"proximity"`: Use the pools' latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by `location_strategy` for non-proxied requests.
	// - `"least_outstanding_requests"`: Select a pool by taking into consideration `random_steering` weights, as well as each pool's number of outstanding requests. Pools with more pending requests are weighted proportionately less relative to others.
	// - `"least_connections"`: Select a pool by taking into consideration `random_steering` weights, as well as each pool's number of open connections. Pools with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections.
	// - `""`: Will map to `"geo"` if you use `region_pools`/`country_pools`/`pop_pools` otherwise `"off"`.
	SteeringPolicy *string `json:"steeringPolicy,omitempty" tf:"steering_policy,omitempty"`

	// clouded (unproxied) load balancers.
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// (String)
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type BalancerObservation struct {

	// downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin. (see below for nested schema)
	AdaptiveRouting *AdaptiveRoutingObservation `json:"adaptiveRouting,omitempty" tf:"adaptive_routing,omitempty"`

	// (Map of List of String) A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region_pool mapping if it exists else to default_pools.
	// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region_pool mapping if it exists else to default_pools.
	CountryPools map[string][]*string `json:"countryPools,omitempty" tf:"country_pools,omitempty"`

	// (String)
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (List of String) A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
	// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
	DefaultPools []*string `json:"defaultPools,omitempty" tf:"default_pools,omitempty"`

	// (String) Object description.
	// Object description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether to enable (the default) this load balancer.
	// Whether to enable (the default) this load balancer.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The pool ID to use when all other pools are detected as unhealthy.
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPool *string `json:"fallbackPool,omitempty" tf:"fallback_pool,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// based steering for non-proxied requests. See steering_policy to learn how steering is affected. (see below for nested schema)
	LocationStrategy *LocationStrategyObservation `json:"locationStrategy,omitempty" tf:"location_strategy,omitempty"`

	// (String)
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (List of String) List of networks where Load Balancer or Pool is enabled.
	// List of networks where Load Balancer or Pool is enabled.
	Networks []*string `json:"networks,omitempty" tf:"networks,omitempty"`

	// (Map of List of String) (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country_pool, then region_pool mapping if it exists else to default_pools.
	// (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country_pool, then region_pool mapping if it exists else to default_pools.
	PopPools map[string][]*string `json:"popPools,omitempty" tf:"pop_pools,omitempty"`

	// (Boolean) Whether the hostname should be gray clouded (false) or orange clouded (true).
	// Whether the hostname should be gray clouded (false) or orange clouded (true).
	Proxied *bool `json:"proxied,omitempty" tf:"proxied,omitempty"`

	// (Attributes) Configures pool weights.
	RandomSteering *RandomSteeringObservation `json:"randomSteering,omitempty" tf:"random_steering,omitempty"`

	// (Map of List of String) A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	RegionPools map[string][]*string `json:"regionPools,omitempty" tf:"region_pools,omitempty"`

	// (Attributes List) BETA Field Not General Access: A list of rules for this load balancer to execute. (see below for nested schema)
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) Specifies the type of session affinity the load balancer should use unless specified as "none". The supported types are:
	// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are:
	// - `"cookie"`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used.
	// - `"ip_cookie"`: Behaves the same as `"cookie"` except the initial origin selection is stable and based on the client's ip address.
	// - `"header"`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `session_affinity_ttl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `session_affinity_attributes` for additional required configuration.
	SessionAffinity *string `json:"sessionAffinity,omitempty" tf:"session_affinity,omitempty"`

	// (Attributes) Configures attributes for session affinity. (see below for nested schema)
	SessionAffinityAttributes *BalancerSessionAffinityAttributesObservation `json:"sessionAffinityAttributes,omitempty" tf:"session_affinity_attributes,omitempty"`

	// (Number) Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per session_affinity policy are:
	// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are:
	// - `"cookie"` / `"ip_cookie"`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800].
	// - `"header"`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven't been used for the number of seconds specified.
	SessionAffinityTTL *float64 `json:"sessionAffinityTtl,omitempty" tf:"session_affinity_ttl,omitempty"`

	// (String) Steering Policy for this load balancer.
	// Steering Policy for this load balancer.
	// - `"off"`: Use `default_pools`.
	// - `"geo"`: Use `region_pools`/`country_pools`/`pop_pools`. For non-proxied requests, the country for `country_pools` is determined by `location_strategy`.
	// - `"random"`: Select a pool randomly.
	// - `"dynamic_latency"`: Use round trip time to select the closest pool in default_pools (requires pool health checks).
	// - `"proximity"`: Use the pools' latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by `location_strategy` for non-proxied requests.
	// - `"least_outstanding_requests"`: Select a pool by taking into consideration `random_steering` weights, as well as each pool's number of outstanding requests. Pools with more pending requests are weighted proportionately less relative to others.
	// - `"least_connections"`: Select a pool by taking into consideration `random_steering` weights, as well as each pool's number of open connections. Pools with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections.
	// - `""`: Will map to `"geo"` if you use `region_pools`/`country_pools`/`pop_pools` otherwise `"off"`.
	SteeringPolicy *string `json:"steeringPolicy,omitempty" tf:"steering_policy,omitempty"`

	// clouded (unproxied) load balancers.
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// (String)
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type BalancerParameters struct {

	// downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin. (see below for nested schema)
	// +kubebuilder:validation:Optional
	AdaptiveRouting *AdaptiveRoutingParameters `json:"adaptiveRouting,omitempty" tf:"adaptive_routing,omitempty"`

	// (Map of List of String) A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region_pool mapping if it exists else to default_pools.
	// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region_pool mapping if it exists else to default_pools.
	// +kubebuilder:validation:Optional
	CountryPools map[string][]*string `json:"countryPools,omitempty" tf:"country_pools,omitempty"`

	// (List of String) A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
	// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
	// +kubebuilder:validation:Optional
	DefaultPools []*string `json:"defaultPools,omitempty" tf:"default_pools,omitempty"`

	// (String) Object description.
	// Object description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether to enable (the default) this load balancer.
	// Whether to enable (the default) this load balancer.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The pool ID to use when all other pools are detected as unhealthy.
	// The pool ID to use when all other pools are detected as unhealthy.
	// +kubebuilder:validation:Optional
	FallbackPool *string `json:"fallbackPool,omitempty" tf:"fallback_pool,omitempty"`

	// based steering for non-proxied requests. See steering_policy to learn how steering is affected. (see below for nested schema)
	// +kubebuilder:validation:Optional
	LocationStrategy *LocationStrategyParameters `json:"locationStrategy,omitempty" tf:"location_strategy,omitempty"`

	// (List of String) List of networks where Load Balancer or Pool is enabled.
	// List of networks where Load Balancer or Pool is enabled.
	// +kubebuilder:validation:Optional
	Networks []*string `json:"networks,omitempty" tf:"networks,omitempty"`

	// (Map of List of String) (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country_pool, then region_pool mapping if it exists else to default_pools.
	// (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country_pool, then region_pool mapping if it exists else to default_pools.
	// +kubebuilder:validation:Optional
	PopPools map[string][]*string `json:"popPools,omitempty" tf:"pop_pools,omitempty"`

	// (Boolean) Whether the hostname should be gray clouded (false) or orange clouded (true).
	// Whether the hostname should be gray clouded (false) or orange clouded (true).
	// +kubebuilder:validation:Optional
	Proxied *bool `json:"proxied,omitempty" tf:"proxied,omitempty"`

	// (Attributes) Configures pool weights.
	// +kubebuilder:validation:Optional
	RandomSteering *RandomSteeringParameters `json:"randomSteering,omitempty" tf:"random_steering,omitempty"`

	// (Map of List of String) A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	// +kubebuilder:validation:Optional
	RegionPools map[string][]*string `json:"regionPools,omitempty" tf:"region_pools,omitempty"`

	// (Attributes List) BETA Field Not General Access: A list of rules for this load balancer to execute. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) Specifies the type of session affinity the load balancer should use unless specified as "none". The supported types are:
	// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are:
	// - `"cookie"`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used.
	// - `"ip_cookie"`: Behaves the same as `"cookie"` except the initial origin selection is stable and based on the client's ip address.
	// - `"header"`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `session_affinity_ttl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `session_affinity_attributes` for additional required configuration.
	// +kubebuilder:validation:Optional
	SessionAffinity *string `json:"sessionAffinity,omitempty" tf:"session_affinity,omitempty"`

	// (Attributes) Configures attributes for session affinity. (see below for nested schema)
	// +kubebuilder:validation:Optional
	SessionAffinityAttributes *BalancerSessionAffinityAttributesParameters `json:"sessionAffinityAttributes,omitempty" tf:"session_affinity_attributes,omitempty"`

	// (Number) Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per session_affinity policy are:
	// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are:
	// - `"cookie"` / `"ip_cookie"`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800].
	// - `"header"`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven't been used for the number of seconds specified.
	// +kubebuilder:validation:Optional
	SessionAffinityTTL *float64 `json:"sessionAffinityTtl,omitempty" tf:"session_affinity_ttl,omitempty"`

	// (String) Steering Policy for this load balancer.
	// Steering Policy for this load balancer.
	// - `"off"`: Use `default_pools`.
	// - `"geo"`: Use `region_pools`/`country_pools`/`pop_pools`. For non-proxied requests, the country for `country_pools` is determined by `location_strategy`.
	// - `"random"`: Select a pool randomly.
	// - `"dynamic_latency"`: Use round trip time to select the closest pool in default_pools (requires pool health checks).
	// - `"proximity"`: Use the pools' latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by `location_strategy` for non-proxied requests.
	// - `"least_outstanding_requests"`: Select a pool by taking into consideration `random_steering` weights, as well as each pool's number of outstanding requests. Pools with more pending requests are weighted proportionately less relative to others.
	// - `"least_connections"`: Select a pool by taking into consideration `random_steering` weights, as well as each pool's number of open connections. Pools with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections.
	// - `""`: Will map to `"geo"` if you use `region_pools`/`country_pools`/`pop_pools` otherwise `"off"`.
	// +kubebuilder:validation:Optional
	SteeringPolicy *string `json:"steeringPolicy,omitempty" tf:"steering_policy,omitempty"`

	// clouded (unproxied) load balancers.
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type BalancerSessionAffinityAttributesInitParameters struct {

	// (Number) Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.
	// Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.
	DrainDuration *float64 `json:"drainDuration,omitempty" tf:"drain_duration,omitempty"`

	// name-1>,<cookie-name-2>" (example) where everything after the colon is a comma-separated list of cookie names. Providing only "cookie" will result in all cookies being used. The default max number of HTTP header names that can be provided depends on your plan: 5 for Enterprise, 1 for all other plans.
	// Configures the names of HTTP headers to base session affinity on when header `session_affinity` is enabled. At least one HTTP header name must be provided. To specify the exact cookies to be used, include an item in the following format: `"cookie:<cookie-name-1>,<cookie-name-2>"` (example) where everything after the colon is a comma-separated list of cookie names. Providing only `"cookie"` will result in all cookies being used. The default max number of HTTP header names that can be provided depends on your plan: 5 for Enterprise, 1 for all other plans.
	Headers []*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Boolean) When header session_affinity is enabled, this option can be used to specify how HTTP headers on load balancing requests will be used. The supported values are:
	// When header `session_affinity` is enabled, this option can be used to specify how HTTP headers on load balancing requests will be used. The supported values are:
	// - `"true"`: Load balancing requests must contain *all* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren't created.
	// - `"false"`: Load balancing requests must contain *at least one* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren't created.
	RequireAllHeaders *bool `json:"requireAllHeaders,omitempty" tf:"require_all_headers,omitempty"`

	// (String) Configures the SameSite attribute on session affinity cookie. Value "Auto" will be translated to "Lax" or "None" depending if Always Use HTTPS is enabled. Note: when using value "None", the secure attribute can not be set to "Never".
	// Configures the SameSite attribute on session affinity cookie. Value "Auto" will be translated to "Lax" or "None" depending if Always Use HTTPS is enabled. Note: when using value "None", the secure attribute can not be set to "Never".
	Samesite *string `json:"samesite,omitempty" tf:"samesite,omitempty"`

	// Cookie header, "Never" indicates the Secure attribute will not be set, and "Auto" will set the Secure attribute depending if Always Use HTTPS is enabled.
	// Configures the Secure attribute on session affinity cookie. Value "Always" indicates the Secure attribute will be set in the Set-Cookie header, "Never" indicates the Secure attribute will not be set, and "Auto" will set the Secure attribute depending if Always Use HTTPS is enabled.
	Secure *string `json:"secure,omitempty" tf:"secure,omitempty"`

	// downtime failover between origins within a pool when session affinity is enabled. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. The supported values are:
	// Configures the zero-downtime failover between origins within a pool when session affinity is enabled. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. The supported values are:
	// - `"none"`: No failover takes place for sessions pinned to the origin (default).
	// - `"temporary"`: Traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping.
	// - `"sticky"`: The session affinity cookie is updated and subsequent requests are sent to the new origin. Note: Zero-downtime failover with sticky sessions is currently not supported for session affinity by header.
	ZeroDowntimeFailover *string `json:"zeroDowntimeFailover,omitempty" tf:"zero_downtime_failover,omitempty"`
}

type BalancerSessionAffinityAttributesObservation struct {

	// (Number) Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.
	// Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.
	DrainDuration *float64 `json:"drainDuration,omitempty" tf:"drain_duration,omitempty"`

	// name-1>,<cookie-name-2>" (example) where everything after the colon is a comma-separated list of cookie names. Providing only "cookie" will result in all cookies being used. The default max number of HTTP header names that can be provided depends on your plan: 5 for Enterprise, 1 for all other plans.
	// Configures the names of HTTP headers to base session affinity on when header `session_affinity` is enabled. At least one HTTP header name must be provided. To specify the exact cookies to be used, include an item in the following format: `"cookie:<cookie-name-1>,<cookie-name-2>"` (example) where everything after the colon is a comma-separated list of cookie names. Providing only `"cookie"` will result in all cookies being used. The default max number of HTTP header names that can be provided depends on your plan: 5 for Enterprise, 1 for all other plans.
	Headers []*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Boolean) When header session_affinity is enabled, this option can be used to specify how HTTP headers on load balancing requests will be used. The supported values are:
	// When header `session_affinity` is enabled, this option can be used to specify how HTTP headers on load balancing requests will be used. The supported values are:
	// - `"true"`: Load balancing requests must contain *all* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren't created.
	// - `"false"`: Load balancing requests must contain *at least one* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren't created.
	RequireAllHeaders *bool `json:"requireAllHeaders,omitempty" tf:"require_all_headers,omitempty"`

	// (String) Configures the SameSite attribute on session affinity cookie. Value "Auto" will be translated to "Lax" or "None" depending if Always Use HTTPS is enabled. Note: when using value "None", the secure attribute can not be set to "Never".
	// Configures the SameSite attribute on session affinity cookie. Value "Auto" will be translated to "Lax" or "None" depending if Always Use HTTPS is enabled. Note: when using value "None", the secure attribute can not be set to "Never".
	Samesite *string `json:"samesite,omitempty" tf:"samesite,omitempty"`

	// Cookie header, "Never" indicates the Secure attribute will not be set, and "Auto" will set the Secure attribute depending if Always Use HTTPS is enabled.
	// Configures the Secure attribute on session affinity cookie. Value "Always" indicates the Secure attribute will be set in the Set-Cookie header, "Never" indicates the Secure attribute will not be set, and "Auto" will set the Secure attribute depending if Always Use HTTPS is enabled.
	Secure *string `json:"secure,omitempty" tf:"secure,omitempty"`

	// downtime failover between origins within a pool when session affinity is enabled. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. The supported values are:
	// Configures the zero-downtime failover between origins within a pool when session affinity is enabled. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. The supported values are:
	// - `"none"`: No failover takes place for sessions pinned to the origin (default).
	// - `"temporary"`: Traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping.
	// - `"sticky"`: The session affinity cookie is updated and subsequent requests are sent to the new origin. Note: Zero-downtime failover with sticky sessions is currently not supported for session affinity by header.
	ZeroDowntimeFailover *string `json:"zeroDowntimeFailover,omitempty" tf:"zero_downtime_failover,omitempty"`
}

type BalancerSessionAffinityAttributesParameters struct {

	// (Number) Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.
	// Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.
	// +kubebuilder:validation:Optional
	DrainDuration *float64 `json:"drainDuration,omitempty" tf:"drain_duration,omitempty"`

	// name-1>,<cookie-name-2>" (example) where everything after the colon is a comma-separated list of cookie names. Providing only "cookie" will result in all cookies being used. The default max number of HTTP header names that can be provided depends on your plan: 5 for Enterprise, 1 for all other plans.
	// Configures the names of HTTP headers to base session affinity on when header `session_affinity` is enabled. At least one HTTP header name must be provided. To specify the exact cookies to be used, include an item in the following format: `"cookie:<cookie-name-1>,<cookie-name-2>"` (example) where everything after the colon is a comma-separated list of cookie names. Providing only `"cookie"` will result in all cookies being used. The default max number of HTTP header names that can be provided depends on your plan: 5 for Enterprise, 1 for all other plans.
	// +kubebuilder:validation:Optional
	Headers []*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Boolean) When header session_affinity is enabled, this option can be used to specify how HTTP headers on load balancing requests will be used. The supported values are:
	// When header `session_affinity` is enabled, this option can be used to specify how HTTP headers on load balancing requests will be used. The supported values are:
	// - `"true"`: Load balancing requests must contain *all* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren't created.
	// - `"false"`: Load balancing requests must contain *at least one* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren't created.
	// +kubebuilder:validation:Optional
	RequireAllHeaders *bool `json:"requireAllHeaders,omitempty" tf:"require_all_headers,omitempty"`

	// (String) Configures the SameSite attribute on session affinity cookie. Value "Auto" will be translated to "Lax" or "None" depending if Always Use HTTPS is enabled. Note: when using value "None", the secure attribute can not be set to "Never".
	// Configures the SameSite attribute on session affinity cookie. Value "Auto" will be translated to "Lax" or "None" depending if Always Use HTTPS is enabled. Note: when using value "None", the secure attribute can not be set to "Never".
	// +kubebuilder:validation:Optional
	Samesite *string `json:"samesite,omitempty" tf:"samesite,omitempty"`

	// Cookie header, "Never" indicates the Secure attribute will not be set, and "Auto" will set the Secure attribute depending if Always Use HTTPS is enabled.
	// Configures the Secure attribute on session affinity cookie. Value "Always" indicates the Secure attribute will be set in the Set-Cookie header, "Never" indicates the Secure attribute will not be set, and "Auto" will set the Secure attribute depending if Always Use HTTPS is enabled.
	// +kubebuilder:validation:Optional
	Secure *string `json:"secure,omitempty" tf:"secure,omitempty"`

	// downtime failover between origins within a pool when session affinity is enabled. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. The supported values are:
	// Configures the zero-downtime failover between origins within a pool when session affinity is enabled. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. The supported values are:
	// - `"none"`: No failover takes place for sessions pinned to the origin (default).
	// - `"temporary"`: Traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping.
	// - `"sticky"`: The session affinity cookie is updated and subsequent requests are sent to the new origin. Note: Zero-downtime failover with sticky sessions is currently not supported for session affinity by header.
	// +kubebuilder:validation:Optional
	ZeroDowntimeFailover *string `json:"zeroDowntimeFailover,omitempty" tf:"zero_downtime_failover,omitempty"`
}

type FixedResponseInitParameters struct {

	// Type' header to include in the response.
	// The http 'Content-Type' header to include in the response.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// (String) The http 'Location' header to include in the response.
	// The http 'Location' header to include in the response.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// (String) Text to include as the http body.
	// Text to include as the http body.
	MessageBody *string `json:"messageBody,omitempty" tf:"message_body,omitempty"`

	// (Number) The http status code to respond with.
	// The http status code to respond with.
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`
}

type FixedResponseObservation struct {

	// Type' header to include in the response.
	// The http 'Content-Type' header to include in the response.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// (String) The http 'Location' header to include in the response.
	// The http 'Location' header to include in the response.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// (String) Text to include as the http body.
	// Text to include as the http body.
	MessageBody *string `json:"messageBody,omitempty" tf:"message_body,omitempty"`

	// (Number) The http status code to respond with.
	// The http status code to respond with.
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`
}

type FixedResponseParameters struct {

	// Type' header to include in the response.
	// The http 'Content-Type' header to include in the response.
	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// (String) The http 'Location' header to include in the response.
	// The http 'Location' header to include in the response.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// (String) Text to include as the http body.
	// Text to include as the http body.
	// +kubebuilder:validation:Optional
	MessageBody *string `json:"messageBody,omitempty" tf:"message_body,omitempty"`

	// (Number) The http status code to respond with.
	// The http status code to respond with.
	// +kubebuilder:validation:Optional
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`
}

type LocationStrategyInitParameters struct {

	// (String) Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful.
	// Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful.
	// - `"pop"`: Use the Cloudflare PoP location.
	// - `"resolver_ip"`: Use the DNS resolver GeoIP location. If the GeoIP lookup is unsuccessful, use the Cloudflare PoP location.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (String) Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location.
	// Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location.
	// - `"always"`: Always prefer ECS.
	// - `"never"`: Never prefer ECS.
	// - `"proximity"`: Prefer ECS only when `steering_policy="proximity"`.
	// - `"geo"`: Prefer ECS only when `steering_policy="geo"`.
	PreferEcs *string `json:"preferEcs,omitempty" tf:"prefer_ecs,omitempty"`
}

type LocationStrategyObservation struct {

	// (String) Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful.
	// Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful.
	// - `"pop"`: Use the Cloudflare PoP location.
	// - `"resolver_ip"`: Use the DNS resolver GeoIP location. If the GeoIP lookup is unsuccessful, use the Cloudflare PoP location.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (String) Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location.
	// Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location.
	// - `"always"`: Always prefer ECS.
	// - `"never"`: Never prefer ECS.
	// - `"proximity"`: Prefer ECS only when `steering_policy="proximity"`.
	// - `"geo"`: Prefer ECS only when `steering_policy="geo"`.
	PreferEcs *string `json:"preferEcs,omitempty" tf:"prefer_ecs,omitempty"`
}

type LocationStrategyParameters struct {

	// (String) Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful.
	// Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful.
	// - `"pop"`: Use the Cloudflare PoP location.
	// - `"resolver_ip"`: Use the DNS resolver GeoIP location. If the GeoIP lookup is unsuccessful, use the Cloudflare PoP location.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (String) Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location.
	// Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location.
	// - `"always"`: Always prefer ECS.
	// - `"never"`: Never prefer ECS.
	// - `"proximity"`: Prefer ECS only when `steering_policy="proximity"`.
	// - `"geo"`: Prefer ECS only when `steering_policy="geo"`.
	// +kubebuilder:validation:Optional
	PreferEcs *string `json:"preferEcs,omitempty" tf:"prefer_ecs,omitempty"`
}

type OverridesAdaptiveRoutingInitParameters struct {

	// downtime failover of requests to healthy origins from alternate pools, when no healthy alternate exists in the same pool, according to the failover order defined by traffic and origin steering. When set false (the default) zero-downtime failover will only occur between origins within the same pool. See session_affinity_attributes for control over when sessions are broken or reassigned.
	// Extends zero-downtime failover of requests to healthy origins from alternate pools, when no healthy alternate exists in the same pool, according to the failover order defined by traffic and origin steering. When set false (the default) zero-downtime failover will only occur between origins within the same pool. See `session_affinity_attributes` for control over when sessions are broken or reassigned.
	FailoverAcrossPools *bool `json:"failoverAcrossPools,omitempty" tf:"failover_across_pools,omitempty"`
}

type OverridesAdaptiveRoutingObservation struct {

	// downtime failover of requests to healthy origins from alternate pools, when no healthy alternate exists in the same pool, according to the failover order defined by traffic and origin steering. When set false (the default) zero-downtime failover will only occur between origins within the same pool. See session_affinity_attributes for control over when sessions are broken or reassigned.
	// Extends zero-downtime failover of requests to healthy origins from alternate pools, when no healthy alternate exists in the same pool, according to the failover order defined by traffic and origin steering. When set false (the default) zero-downtime failover will only occur between origins within the same pool. See `session_affinity_attributes` for control over when sessions are broken or reassigned.
	FailoverAcrossPools *bool `json:"failoverAcrossPools,omitempty" tf:"failover_across_pools,omitempty"`
}

type OverridesAdaptiveRoutingParameters struct {

	// downtime failover of requests to healthy origins from alternate pools, when no healthy alternate exists in the same pool, according to the failover order defined by traffic and origin steering. When set false (the default) zero-downtime failover will only occur between origins within the same pool. See session_affinity_attributes for control over when sessions are broken or reassigned.
	// Extends zero-downtime failover of requests to healthy origins from alternate pools, when no healthy alternate exists in the same pool, according to the failover order defined by traffic and origin steering. When set false (the default) zero-downtime failover will only occur between origins within the same pool. See `session_affinity_attributes` for control over when sessions are broken or reassigned.
	// +kubebuilder:validation:Optional
	FailoverAcrossPools *bool `json:"failoverAcrossPools,omitempty" tf:"failover_across_pools,omitempty"`
}

type OverridesInitParameters struct {

	// downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin. (see below for nested schema)
	AdaptiveRouting *OverridesAdaptiveRoutingInitParameters `json:"adaptiveRouting,omitempty" tf:"adaptive_routing,omitempty"`

	// (Map of List of String) A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region_pool mapping if it exists else to default_pools.
	// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region_pool mapping if it exists else to default_pools.
	CountryPools map[string][]*string `json:"countryPools,omitempty" tf:"country_pools,omitempty"`

	// (List of String) A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
	// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
	DefaultPools []*string `json:"defaultPools,omitempty" tf:"default_pools,omitempty"`

	// (String) The pool ID to use when all other pools are detected as unhealthy.
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPool *string `json:"fallbackPool,omitempty" tf:"fallback_pool,omitempty"`

	// based steering for non-proxied requests. See steering_policy to learn how steering is affected. (see below for nested schema)
	LocationStrategy *OverridesLocationStrategyInitParameters `json:"locationStrategy,omitempty" tf:"location_strategy,omitempty"`

	// (Map of List of String) (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country_pool, then region_pool mapping if it exists else to default_pools.
	// (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country_pool, then region_pool mapping if it exists else to default_pools.
	PopPools map[string][]*string `json:"popPools,omitempty" tf:"pop_pools,omitempty"`

	// (Attributes) Configures pool weights.
	RandomSteering *OverridesRandomSteeringInitParameters `json:"randomSteering,omitempty" tf:"random_steering,omitempty"`

	// (Map of List of String) A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	RegionPools map[string][]*string `json:"regionPools,omitempty" tf:"region_pools,omitempty"`

	// (String) Specifies the type of session affinity the load balancer should use unless specified as "none". The supported types are:
	// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are:
	// - `"cookie"`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used.
	// - `"ip_cookie"`: Behaves the same as `"cookie"` except the initial origin selection is stable and based on the client's ip address.
	// - `"header"`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `session_affinity_ttl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `session_affinity_attributes` for additional required configuration.
	SessionAffinity *string `json:"sessionAffinity,omitempty" tf:"session_affinity,omitempty"`

	// (Attributes) Configures attributes for session affinity. (see below for nested schema)
	SessionAffinityAttributes *SessionAffinityAttributesInitParameters `json:"sessionAffinityAttributes,omitempty" tf:"session_affinity_attributes,omitempty"`

	// (Number) Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per session_affinity policy are:
	// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are:
	// - `"cookie"` / `"ip_cookie"`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800].
	// - `"header"`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven't been used for the number of seconds specified.
	SessionAffinityTTL *float64 `json:"sessionAffinityTtl,omitempty" tf:"session_affinity_ttl,omitempty"`

	// (String) Steering Policy for this load balancer.
	// Steering Policy for this load balancer.
	// - `"off"`: Use `default_pools`.
	// - `"geo"`: Use `region_pools`/`country_pools`/`pop_pools`. For non-proxied requests, the country for `country_pools` is determined by `location_strategy`.
	// - `"random"`: Select a pool randomly.
	// - `"dynamic_latency"`: Use round trip time to select the closest pool in default_pools (requires pool health checks).
	// - `"proximity"`: Use the pools' latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by `location_strategy` for non-proxied requests.
	// - `"least_outstanding_requests"`: Select a pool by taking into consideration `random_steering` weights, as well as each pool's number of outstanding requests. Pools with more pending requests are weighted proportionately less relative to others.
	// - `"least_connections"`: Select a pool by taking into consideration `random_steering` weights, as well as each pool's number of open connections. Pools with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections.
	// - `""`: Will map to `"geo"` if you use `region_pools`/`country_pools`/`pop_pools` otherwise `"off"`.
	SteeringPolicy *string `json:"steeringPolicy,omitempty" tf:"steering_policy,omitempty"`

	// clouded (unproxied) load balancers.
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type OverridesLocationStrategyInitParameters struct {

	// (String) Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful.
	// Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful.
	// - `"pop"`: Use the Cloudflare PoP location.
	// - `"resolver_ip"`: Use the DNS resolver GeoIP location. If the GeoIP lookup is unsuccessful, use the Cloudflare PoP location.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (String) Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location.
	// Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location.
	// - `"always"`: Always prefer ECS.
	// - `"never"`: Never prefer ECS.
	// - `"proximity"`: Prefer ECS only when `steering_policy="proximity"`.
	// - `"geo"`: Prefer ECS only when `steering_policy="geo"`.
	PreferEcs *string `json:"preferEcs,omitempty" tf:"prefer_ecs,omitempty"`
}

type OverridesLocationStrategyObservation struct {

	// (String) Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful.
	// Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful.
	// - `"pop"`: Use the Cloudflare PoP location.
	// - `"resolver_ip"`: Use the DNS resolver GeoIP location. If the GeoIP lookup is unsuccessful, use the Cloudflare PoP location.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (String) Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location.
	// Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location.
	// - `"always"`: Always prefer ECS.
	// - `"never"`: Never prefer ECS.
	// - `"proximity"`: Prefer ECS only when `steering_policy="proximity"`.
	// - `"geo"`: Prefer ECS only when `steering_policy="geo"`.
	PreferEcs *string `json:"preferEcs,omitempty" tf:"prefer_ecs,omitempty"`
}

type OverridesLocationStrategyParameters struct {

	// (String) Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful.
	// Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful.
	// - `"pop"`: Use the Cloudflare PoP location.
	// - `"resolver_ip"`: Use the DNS resolver GeoIP location. If the GeoIP lookup is unsuccessful, use the Cloudflare PoP location.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (String) Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location.
	// Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location.
	// - `"always"`: Always prefer ECS.
	// - `"never"`: Never prefer ECS.
	// - `"proximity"`: Prefer ECS only when `steering_policy="proximity"`.
	// - `"geo"`: Prefer ECS only when `steering_policy="geo"`.
	// +kubebuilder:validation:Optional
	PreferEcs *string `json:"preferEcs,omitempty" tf:"prefer_ecs,omitempty"`
}

type OverridesObservation struct {

	// downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin. (see below for nested schema)
	AdaptiveRouting *OverridesAdaptiveRoutingObservation `json:"adaptiveRouting,omitempty" tf:"adaptive_routing,omitempty"`

	// (Map of List of String) A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region_pool mapping if it exists else to default_pools.
	// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region_pool mapping if it exists else to default_pools.
	CountryPools map[string][]*string `json:"countryPools,omitempty" tf:"country_pools,omitempty"`

	// (List of String) A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
	// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
	DefaultPools []*string `json:"defaultPools,omitempty" tf:"default_pools,omitempty"`

	// (String) The pool ID to use when all other pools are detected as unhealthy.
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPool *string `json:"fallbackPool,omitempty" tf:"fallback_pool,omitempty"`

	// based steering for non-proxied requests. See steering_policy to learn how steering is affected. (see below for nested schema)
	LocationStrategy *OverridesLocationStrategyObservation `json:"locationStrategy,omitempty" tf:"location_strategy,omitempty"`

	// (Map of List of String) (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country_pool, then region_pool mapping if it exists else to default_pools.
	// (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country_pool, then region_pool mapping if it exists else to default_pools.
	PopPools map[string][]*string `json:"popPools,omitempty" tf:"pop_pools,omitempty"`

	// (Attributes) Configures pool weights.
	RandomSteering *OverridesRandomSteeringObservation `json:"randomSteering,omitempty" tf:"random_steering,omitempty"`

	// (Map of List of String) A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	RegionPools map[string][]*string `json:"regionPools,omitempty" tf:"region_pools,omitempty"`

	// (String) Specifies the type of session affinity the load balancer should use unless specified as "none". The supported types are:
	// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are:
	// - `"cookie"`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used.
	// - `"ip_cookie"`: Behaves the same as `"cookie"` except the initial origin selection is stable and based on the client's ip address.
	// - `"header"`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `session_affinity_ttl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `session_affinity_attributes` for additional required configuration.
	SessionAffinity *string `json:"sessionAffinity,omitempty" tf:"session_affinity,omitempty"`

	// (Attributes) Configures attributes for session affinity. (see below for nested schema)
	SessionAffinityAttributes *SessionAffinityAttributesObservation `json:"sessionAffinityAttributes,omitempty" tf:"session_affinity_attributes,omitempty"`

	// (Number) Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per session_affinity policy are:
	// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are:
	// - `"cookie"` / `"ip_cookie"`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800].
	// - `"header"`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven't been used for the number of seconds specified.
	SessionAffinityTTL *float64 `json:"sessionAffinityTtl,omitempty" tf:"session_affinity_ttl,omitempty"`

	// (String) Steering Policy for this load balancer.
	// Steering Policy for this load balancer.
	// - `"off"`: Use `default_pools`.
	// - `"geo"`: Use `region_pools`/`country_pools`/`pop_pools`. For non-proxied requests, the country for `country_pools` is determined by `location_strategy`.
	// - `"random"`: Select a pool randomly.
	// - `"dynamic_latency"`: Use round trip time to select the closest pool in default_pools (requires pool health checks).
	// - `"proximity"`: Use the pools' latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by `location_strategy` for non-proxied requests.
	// - `"least_outstanding_requests"`: Select a pool by taking into consideration `random_steering` weights, as well as each pool's number of outstanding requests. Pools with more pending requests are weighted proportionately less relative to others.
	// - `"least_connections"`: Select a pool by taking into consideration `random_steering` weights, as well as each pool's number of open connections. Pools with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections.
	// - `""`: Will map to `"geo"` if you use `region_pools`/`country_pools`/`pop_pools` otherwise `"off"`.
	SteeringPolicy *string `json:"steeringPolicy,omitempty" tf:"steering_policy,omitempty"`

	// clouded (unproxied) load balancers.
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type OverridesParameters struct {

	// downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin. (see below for nested schema)
	// +kubebuilder:validation:Optional
	AdaptiveRouting *OverridesAdaptiveRoutingParameters `json:"adaptiveRouting,omitempty" tf:"adaptive_routing,omitempty"`

	// (Map of List of String) A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region_pool mapping if it exists else to default_pools.
	// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region_pool mapping if it exists else to default_pools.
	// +kubebuilder:validation:Optional
	CountryPools map[string][]*string `json:"countryPools,omitempty" tf:"country_pools,omitempty"`

	// (List of String) A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
	// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
	// +kubebuilder:validation:Optional
	DefaultPools []*string `json:"defaultPools,omitempty" tf:"default_pools,omitempty"`

	// (String) The pool ID to use when all other pools are detected as unhealthy.
	// The pool ID to use when all other pools are detected as unhealthy.
	// +kubebuilder:validation:Optional
	FallbackPool *string `json:"fallbackPool,omitempty" tf:"fallback_pool,omitempty"`

	// based steering for non-proxied requests. See steering_policy to learn how steering is affected. (see below for nested schema)
	// +kubebuilder:validation:Optional
	LocationStrategy *OverridesLocationStrategyParameters `json:"locationStrategy,omitempty" tf:"location_strategy,omitempty"`

	// (Map of List of String) (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country_pool, then region_pool mapping if it exists else to default_pools.
	// (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country_pool, then region_pool mapping if it exists else to default_pools.
	// +kubebuilder:validation:Optional
	PopPools map[string][]*string `json:"popPools,omitempty" tf:"pop_pools,omitempty"`

	// (Attributes) Configures pool weights.
	// +kubebuilder:validation:Optional
	RandomSteering *OverridesRandomSteeringParameters `json:"randomSteering,omitempty" tf:"random_steering,omitempty"`

	// (Map of List of String) A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	// +kubebuilder:validation:Optional
	RegionPools map[string][]*string `json:"regionPools,omitempty" tf:"region_pools,omitempty"`

	// (String) Specifies the type of session affinity the load balancer should use unless specified as "none". The supported types are:
	// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are:
	// - `"cookie"`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used.
	// - `"ip_cookie"`: Behaves the same as `"cookie"` except the initial origin selection is stable and based on the client's ip address.
	// - `"header"`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `session_affinity_ttl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `session_affinity_attributes` for additional required configuration.
	// +kubebuilder:validation:Optional
	SessionAffinity *string `json:"sessionAffinity,omitempty" tf:"session_affinity,omitempty"`

	// (Attributes) Configures attributes for session affinity. (see below for nested schema)
	// +kubebuilder:validation:Optional
	SessionAffinityAttributes *SessionAffinityAttributesParameters `json:"sessionAffinityAttributes,omitempty" tf:"session_affinity_attributes,omitempty"`

	// (Number) Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per session_affinity policy are:
	// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are:
	// - `"cookie"` / `"ip_cookie"`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800].
	// - `"header"`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven't been used for the number of seconds specified.
	// +kubebuilder:validation:Optional
	SessionAffinityTTL *float64 `json:"sessionAffinityTtl,omitempty" tf:"session_affinity_ttl,omitempty"`

	// (String) Steering Policy for this load balancer.
	// Steering Policy for this load balancer.
	// - `"off"`: Use `default_pools`.
	// - `"geo"`: Use `region_pools`/`country_pools`/`pop_pools`. For non-proxied requests, the country for `country_pools` is determined by `location_strategy`.
	// - `"random"`: Select a pool randomly.
	// - `"dynamic_latency"`: Use round trip time to select the closest pool in default_pools (requires pool health checks).
	// - `"proximity"`: Use the pools' latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by `location_strategy` for non-proxied requests.
	// - `"least_outstanding_requests"`: Select a pool by taking into consideration `random_steering` weights, as well as each pool's number of outstanding requests. Pools with more pending requests are weighted proportionately less relative to others.
	// - `"least_connections"`: Select a pool by taking into consideration `random_steering` weights, as well as each pool's number of open connections. Pools with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections.
	// - `""`: Will map to `"geo"` if you use `region_pools`/`country_pools`/`pop_pools` otherwise `"off"`.
	// +kubebuilder:validation:Optional
	SteeringPolicy *string `json:"steeringPolicy,omitempty" tf:"steering_policy,omitempty"`

	// clouded (unproxied) load balancers.
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type OverridesRandomSteeringInitParameters struct {

	// (Number) The default weight for pools in the load balancer that are not specified in the pool_weights map.
	// The default weight for pools in the load balancer that are not specified in the pool_weights map.
	DefaultWeight *float64 `json:"defaultWeight,omitempty" tf:"default_weight,omitempty"`

	// (Map of Number) A mapping of pool IDs to custom weights. The weight is relative to other pools in the load balancer.
	// A mapping of pool IDs to custom weights. The weight is relative to other pools in the load balancer.
	// +mapType=granular
	PoolWeights map[string]*float64 `json:"poolWeights,omitempty" tf:"pool_weights,omitempty"`
}

type OverridesRandomSteeringObservation struct {

	// (Number) The default weight for pools in the load balancer that are not specified in the pool_weights map.
	// The default weight for pools in the load balancer that are not specified in the pool_weights map.
	DefaultWeight *float64 `json:"defaultWeight,omitempty" tf:"default_weight,omitempty"`

	// (Map of Number) A mapping of pool IDs to custom weights. The weight is relative to other pools in the load balancer.
	// A mapping of pool IDs to custom weights. The weight is relative to other pools in the load balancer.
	// +mapType=granular
	PoolWeights map[string]*float64 `json:"poolWeights,omitempty" tf:"pool_weights,omitempty"`
}

type OverridesRandomSteeringParameters struct {

	// (Number) The default weight for pools in the load balancer that are not specified in the pool_weights map.
	// The default weight for pools in the load balancer that are not specified in the pool_weights map.
	// +kubebuilder:validation:Optional
	DefaultWeight *float64 `json:"defaultWeight,omitempty" tf:"default_weight,omitempty"`

	// (Map of Number) A mapping of pool IDs to custom weights. The weight is relative to other pools in the load balancer.
	// A mapping of pool IDs to custom weights. The weight is relative to other pools in the load balancer.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	PoolWeights map[string]*float64 `json:"poolWeights,omitempty" tf:"pool_weights,omitempty"`
}

type RandomSteeringInitParameters struct {

	// (Number) The default weight for pools in the load balancer that are not specified in the pool_weights map.
	// The default weight for pools in the load balancer that are not specified in the pool_weights map.
	DefaultWeight *float64 `json:"defaultWeight,omitempty" tf:"default_weight,omitempty"`

	// (Map of Number) A mapping of pool IDs to custom weights. The weight is relative to other pools in the load balancer.
	// A mapping of pool IDs to custom weights. The weight is relative to other pools in the load balancer.
	// +mapType=granular
	PoolWeights map[string]*float64 `json:"poolWeights,omitempty" tf:"pool_weights,omitempty"`
}

type RandomSteeringObservation struct {

	// (Number) The default weight for pools in the load balancer that are not specified in the pool_weights map.
	// The default weight for pools in the load balancer that are not specified in the pool_weights map.
	DefaultWeight *float64 `json:"defaultWeight,omitempty" tf:"default_weight,omitempty"`

	// (Map of Number) A mapping of pool IDs to custom weights. The weight is relative to other pools in the load balancer.
	// A mapping of pool IDs to custom weights. The weight is relative to other pools in the load balancer.
	// +mapType=granular
	PoolWeights map[string]*float64 `json:"poolWeights,omitempty" tf:"pool_weights,omitempty"`
}

type RandomSteeringParameters struct {

	// (Number) The default weight for pools in the load balancer that are not specified in the pool_weights map.
	// The default weight for pools in the load balancer that are not specified in the pool_weights map.
	// +kubebuilder:validation:Optional
	DefaultWeight *float64 `json:"defaultWeight,omitempty" tf:"default_weight,omitempty"`

	// (Map of Number) A mapping of pool IDs to custom weights. The weight is relative to other pools in the load balancer.
	// A mapping of pool IDs to custom weights. The weight is relative to other pools in the load balancer.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	PoolWeights map[string]*float64 `json:"poolWeights,omitempty" tf:"pool_weights,omitempty"`
}

type RulesInitParameters struct {

	// balancing/understand-basics/load-balancing-rules/expressions.
	// The condition expressions to evaluate. If the condition evaluates to true, the overrides or fixed_response in this rule will be applied. An empty condition is always true. For more details on condition expressions, please see https://developers.cloudflare.com/load-balancing/understand-basics/load-balancing-rules/expressions.
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// (Boolean) Disable this specific rule. It will no longer be evaluated by this load balancer.
	// Disable this specific rule. It will no longer be evaluated by this load balancer.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (Attributes) A collection of fields used to directly respond to the eyeball instead of routing to a pool. If a fixed_response is supplied the rule will be marked as terminates. (see below for nested schema)
	FixedResponse *FixedResponseInitParameters `json:"fixedResponse,omitempty" tf:"fixed_response,omitempty"`

	// (String) The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the Load Balancer will take precedence and the DNS record will not be used.
	// Name of this rule. Only used for human readability.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Attributes) A collection of overrides to apply to the load balancer when this rule's condition is true. All fields are optional. (see below for nested schema)
	Overrides *OverridesInitParameters `json:"overrides,omitempty" tf:"overrides,omitempty"`

	// (Number) The order in which rules should be executed in relation to each other. Lower values are executed first. Values do not need to be sequential. If no value is provided for any rule the array order of the rules field will be used to assign a priority.
	// The order in which rules should be executed in relation to each other. Lower values are executed first. Values do not need to be sequential. If no value is provided for any rule the array order of the rules field will be used to assign a priority.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// (Boolean) If this rule's condition is true, this causes rule evaluation to stop after processing this rule.
	// If this rule's condition is true, this causes rule evaluation to stop after processing this rule.
	Terminates *bool `json:"terminates,omitempty" tf:"terminates,omitempty"`
}

type RulesObservation struct {

	// balancing/understand-basics/load-balancing-rules/expressions.
	// The condition expressions to evaluate. If the condition evaluates to true, the overrides or fixed_response in this rule will be applied. An empty condition is always true. For more details on condition expressions, please see https://developers.cloudflare.com/load-balancing/understand-basics/load-balancing-rules/expressions.
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// (Boolean) Disable this specific rule. It will no longer be evaluated by this load balancer.
	// Disable this specific rule. It will no longer be evaluated by this load balancer.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (Attributes) A collection of fields used to directly respond to the eyeball instead of routing to a pool. If a fixed_response is supplied the rule will be marked as terminates. (see below for nested schema)
	FixedResponse *FixedResponseObservation `json:"fixedResponse,omitempty" tf:"fixed_response,omitempty"`

	// (String) The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the Load Balancer will take precedence and the DNS record will not be used.
	// Name of this rule. Only used for human readability.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Attributes) A collection of overrides to apply to the load balancer when this rule's condition is true. All fields are optional. (see below for nested schema)
	Overrides *OverridesObservation `json:"overrides,omitempty" tf:"overrides,omitempty"`

	// (Number) The order in which rules should be executed in relation to each other. Lower values are executed first. Values do not need to be sequential. If no value is provided for any rule the array order of the rules field will be used to assign a priority.
	// The order in which rules should be executed in relation to each other. Lower values are executed first. Values do not need to be sequential. If no value is provided for any rule the array order of the rules field will be used to assign a priority.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// (Boolean) If this rule's condition is true, this causes rule evaluation to stop after processing this rule.
	// If this rule's condition is true, this causes rule evaluation to stop after processing this rule.
	Terminates *bool `json:"terminates,omitempty" tf:"terminates,omitempty"`
}

type RulesParameters struct {

	// balancing/understand-basics/load-balancing-rules/expressions.
	// The condition expressions to evaluate. If the condition evaluates to true, the overrides or fixed_response in this rule will be applied. An empty condition is always true. For more details on condition expressions, please see https://developers.cloudflare.com/load-balancing/understand-basics/load-balancing-rules/expressions.
	// +kubebuilder:validation:Optional
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// (Boolean) Disable this specific rule. It will no longer be evaluated by this load balancer.
	// Disable this specific rule. It will no longer be evaluated by this load balancer.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (Attributes) A collection of fields used to directly respond to the eyeball instead of routing to a pool. If a fixed_response is supplied the rule will be marked as terminates. (see below for nested schema)
	// +kubebuilder:validation:Optional
	FixedResponse *FixedResponseParameters `json:"fixedResponse,omitempty" tf:"fixed_response,omitempty"`

	// (String) The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the Load Balancer will take precedence and the DNS record will not be used.
	// Name of this rule. Only used for human readability.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Attributes) A collection of overrides to apply to the load balancer when this rule's condition is true. All fields are optional. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Overrides *OverridesParameters `json:"overrides,omitempty" tf:"overrides,omitempty"`

	// (Number) The order in which rules should be executed in relation to each other. Lower values are executed first. Values do not need to be sequential. If no value is provided for any rule the array order of the rules field will be used to assign a priority.
	// The order in which rules should be executed in relation to each other. Lower values are executed first. Values do not need to be sequential. If no value is provided for any rule the array order of the rules field will be used to assign a priority.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// (Boolean) If this rule's condition is true, this causes rule evaluation to stop after processing this rule.
	// If this rule's condition is true, this causes rule evaluation to stop after processing this rule.
	// +kubebuilder:validation:Optional
	Terminates *bool `json:"terminates,omitempty" tf:"terminates,omitempty"`
}

type SessionAffinityAttributesInitParameters struct {

	// (Number) Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.
	// Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.
	DrainDuration *float64 `json:"drainDuration,omitempty" tf:"drain_duration,omitempty"`

	// name-1>,<cookie-name-2>" (example) where everything after the colon is a comma-separated list of cookie names. Providing only "cookie" will result in all cookies being used. The default max number of HTTP header names that can be provided depends on your plan: 5 for Enterprise, 1 for all other plans.
	// Configures the names of HTTP headers to base session affinity on when header `session_affinity` is enabled. At least one HTTP header name must be provided. To specify the exact cookies to be used, include an item in the following format: `"cookie:<cookie-name-1>,<cookie-name-2>"` (example) where everything after the colon is a comma-separated list of cookie names. Providing only `"cookie"` will result in all cookies being used. The default max number of HTTP header names that can be provided depends on your plan: 5 for Enterprise, 1 for all other plans.
	Headers []*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Boolean) When header session_affinity is enabled, this option can be used to specify how HTTP headers on load balancing requests will be used. The supported values are:
	// When header `session_affinity` is enabled, this option can be used to specify how HTTP headers on load balancing requests will be used. The supported values are:
	// - `"true"`: Load balancing requests must contain *all* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren't created.
	// - `"false"`: Load balancing requests must contain *at least one* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren't created.
	RequireAllHeaders *bool `json:"requireAllHeaders,omitempty" tf:"require_all_headers,omitempty"`

	// (String) Configures the SameSite attribute on session affinity cookie. Value "Auto" will be translated to "Lax" or "None" depending if Always Use HTTPS is enabled. Note: when using value "None", the secure attribute can not be set to "Never".
	// Configures the SameSite attribute on session affinity cookie. Value "Auto" will be translated to "Lax" or "None" depending if Always Use HTTPS is enabled. Note: when using value "None", the secure attribute can not be set to "Never".
	Samesite *string `json:"samesite,omitempty" tf:"samesite,omitempty"`

	// Cookie header, "Never" indicates the Secure attribute will not be set, and "Auto" will set the Secure attribute depending if Always Use HTTPS is enabled.
	// Configures the Secure attribute on session affinity cookie. Value "Always" indicates the Secure attribute will be set in the Set-Cookie header, "Never" indicates the Secure attribute will not be set, and "Auto" will set the Secure attribute depending if Always Use HTTPS is enabled.
	Secure *string `json:"secure,omitempty" tf:"secure,omitempty"`

	// downtime failover between origins within a pool when session affinity is enabled. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. The supported values are:
	// Configures the zero-downtime failover between origins within a pool when session affinity is enabled. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. The supported values are:
	// - `"none"`: No failover takes place for sessions pinned to the origin (default).
	// - `"temporary"`: Traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping.
	// - `"sticky"`: The session affinity cookie is updated and subsequent requests are sent to the new origin. Note: Zero-downtime failover with sticky sessions is currently not supported for session affinity by header.
	ZeroDowntimeFailover *string `json:"zeroDowntimeFailover,omitempty" tf:"zero_downtime_failover,omitempty"`
}

type SessionAffinityAttributesObservation struct {

	// (Number) Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.
	// Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.
	DrainDuration *float64 `json:"drainDuration,omitempty" tf:"drain_duration,omitempty"`

	// name-1>,<cookie-name-2>" (example) where everything after the colon is a comma-separated list of cookie names. Providing only "cookie" will result in all cookies being used. The default max number of HTTP header names that can be provided depends on your plan: 5 for Enterprise, 1 for all other plans.
	// Configures the names of HTTP headers to base session affinity on when header `session_affinity` is enabled. At least one HTTP header name must be provided. To specify the exact cookies to be used, include an item in the following format: `"cookie:<cookie-name-1>,<cookie-name-2>"` (example) where everything after the colon is a comma-separated list of cookie names. Providing only `"cookie"` will result in all cookies being used. The default max number of HTTP header names that can be provided depends on your plan: 5 for Enterprise, 1 for all other plans.
	Headers []*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Boolean) When header session_affinity is enabled, this option can be used to specify how HTTP headers on load balancing requests will be used. The supported values are:
	// When header `session_affinity` is enabled, this option can be used to specify how HTTP headers on load balancing requests will be used. The supported values are:
	// - `"true"`: Load balancing requests must contain *all* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren't created.
	// - `"false"`: Load balancing requests must contain *at least one* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren't created.
	RequireAllHeaders *bool `json:"requireAllHeaders,omitempty" tf:"require_all_headers,omitempty"`

	// (String) Configures the SameSite attribute on session affinity cookie. Value "Auto" will be translated to "Lax" or "None" depending if Always Use HTTPS is enabled. Note: when using value "None", the secure attribute can not be set to "Never".
	// Configures the SameSite attribute on session affinity cookie. Value "Auto" will be translated to "Lax" or "None" depending if Always Use HTTPS is enabled. Note: when using value "None", the secure attribute can not be set to "Never".
	Samesite *string `json:"samesite,omitempty" tf:"samesite,omitempty"`

	// Cookie header, "Never" indicates the Secure attribute will not be set, and "Auto" will set the Secure attribute depending if Always Use HTTPS is enabled.
	// Configures the Secure attribute on session affinity cookie. Value "Always" indicates the Secure attribute will be set in the Set-Cookie header, "Never" indicates the Secure attribute will not be set, and "Auto" will set the Secure attribute depending if Always Use HTTPS is enabled.
	Secure *string `json:"secure,omitempty" tf:"secure,omitempty"`

	// downtime failover between origins within a pool when session affinity is enabled. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. The supported values are:
	// Configures the zero-downtime failover between origins within a pool when session affinity is enabled. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. The supported values are:
	// - `"none"`: No failover takes place for sessions pinned to the origin (default).
	// - `"temporary"`: Traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping.
	// - `"sticky"`: The session affinity cookie is updated and subsequent requests are sent to the new origin. Note: Zero-downtime failover with sticky sessions is currently not supported for session affinity by header.
	ZeroDowntimeFailover *string `json:"zeroDowntimeFailover,omitempty" tf:"zero_downtime_failover,omitempty"`
}

type SessionAffinityAttributesParameters struct {

	// (Number) Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.
	// Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.
	// +kubebuilder:validation:Optional
	DrainDuration *float64 `json:"drainDuration,omitempty" tf:"drain_duration,omitempty"`

	// name-1>,<cookie-name-2>" (example) where everything after the colon is a comma-separated list of cookie names. Providing only "cookie" will result in all cookies being used. The default max number of HTTP header names that can be provided depends on your plan: 5 for Enterprise, 1 for all other plans.
	// Configures the names of HTTP headers to base session affinity on when header `session_affinity` is enabled. At least one HTTP header name must be provided. To specify the exact cookies to be used, include an item in the following format: `"cookie:<cookie-name-1>,<cookie-name-2>"` (example) where everything after the colon is a comma-separated list of cookie names. Providing only `"cookie"` will result in all cookies being used. The default max number of HTTP header names that can be provided depends on your plan: 5 for Enterprise, 1 for all other plans.
	// +kubebuilder:validation:Optional
	Headers []*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Boolean) When header session_affinity is enabled, this option can be used to specify how HTTP headers on load balancing requests will be used. The supported values are:
	// When header `session_affinity` is enabled, this option can be used to specify how HTTP headers on load balancing requests will be used. The supported values are:
	// - `"true"`: Load balancing requests must contain *all* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren't created.
	// - `"false"`: Load balancing requests must contain *at least one* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren't created.
	// +kubebuilder:validation:Optional
	RequireAllHeaders *bool `json:"requireAllHeaders,omitempty" tf:"require_all_headers,omitempty"`

	// (String) Configures the SameSite attribute on session affinity cookie. Value "Auto" will be translated to "Lax" or "None" depending if Always Use HTTPS is enabled. Note: when using value "None", the secure attribute can not be set to "Never".
	// Configures the SameSite attribute on session affinity cookie. Value "Auto" will be translated to "Lax" or "None" depending if Always Use HTTPS is enabled. Note: when using value "None", the secure attribute can not be set to "Never".
	// +kubebuilder:validation:Optional
	Samesite *string `json:"samesite,omitempty" tf:"samesite,omitempty"`

	// Cookie header, "Never" indicates the Secure attribute will not be set, and "Auto" will set the Secure attribute depending if Always Use HTTPS is enabled.
	// Configures the Secure attribute on session affinity cookie. Value "Always" indicates the Secure attribute will be set in the Set-Cookie header, "Never" indicates the Secure attribute will not be set, and "Auto" will set the Secure attribute depending if Always Use HTTPS is enabled.
	// +kubebuilder:validation:Optional
	Secure *string `json:"secure,omitempty" tf:"secure,omitempty"`

	// downtime failover between origins within a pool when session affinity is enabled. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. The supported values are:
	// Configures the zero-downtime failover between origins within a pool when session affinity is enabled. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. The supported values are:
	// - `"none"`: No failover takes place for sessions pinned to the origin (default).
	// - `"temporary"`: Traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping.
	// - `"sticky"`: The session affinity cookie is updated and subsequent requests are sent to the new origin. Note: Zero-downtime failover with sticky sessions is currently not supported for session affinity by header.
	// +kubebuilder:validation:Optional
	ZeroDowntimeFailover *string `json:"zeroDowntimeFailover,omitempty" tf:"zero_downtime_failover,omitempty"`
}

// BalancerSpec defines the desired state of Balancer
type BalancerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BalancerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BalancerInitParameters `json:"initProvider,omitempty"`
}

// BalancerStatus defines the observed state of Balancer.
type BalancerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BalancerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Balancer is the Schema for the Balancers API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Balancer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.defaultPools) || (has(self.initProvider) && has(self.initProvider.defaultPools))",message="spec.forProvider.defaultPools is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.fallbackPool) || (has(self.initProvider) && has(self.initProvider.fallbackPool))",message="spec.forProvider.fallbackPool is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rules) || (has(self.initProvider) && has(self.initProvider.rules))",message="spec.forProvider.rules is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   BalancerSpec   `json:"spec"`
	Status BalancerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerList contains a list of Balancers
type BalancerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Balancer `json:"items"`
}

// Repository type metadata.
var (
	Balancer_Kind             = "Balancer"
	Balancer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Balancer_Kind}.String()
	Balancer_KindAPIVersion   = Balancer_Kind + "." + CRDGroupVersion.String()
	Balancer_GroupVersionKind = CRDGroupVersion.WithKind(Balancer_Kind)
)

func init() {
	SchemeBuilder.Register(&Balancer{}, &BalancerList{})
}
