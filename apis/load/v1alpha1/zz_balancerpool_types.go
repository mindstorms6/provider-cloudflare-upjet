// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BalancerPoolInitParameters struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (List of String) A list of regions from which to run health checks. Null means every Cloudflare data center.
	// A list of regions from which to run health checks. Null means every Cloudflare data center.
	CheckRegions []*string `json:"checkRegions,omitempty" tf:"check_regions,omitempty"`

	// readable description of the pool.
	// A human-readable description of the pool.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
	// Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
	// The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
	Latitude *float64 `json:"latitude,omitempty" tf:"latitude,omitempty"`

	// (Attributes) Configures load shedding policies and percentages for the pool. (see below for nested schema)
	LoadShedding *LoadSheddingInitParameters `json:"loadShedding,omitempty" tf:"load_shedding,omitempty"`

	// (Number) The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
	// The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
	Longitude *float64 `json:"longitude,omitempty" tf:"longitude,omitempty"`

	// (Number) The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
	// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
	MinimumOrigins *float64 `json:"minimumOrigins,omitempty" tf:"minimum_origins,omitempty"`

	// (String) The ID of the Monitor to use for checking the health of origins within this pool.
	// The ID of the Monitor to use for checking the health of origins within this pool.
	Monitor *string `json:"monitor,omitempty" tf:"monitor,omitempty"`

	// (String) This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
	// This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
	NotificationEmail *string `json:"notificationEmail,omitempty" tf:"notification_email,omitempty"`

	// (Attributes) Filter pool and origin health notifications by resource type or health status. Use null to reset. (see below for nested schema)
	NotificationFilter *NotificationFilterInitParameters `json:"notificationFilter,omitempty" tf:"notification_filter,omitempty"`

	// (Attributes) Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity. (see below for nested schema)
	OriginSteering *OriginSteeringInitParameters `json:"originSteering,omitempty" tf:"origin_steering,omitempty"`

	// (Attributes List) The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy. (see below for nested schema)
	Origins []OriginsInitParameters `json:"origins,omitempty" tf:"origins,omitempty"`
}

type BalancerPoolObservation struct {

	// (String) Identifier
	// Identifier
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (List of String) A list of regions from which to run health checks. Null means every Cloudflare data center.
	// A list of regions from which to run health checks. Null means every Cloudflare data center.
	CheckRegions []*string `json:"checkRegions,omitempty" tf:"check_regions,omitempty"`

	// (String)
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// readable description of the pool.
	// A human-readable description of the pool.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
	// This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
	DisabledAt *string `json:"disabledAt,omitempty" tf:"disabled_at,omitempty"`

	// (Boolean) Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
	// Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
	// The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
	Latitude *float64 `json:"latitude,omitempty" tf:"latitude,omitempty"`

	// (Attributes) Configures load shedding policies and percentages for the pool. (see below for nested schema)
	LoadShedding *LoadSheddingObservation `json:"loadShedding,omitempty" tf:"load_shedding,omitempty"`

	// (Number) The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
	// The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
	Longitude *float64 `json:"longitude,omitempty" tf:"longitude,omitempty"`

	// (Number) The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
	// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
	MinimumOrigins *float64 `json:"minimumOrigins,omitempty" tf:"minimum_origins,omitempty"`

	// (String)
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (String) The ID of the Monitor to use for checking the health of origins within this pool.
	// The ID of the Monitor to use for checking the health of origins within this pool.
	Monitor *string `json:"monitor,omitempty" tf:"monitor,omitempty"`

	// (List of String) List of networks where Load Balancer or Pool is enabled.
	// List of networks where Load Balancer or Pool is enabled.
	Networks []*string `json:"networks,omitempty" tf:"networks,omitempty"`

	// (String) This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
	// This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
	NotificationEmail *string `json:"notificationEmail,omitempty" tf:"notification_email,omitempty"`

	// (Attributes) Filter pool and origin health notifications by resource type or health status. Use null to reset. (see below for nested schema)
	NotificationFilter *NotificationFilterObservation `json:"notificationFilter,omitempty" tf:"notification_filter,omitempty"`

	// (Attributes) Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity. (see below for nested schema)
	OriginSteering *OriginSteeringObservation `json:"originSteering,omitempty" tf:"origin_steering,omitempty"`

	// (Attributes List) The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy. (see below for nested schema)
	Origins []OriginsObservation `json:"origins,omitempty" tf:"origins,omitempty"`
}

type BalancerPoolParameters struct {

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (List of String) A list of regions from which to run health checks. Null means every Cloudflare data center.
	// A list of regions from which to run health checks. Null means every Cloudflare data center.
	// +kubebuilder:validation:Optional
	CheckRegions []*string `json:"checkRegions,omitempty" tf:"check_regions,omitempty"`

	// readable description of the pool.
	// A human-readable description of the pool.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
	// Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
	// The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
	// +kubebuilder:validation:Optional
	Latitude *float64 `json:"latitude,omitempty" tf:"latitude,omitempty"`

	// (Attributes) Configures load shedding policies and percentages for the pool. (see below for nested schema)
	// +kubebuilder:validation:Optional
	LoadShedding *LoadSheddingParameters `json:"loadShedding,omitempty" tf:"load_shedding,omitempty"`

	// (Number) The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
	// The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
	// +kubebuilder:validation:Optional
	Longitude *float64 `json:"longitude,omitempty" tf:"longitude,omitempty"`

	// (Number) The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
	// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
	// +kubebuilder:validation:Optional
	MinimumOrigins *float64 `json:"minimumOrigins,omitempty" tf:"minimum_origins,omitempty"`

	// (String) The ID of the Monitor to use for checking the health of origins within this pool.
	// The ID of the Monitor to use for checking the health of origins within this pool.
	// +kubebuilder:validation:Optional
	Monitor *string `json:"monitor,omitempty" tf:"monitor,omitempty"`

	// (String) This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
	// This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
	// +kubebuilder:validation:Optional
	NotificationEmail *string `json:"notificationEmail,omitempty" tf:"notification_email,omitempty"`

	// (Attributes) Filter pool and origin health notifications by resource type or health status. Use null to reset. (see below for nested schema)
	// +kubebuilder:validation:Optional
	NotificationFilter *NotificationFilterParameters `json:"notificationFilter,omitempty" tf:"notification_filter,omitempty"`

	// (Attributes) Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity. (see below for nested schema)
	// +kubebuilder:validation:Optional
	OriginSteering *OriginSteeringParameters `json:"originSteering,omitempty" tf:"origin_steering,omitempty"`

	// (Attributes List) The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Origins []OriginsParameters `json:"origins,omitempty" tf:"origins,omitempty"`
}

type HeaderInitParameters struct {

	// (List of String) The 'Host' header allows to override the hostname set in the HTTP request. Current support is 1 'Host' header override per origin.
	// The 'Host' header allows to override the hostname set in the HTTP request. Current support is 1 'Host' header override per origin.
	Host []*string `json:"host,omitempty" tf:"host,omitempty"`
}

type HeaderObservation struct {

	// (List of String) The 'Host' header allows to override the hostname set in the HTTP request. Current support is 1 'Host' header override per origin.
	// The 'Host' header allows to override the hostname set in the HTTP request. Current support is 1 'Host' header override per origin.
	Host []*string `json:"host,omitempty" tf:"host,omitempty"`
}

type HeaderParameters struct {

	// (List of String) The 'Host' header allows to override the hostname set in the HTTP request. Current support is 1 'Host' header override per origin.
	// The 'Host' header allows to override the hostname set in the HTTP request. Current support is 1 'Host' header override per origin.
	// +kubebuilder:validation:Optional
	Host []*string `json:"host,omitempty" tf:"host,omitempty"`
}

type LoadSheddingInitParameters struct {

	// (Number) The percent of traffic to shed from the pool, according to the default policy. Applies to new sessions and traffic without session affinity.
	// The percent of traffic to shed from the pool, according to the default policy. Applies to new sessions and traffic without session affinity.
	DefaultPercent *float64 `json:"defaultPercent,omitempty" tf:"default_percent,omitempty"`

	// Connecting-IP address and sheds all requests originating from a percent of IPs.
	// The default policy to use when load shedding. A random policy randomly sheds a given percent of requests. A hash policy computes a hash over the CF-Connecting-IP address and sheds all requests originating from a percent of IPs.
	DefaultPolicy *string `json:"defaultPolicy,omitempty" tf:"default_policy,omitempty"`

	// (Number) The percent of existing sessions to shed from the pool, according to the session policy.
	// The percent of existing sessions to shed from the pool, according to the session policy.
	SessionPercent *float64 `json:"sessionPercent,omitempty" tf:"session_percent,omitempty"`

	// (String) Only the hash policy is supported for existing sessions (to avoid exponential decay).
	// Only the hash policy is supported for existing sessions (to avoid exponential decay).
	SessionPolicy *string `json:"sessionPolicy,omitempty" tf:"session_policy,omitempty"`
}

type LoadSheddingObservation struct {

	// (Number) The percent of traffic to shed from the pool, according to the default policy. Applies to new sessions and traffic without session affinity.
	// The percent of traffic to shed from the pool, according to the default policy. Applies to new sessions and traffic without session affinity.
	DefaultPercent *float64 `json:"defaultPercent,omitempty" tf:"default_percent,omitempty"`

	// Connecting-IP address and sheds all requests originating from a percent of IPs.
	// The default policy to use when load shedding. A random policy randomly sheds a given percent of requests. A hash policy computes a hash over the CF-Connecting-IP address and sheds all requests originating from a percent of IPs.
	DefaultPolicy *string `json:"defaultPolicy,omitempty" tf:"default_policy,omitempty"`

	// (Number) The percent of existing sessions to shed from the pool, according to the session policy.
	// The percent of existing sessions to shed from the pool, according to the session policy.
	SessionPercent *float64 `json:"sessionPercent,omitempty" tf:"session_percent,omitempty"`

	// (String) Only the hash policy is supported for existing sessions (to avoid exponential decay).
	// Only the hash policy is supported for existing sessions (to avoid exponential decay).
	SessionPolicy *string `json:"sessionPolicy,omitempty" tf:"session_policy,omitempty"`
}

type LoadSheddingParameters struct {

	// (Number) The percent of traffic to shed from the pool, according to the default policy. Applies to new sessions and traffic without session affinity.
	// The percent of traffic to shed from the pool, according to the default policy. Applies to new sessions and traffic without session affinity.
	// +kubebuilder:validation:Optional
	DefaultPercent *float64 `json:"defaultPercent,omitempty" tf:"default_percent,omitempty"`

	// Connecting-IP address and sheds all requests originating from a percent of IPs.
	// The default policy to use when load shedding. A random policy randomly sheds a given percent of requests. A hash policy computes a hash over the CF-Connecting-IP address and sheds all requests originating from a percent of IPs.
	// +kubebuilder:validation:Optional
	DefaultPolicy *string `json:"defaultPolicy,omitempty" tf:"default_policy,omitempty"`

	// (Number) The percent of existing sessions to shed from the pool, according to the session policy.
	// The percent of existing sessions to shed from the pool, according to the session policy.
	// +kubebuilder:validation:Optional
	SessionPercent *float64 `json:"sessionPercent,omitempty" tf:"session_percent,omitempty"`

	// (String) Only the hash policy is supported for existing sessions (to avoid exponential decay).
	// Only the hash policy is supported for existing sessions (to avoid exponential decay).
	// +kubebuilder:validation:Optional
	SessionPolicy *string `json:"sessionPolicy,omitempty" tf:"session_policy,omitempty"`
}

type NotificationFilterInitParameters struct {

	// (Attributes) Filter options for a particular resource type (pool or origin). Use null to reset. (see below for nested schema)
	Origin *OriginInitParameters `json:"origin,omitempty" tf:"origin,omitempty"`

	// (Attributes) Filter options for a particular resource type (pool or origin). Use null to reset. (see below for nested schema)
	Pool *PoolInitParameters `json:"pool,omitempty" tf:"pool,omitempty"`
}

type NotificationFilterObservation struct {

	// (Attributes) Filter options for a particular resource type (pool or origin). Use null to reset. (see below for nested schema)
	Origin *OriginObservation `json:"origin,omitempty" tf:"origin,omitempty"`

	// (Attributes) Filter options for a particular resource type (pool or origin). Use null to reset. (see below for nested schema)
	Pool *PoolObservation `json:"pool,omitempty" tf:"pool,omitempty"`
}

type NotificationFilterParameters struct {

	// (Attributes) Filter options for a particular resource type (pool or origin). Use null to reset. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Origin *OriginParameters `json:"origin,omitempty" tf:"origin,omitempty"`

	// (Attributes) Filter options for a particular resource type (pool or origin). Use null to reset. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Pool *PoolParameters `json:"pool,omitempty" tf:"pool,omitempty"`
}

type OriginInitParameters struct {

	// (Boolean) If set true, disable notifications for this type of resource (pool or origin).
	// If set true, disable notifications for this type of resource (pool or origin).
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// (Boolean) If present, send notifications only for this health status (e.g. false for only DOWN events). Use null to reset (all events).
	// If present, send notifications only for this health status (e.g. false for only DOWN events). Use null to reset (all events).
	Healthy *bool `json:"healthy,omitempty" tf:"healthy,omitempty"`
}

type OriginObservation struct {

	// (Boolean) If set true, disable notifications for this type of resource (pool or origin).
	// If set true, disable notifications for this type of resource (pool or origin).
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// (Boolean) If present, send notifications only for this health status (e.g. false for only DOWN events). Use null to reset (all events).
	// If present, send notifications only for this health status (e.g. false for only DOWN events). Use null to reset (all events).
	Healthy *bool `json:"healthy,omitempty" tf:"healthy,omitempty"`
}

type OriginParameters struct {

	// (Boolean) If set true, disable notifications for this type of resource (pool or origin).
	// If set true, disable notifications for this type of resource (pool or origin).
	// +kubebuilder:validation:Optional
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// (Boolean) If present, send notifications only for this health status (e.g. false for only DOWN events). Use null to reset (all events).
	// If present, send notifications only for this health status (e.g. false for only DOWN events). Use null to reset (all events).
	// +kubebuilder:validation:Optional
	Healthy *bool `json:"healthy,omitempty" tf:"healthy,omitempty"`
}

type OriginSteeringInitParameters struct {

	// (String) The type of origin steering policy to use.
	// The type of origin steering policy to use.
	// - `"random"`: Select an origin randomly.
	// - `"hash"`: Select an origin by computing a hash over the CF-Connecting-IP address.
	// - `"least_outstanding_requests"`: Select an origin by taking into consideration origin weights, as well as each origin's number of outstanding requests. Origins with more pending requests are weighted proportionately less relative to others.
	// - `"least_connections"`: Select an origin by taking into consideration origin weights, as well as each origin's number of open connections. Origins with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`
}

type OriginSteeringObservation struct {

	// (String) The type of origin steering policy to use.
	// The type of origin steering policy to use.
	// - `"random"`: Select an origin randomly.
	// - `"hash"`: Select an origin by computing a hash over the CF-Connecting-IP address.
	// - `"least_outstanding_requests"`: Select an origin by taking into consideration origin weights, as well as each origin's number of outstanding requests. Origins with more pending requests are weighted proportionately less relative to others.
	// - `"least_connections"`: Select an origin by taking into consideration origin weights, as well as each origin's number of open connections. Origins with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`
}

type OriginSteeringParameters struct {

	// (String) The type of origin steering policy to use.
	// The type of origin steering policy to use.
	// - `"random"`: Select an origin randomly.
	// - `"hash"`: Select an origin by computing a hash over the CF-Connecting-IP address.
	// - `"least_outstanding_requests"`: Select an origin by taking into consideration origin weights, as well as each origin's number of outstanding requests. Origins with more pending requests are weighted proportionately less relative to others.
	// - `"least_connections"`: Select an origin by taking into consideration origin weights, as well as each origin's number of open connections. Origins with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections.
	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`
}

type OriginsInitParameters struct {

	// (String) The IP address (IPv4 or IPv6) of the origin, or its publicly addressable hostname. Hostnames entered here should resolve directly to the origin, and not be a hostname proxied by Cloudflare. To set an internal/reserved address, virtual_network_id must also be set.
	// The IP address (IPv4 or IPv6) of the origin, or its publicly addressable hostname. Hostnames entered here should resolve directly to the origin, and not be a hostname proxied by Cloudflare. To set an internal/reserved address, virtual_network_id must also be set.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (Boolean) Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
	// Whether to enable (the default) this origin within the pool. Disabled origins will not receive traffic and are excluded from health checks. The origin will only be disabled for the current pool.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes) The request header is used to pass additional information with an HTTP request. Currently supported header is 'Host'. (see below for nested schema)
	Header *HeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`

	// (String) A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
	// A human-identifiable name for the origin.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The virtual network subnet ID the origin belongs in. Virtual network must also belong to the account.
	// The virtual network subnet ID the origin belongs in. Virtual network must also belong to the account.
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`

	// (Number) The weight of this origin relative to other origins in the pool. Based on the configured weight the total traffic is distributed among origins within the pool.
	// The weight of this origin relative to other origins in the pool. Based on the configured weight the total traffic is distributed among origins within the pool.
	// - `origin_steering.policy="least_outstanding_requests"`: Use weight to scale the origin's outstanding requests.
	// - `origin_steering.policy="least_connections"`: Use weight to scale the origin's open connections.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type OriginsObservation struct {

	// (String) The IP address (IPv4 or IPv6) of the origin, or its publicly addressable hostname. Hostnames entered here should resolve directly to the origin, and not be a hostname proxied by Cloudflare. To set an internal/reserved address, virtual_network_id must also be set.
	// The IP address (IPv4 or IPv6) of the origin, or its publicly addressable hostname. Hostnames entered here should resolve directly to the origin, and not be a hostname proxied by Cloudflare. To set an internal/reserved address, virtual_network_id must also be set.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (String) This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
	// This field shows up only if the origin is disabled. This field is set with the time the origin was disabled.
	DisabledAt *string `json:"disabledAt,omitempty" tf:"disabled_at,omitempty"`

	// (Boolean) Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
	// Whether to enable (the default) this origin within the pool. Disabled origins will not receive traffic and are excluded from health checks. The origin will only be disabled for the current pool.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes) The request header is used to pass additional information with an HTTP request. Currently supported header is 'Host'. (see below for nested schema)
	Header *HeaderObservation `json:"header,omitempty" tf:"header,omitempty"`

	// (String) A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
	// A human-identifiable name for the origin.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The virtual network subnet ID the origin belongs in. Virtual network must also belong to the account.
	// The virtual network subnet ID the origin belongs in. Virtual network must also belong to the account.
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`

	// (Number) The weight of this origin relative to other origins in the pool. Based on the configured weight the total traffic is distributed among origins within the pool.
	// The weight of this origin relative to other origins in the pool. Based on the configured weight the total traffic is distributed among origins within the pool.
	// - `origin_steering.policy="least_outstanding_requests"`: Use weight to scale the origin's outstanding requests.
	// - `origin_steering.policy="least_connections"`: Use weight to scale the origin's open connections.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type OriginsParameters struct {

	// (String) The IP address (IPv4 or IPv6) of the origin, or its publicly addressable hostname. Hostnames entered here should resolve directly to the origin, and not be a hostname proxied by Cloudflare. To set an internal/reserved address, virtual_network_id must also be set.
	// The IP address (IPv4 or IPv6) of the origin, or its publicly addressable hostname. Hostnames entered here should resolve directly to the origin, and not be a hostname proxied by Cloudflare. To set an internal/reserved address, virtual_network_id must also be set.
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (Boolean) Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
	// Whether to enable (the default) this origin within the pool. Disabled origins will not receive traffic and are excluded from health checks. The origin will only be disabled for the current pool.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes) The request header is used to pass additional information with an HTTP request. Currently supported header is 'Host'. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Header *HeaderParameters `json:"header,omitempty" tf:"header,omitempty"`

	// (String) A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
	// A human-identifiable name for the origin.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The virtual network subnet ID the origin belongs in. Virtual network must also belong to the account.
	// The virtual network subnet ID the origin belongs in. Virtual network must also belong to the account.
	// +kubebuilder:validation:Optional
	VirtualNetworkID *string `json:"virtualNetworkId,omitempty" tf:"virtual_network_id,omitempty"`

	// (Number) The weight of this origin relative to other origins in the pool. Based on the configured weight the total traffic is distributed among origins within the pool.
	// The weight of this origin relative to other origins in the pool. Based on the configured weight the total traffic is distributed among origins within the pool.
	// - `origin_steering.policy="least_outstanding_requests"`: Use weight to scale the origin's outstanding requests.
	// - `origin_steering.policy="least_connections"`: Use weight to scale the origin's open connections.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type PoolInitParameters struct {

	// (Boolean) If set true, disable notifications for this type of resource (pool or origin).
	// If set true, disable notifications for this type of resource (pool or origin).
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// (Boolean) If present, send notifications only for this health status (e.g. false for only DOWN events). Use null to reset (all events).
	// If present, send notifications only for this health status (e.g. false for only DOWN events). Use null to reset (all events).
	Healthy *bool `json:"healthy,omitempty" tf:"healthy,omitempty"`
}

type PoolObservation struct {

	// (Boolean) If set true, disable notifications for this type of resource (pool or origin).
	// If set true, disable notifications for this type of resource (pool or origin).
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// (Boolean) If present, send notifications only for this health status (e.g. false for only DOWN events). Use null to reset (all events).
	// If present, send notifications only for this health status (e.g. false for only DOWN events). Use null to reset (all events).
	Healthy *bool `json:"healthy,omitempty" tf:"healthy,omitempty"`
}

type PoolParameters struct {

	// (Boolean) If set true, disable notifications for this type of resource (pool or origin).
	// If set true, disable notifications for this type of resource (pool or origin).
	// +kubebuilder:validation:Optional
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// (Boolean) If present, send notifications only for this health status (e.g. false for only DOWN events). Use null to reset (all events).
	// If present, send notifications only for this health status (e.g. false for only DOWN events). Use null to reset (all events).
	// +kubebuilder:validation:Optional
	Healthy *bool `json:"healthy,omitempty" tf:"healthy,omitempty"`
}

// BalancerPoolSpec defines the desired state of BalancerPool
type BalancerPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BalancerPoolParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BalancerPoolInitParameters `json:"initProvider,omitempty"`
}

// BalancerPoolStatus defines the observed state of BalancerPool.
type BalancerPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BalancerPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BalancerPool is the Schema for the BalancerPools API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type BalancerPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.origins) || (has(self.initProvider) && has(self.initProvider.origins))",message="spec.forProvider.origins is a required parameter"
	Spec   BalancerPoolSpec   `json:"spec"`
	Status BalancerPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BalancerPoolList contains a list of BalancerPools
type BalancerPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BalancerPool `json:"items"`
}

// Repository type metadata.
var (
	BalancerPool_Kind             = "BalancerPool"
	BalancerPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BalancerPool_Kind}.String()
	BalancerPool_KindAPIVersion   = BalancerPool_Kind + "." + CRDGroupVersion.String()
	BalancerPool_GroupVersionKind = CRDGroupVersion.WithKind(BalancerPool_Kind)
)

func init() {
	SchemeBuilder.Register(&BalancerPool{}, &BalancerPoolList{})
}
