//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AdaptiveRoutingInitParameters) DeepCopyInto(out *AdaptiveRoutingInitParameters) {
	*out = *in
	if in.FailoverAcrossPools != nil {
		in, out := &in.FailoverAcrossPools, &out.FailoverAcrossPools
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AdaptiveRoutingInitParameters.
func (in *AdaptiveRoutingInitParameters) DeepCopy() *AdaptiveRoutingInitParameters {
	if in == nil {
		return nil
	}
	out := new(AdaptiveRoutingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AdaptiveRoutingObservation) DeepCopyInto(out *AdaptiveRoutingObservation) {
	*out = *in
	if in.FailoverAcrossPools != nil {
		in, out := &in.FailoverAcrossPools, &out.FailoverAcrossPools
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AdaptiveRoutingObservation.
func (in *AdaptiveRoutingObservation) DeepCopy() *AdaptiveRoutingObservation {
	if in == nil {
		return nil
	}
	out := new(AdaptiveRoutingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AdaptiveRoutingParameters) DeepCopyInto(out *AdaptiveRoutingParameters) {
	*out = *in
	if in.FailoverAcrossPools != nil {
		in, out := &in.FailoverAcrossPools, &out.FailoverAcrossPools
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AdaptiveRoutingParameters.
func (in *AdaptiveRoutingParameters) DeepCopy() *AdaptiveRoutingParameters {
	if in == nil {
		return nil
	}
	out := new(AdaptiveRoutingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Balancer) DeepCopyInto(out *Balancer) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Balancer.
func (in *Balancer) DeepCopy() *Balancer {
	if in == nil {
		return nil
	}
	out := new(Balancer)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Balancer) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerInitParameters) DeepCopyInto(out *BalancerInitParameters) {
	*out = *in
	if in.AdaptiveRouting != nil {
		in, out := &in.AdaptiveRouting, &out.AdaptiveRouting
		*out = new(AdaptiveRoutingInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.CountryPools != nil {
		in, out := &in.CountryPools, &out.CountryPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.DefaultPools != nil {
		in, out := &in.DefaultPools, &out.DefaultPools
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.FallbackPool != nil {
		in, out := &in.FallbackPool, &out.FallbackPool
		*out = new(string)
		**out = **in
	}
	if in.LocationStrategy != nil {
		in, out := &in.LocationStrategy, &out.LocationStrategy
		*out = new(LocationStrategyInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Networks != nil {
		in, out := &in.Networks, &out.Networks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PopPools != nil {
		in, out := &in.PopPools, &out.PopPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.Proxied != nil {
		in, out := &in.Proxied, &out.Proxied
		*out = new(bool)
		**out = **in
	}
	if in.RandomSteering != nil {
		in, out := &in.RandomSteering, &out.RandomSteering
		*out = new(RandomSteeringInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.RegionPools != nil {
		in, out := &in.RegionPools, &out.RegionPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.Rules != nil {
		in, out := &in.Rules, &out.Rules
		*out = make([]RulesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SessionAffinity != nil {
		in, out := &in.SessionAffinity, &out.SessionAffinity
		*out = new(string)
		**out = **in
	}
	if in.SessionAffinityAttributes != nil {
		in, out := &in.SessionAffinityAttributes, &out.SessionAffinityAttributes
		*out = new(BalancerSessionAffinityAttributesInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.SessionAffinityTTL != nil {
		in, out := &in.SessionAffinityTTL, &out.SessionAffinityTTL
		*out = new(float64)
		**out = **in
	}
	if in.SteeringPolicy != nil {
		in, out := &in.SteeringPolicy, &out.SteeringPolicy
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerInitParameters.
func (in *BalancerInitParameters) DeepCopy() *BalancerInitParameters {
	if in == nil {
		return nil
	}
	out := new(BalancerInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerList) DeepCopyInto(out *BalancerList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Balancer, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerList.
func (in *BalancerList) DeepCopy() *BalancerList {
	if in == nil {
		return nil
	}
	out := new(BalancerList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BalancerList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerMonitor) DeepCopyInto(out *BalancerMonitor) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerMonitor.
func (in *BalancerMonitor) DeepCopy() *BalancerMonitor {
	if in == nil {
		return nil
	}
	out := new(BalancerMonitor)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BalancerMonitor) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerMonitorInitParameters) DeepCopyInto(out *BalancerMonitorInitParameters) {
	*out = *in
	if in.AccountID != nil {
		in, out := &in.AccountID, &out.AccountID
		*out = new(string)
		**out = **in
	}
	if in.AllowInsecure != nil {
		in, out := &in.AllowInsecure, &out.AllowInsecure
		*out = new(bool)
		**out = **in
	}
	if in.ConsecutiveDown != nil {
		in, out := &in.ConsecutiveDown, &out.ConsecutiveDown
		*out = new(float64)
		**out = **in
	}
	if in.ConsecutiveUp != nil {
		in, out := &in.ConsecutiveUp, &out.ConsecutiveUp
		*out = new(float64)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ExpectedBody != nil {
		in, out := &in.ExpectedBody, &out.ExpectedBody
		*out = new(string)
		**out = **in
	}
	if in.ExpectedCodes != nil {
		in, out := &in.ExpectedCodes, &out.ExpectedCodes
		*out = new(string)
		**out = **in
	}
	if in.FollowRedirects != nil {
		in, out := &in.FollowRedirects, &out.FollowRedirects
		*out = new(bool)
		**out = **in
	}
	if in.Header != nil {
		in, out := &in.Header, &out.Header
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(float64)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.ProbeZone != nil {
		in, out := &in.ProbeZone, &out.ProbeZone
		*out = new(string)
		**out = **in
	}
	if in.Retries != nil {
		in, out := &in.Retries, &out.Retries
		*out = new(float64)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerMonitorInitParameters.
func (in *BalancerMonitorInitParameters) DeepCopy() *BalancerMonitorInitParameters {
	if in == nil {
		return nil
	}
	out := new(BalancerMonitorInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerMonitorList) DeepCopyInto(out *BalancerMonitorList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]BalancerMonitor, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerMonitorList.
func (in *BalancerMonitorList) DeepCopy() *BalancerMonitorList {
	if in == nil {
		return nil
	}
	out := new(BalancerMonitorList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BalancerMonitorList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerMonitorObservation) DeepCopyInto(out *BalancerMonitorObservation) {
	*out = *in
	if in.AccountID != nil {
		in, out := &in.AccountID, &out.AccountID
		*out = new(string)
		**out = **in
	}
	if in.AllowInsecure != nil {
		in, out := &in.AllowInsecure, &out.AllowInsecure
		*out = new(bool)
		**out = **in
	}
	if in.ConsecutiveDown != nil {
		in, out := &in.ConsecutiveDown, &out.ConsecutiveDown
		*out = new(float64)
		**out = **in
	}
	if in.ConsecutiveUp != nil {
		in, out := &in.ConsecutiveUp, &out.ConsecutiveUp
		*out = new(float64)
		**out = **in
	}
	if in.CreatedOn != nil {
		in, out := &in.CreatedOn, &out.CreatedOn
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ExpectedBody != nil {
		in, out := &in.ExpectedBody, &out.ExpectedBody
		*out = new(string)
		**out = **in
	}
	if in.ExpectedCodes != nil {
		in, out := &in.ExpectedCodes, &out.ExpectedCodes
		*out = new(string)
		**out = **in
	}
	if in.FollowRedirects != nil {
		in, out := &in.FollowRedirects, &out.FollowRedirects
		*out = new(bool)
		**out = **in
	}
	if in.Header != nil {
		in, out := &in.Header, &out.Header
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(float64)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.ModifiedOn != nil {
		in, out := &in.ModifiedOn, &out.ModifiedOn
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.ProbeZone != nil {
		in, out := &in.ProbeZone, &out.ProbeZone
		*out = new(string)
		**out = **in
	}
	if in.Retries != nil {
		in, out := &in.Retries, &out.Retries
		*out = new(float64)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerMonitorObservation.
func (in *BalancerMonitorObservation) DeepCopy() *BalancerMonitorObservation {
	if in == nil {
		return nil
	}
	out := new(BalancerMonitorObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerMonitorParameters) DeepCopyInto(out *BalancerMonitorParameters) {
	*out = *in
	if in.AccountID != nil {
		in, out := &in.AccountID, &out.AccountID
		*out = new(string)
		**out = **in
	}
	if in.AllowInsecure != nil {
		in, out := &in.AllowInsecure, &out.AllowInsecure
		*out = new(bool)
		**out = **in
	}
	if in.ConsecutiveDown != nil {
		in, out := &in.ConsecutiveDown, &out.ConsecutiveDown
		*out = new(float64)
		**out = **in
	}
	if in.ConsecutiveUp != nil {
		in, out := &in.ConsecutiveUp, &out.ConsecutiveUp
		*out = new(float64)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ExpectedBody != nil {
		in, out := &in.ExpectedBody, &out.ExpectedBody
		*out = new(string)
		**out = **in
	}
	if in.ExpectedCodes != nil {
		in, out := &in.ExpectedCodes, &out.ExpectedCodes
		*out = new(string)
		**out = **in
	}
	if in.FollowRedirects != nil {
		in, out := &in.FollowRedirects, &out.FollowRedirects
		*out = new(bool)
		**out = **in
	}
	if in.Header != nil {
		in, out := &in.Header, &out.Header
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(float64)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.ProbeZone != nil {
		in, out := &in.ProbeZone, &out.ProbeZone
		*out = new(string)
		**out = **in
	}
	if in.Retries != nil {
		in, out := &in.Retries, &out.Retries
		*out = new(float64)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerMonitorParameters.
func (in *BalancerMonitorParameters) DeepCopy() *BalancerMonitorParameters {
	if in == nil {
		return nil
	}
	out := new(BalancerMonitorParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerMonitorSpec) DeepCopyInto(out *BalancerMonitorSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerMonitorSpec.
func (in *BalancerMonitorSpec) DeepCopy() *BalancerMonitorSpec {
	if in == nil {
		return nil
	}
	out := new(BalancerMonitorSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerMonitorStatus) DeepCopyInto(out *BalancerMonitorStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerMonitorStatus.
func (in *BalancerMonitorStatus) DeepCopy() *BalancerMonitorStatus {
	if in == nil {
		return nil
	}
	out := new(BalancerMonitorStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerObservation) DeepCopyInto(out *BalancerObservation) {
	*out = *in
	if in.AdaptiveRouting != nil {
		in, out := &in.AdaptiveRouting, &out.AdaptiveRouting
		*out = new(AdaptiveRoutingObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.CountryPools != nil {
		in, out := &in.CountryPools, &out.CountryPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.CreatedOn != nil {
		in, out := &in.CreatedOn, &out.CreatedOn
		*out = new(string)
		**out = **in
	}
	if in.DefaultPools != nil {
		in, out := &in.DefaultPools, &out.DefaultPools
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.FallbackPool != nil {
		in, out := &in.FallbackPool, &out.FallbackPool
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LocationStrategy != nil {
		in, out := &in.LocationStrategy, &out.LocationStrategy
		*out = new(LocationStrategyObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.ModifiedOn != nil {
		in, out := &in.ModifiedOn, &out.ModifiedOn
		*out = new(string)
		**out = **in
	}
	if in.Networks != nil {
		in, out := &in.Networks, &out.Networks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PopPools != nil {
		in, out := &in.PopPools, &out.PopPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.Proxied != nil {
		in, out := &in.Proxied, &out.Proxied
		*out = new(bool)
		**out = **in
	}
	if in.RandomSteering != nil {
		in, out := &in.RandomSteering, &out.RandomSteering
		*out = new(RandomSteeringObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.RegionPools != nil {
		in, out := &in.RegionPools, &out.RegionPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.Rules != nil {
		in, out := &in.Rules, &out.Rules
		*out = make([]RulesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SessionAffinity != nil {
		in, out := &in.SessionAffinity, &out.SessionAffinity
		*out = new(string)
		**out = **in
	}
	if in.SessionAffinityAttributes != nil {
		in, out := &in.SessionAffinityAttributes, &out.SessionAffinityAttributes
		*out = new(BalancerSessionAffinityAttributesObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.SessionAffinityTTL != nil {
		in, out := &in.SessionAffinityTTL, &out.SessionAffinityTTL
		*out = new(float64)
		**out = **in
	}
	if in.SteeringPolicy != nil {
		in, out := &in.SteeringPolicy, &out.SteeringPolicy
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerObservation.
func (in *BalancerObservation) DeepCopy() *BalancerObservation {
	if in == nil {
		return nil
	}
	out := new(BalancerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerParameters) DeepCopyInto(out *BalancerParameters) {
	*out = *in
	if in.AdaptiveRouting != nil {
		in, out := &in.AdaptiveRouting, &out.AdaptiveRouting
		*out = new(AdaptiveRoutingParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.CountryPools != nil {
		in, out := &in.CountryPools, &out.CountryPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.DefaultPools != nil {
		in, out := &in.DefaultPools, &out.DefaultPools
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.FallbackPool != nil {
		in, out := &in.FallbackPool, &out.FallbackPool
		*out = new(string)
		**out = **in
	}
	if in.LocationStrategy != nil {
		in, out := &in.LocationStrategy, &out.LocationStrategy
		*out = new(LocationStrategyParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Networks != nil {
		in, out := &in.Networks, &out.Networks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PopPools != nil {
		in, out := &in.PopPools, &out.PopPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.Proxied != nil {
		in, out := &in.Proxied, &out.Proxied
		*out = new(bool)
		**out = **in
	}
	if in.RandomSteering != nil {
		in, out := &in.RandomSteering, &out.RandomSteering
		*out = new(RandomSteeringParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.RegionPools != nil {
		in, out := &in.RegionPools, &out.RegionPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.Rules != nil {
		in, out := &in.Rules, &out.Rules
		*out = make([]RulesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SessionAffinity != nil {
		in, out := &in.SessionAffinity, &out.SessionAffinity
		*out = new(string)
		**out = **in
	}
	if in.SessionAffinityAttributes != nil {
		in, out := &in.SessionAffinityAttributes, &out.SessionAffinityAttributes
		*out = new(BalancerSessionAffinityAttributesParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.SessionAffinityTTL != nil {
		in, out := &in.SessionAffinityTTL, &out.SessionAffinityTTL
		*out = new(float64)
		**out = **in
	}
	if in.SteeringPolicy != nil {
		in, out := &in.SteeringPolicy, &out.SteeringPolicy
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerParameters.
func (in *BalancerParameters) DeepCopy() *BalancerParameters {
	if in == nil {
		return nil
	}
	out := new(BalancerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerPool) DeepCopyInto(out *BalancerPool) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerPool.
func (in *BalancerPool) DeepCopy() *BalancerPool {
	if in == nil {
		return nil
	}
	out := new(BalancerPool)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BalancerPool) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerPoolInitParameters) DeepCopyInto(out *BalancerPoolInitParameters) {
	*out = *in
	if in.AccountID != nil {
		in, out := &in.AccountID, &out.AccountID
		*out = new(string)
		**out = **in
	}
	if in.CheckRegions != nil {
		in, out := &in.CheckRegions, &out.CheckRegions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Latitude != nil {
		in, out := &in.Latitude, &out.Latitude
		*out = new(float64)
		**out = **in
	}
	if in.LoadShedding != nil {
		in, out := &in.LoadShedding, &out.LoadShedding
		*out = new(LoadSheddingInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Longitude != nil {
		in, out := &in.Longitude, &out.Longitude
		*out = new(float64)
		**out = **in
	}
	if in.MinimumOrigins != nil {
		in, out := &in.MinimumOrigins, &out.MinimumOrigins
		*out = new(float64)
		**out = **in
	}
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(string)
		**out = **in
	}
	if in.NotificationEmail != nil {
		in, out := &in.NotificationEmail, &out.NotificationEmail
		*out = new(string)
		**out = **in
	}
	if in.NotificationFilter != nil {
		in, out := &in.NotificationFilter, &out.NotificationFilter
		*out = new(NotificationFilterInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.OriginSteering != nil {
		in, out := &in.OriginSteering, &out.OriginSteering
		*out = new(OriginSteeringInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Origins != nil {
		in, out := &in.Origins, &out.Origins
		*out = make([]OriginsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerPoolInitParameters.
func (in *BalancerPoolInitParameters) DeepCopy() *BalancerPoolInitParameters {
	if in == nil {
		return nil
	}
	out := new(BalancerPoolInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerPoolList) DeepCopyInto(out *BalancerPoolList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]BalancerPool, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerPoolList.
func (in *BalancerPoolList) DeepCopy() *BalancerPoolList {
	if in == nil {
		return nil
	}
	out := new(BalancerPoolList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BalancerPoolList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerPoolObservation) DeepCopyInto(out *BalancerPoolObservation) {
	*out = *in
	if in.AccountID != nil {
		in, out := &in.AccountID, &out.AccountID
		*out = new(string)
		**out = **in
	}
	if in.CheckRegions != nil {
		in, out := &in.CheckRegions, &out.CheckRegions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.CreatedOn != nil {
		in, out := &in.CreatedOn, &out.CreatedOn
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DisabledAt != nil {
		in, out := &in.DisabledAt, &out.DisabledAt
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Latitude != nil {
		in, out := &in.Latitude, &out.Latitude
		*out = new(float64)
		**out = **in
	}
	if in.LoadShedding != nil {
		in, out := &in.LoadShedding, &out.LoadShedding
		*out = new(LoadSheddingObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.Longitude != nil {
		in, out := &in.Longitude, &out.Longitude
		*out = new(float64)
		**out = **in
	}
	if in.MinimumOrigins != nil {
		in, out := &in.MinimumOrigins, &out.MinimumOrigins
		*out = new(float64)
		**out = **in
	}
	if in.ModifiedOn != nil {
		in, out := &in.ModifiedOn, &out.ModifiedOn
		*out = new(string)
		**out = **in
	}
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(string)
		**out = **in
	}
	if in.Networks != nil {
		in, out := &in.Networks, &out.Networks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.NotificationEmail != nil {
		in, out := &in.NotificationEmail, &out.NotificationEmail
		*out = new(string)
		**out = **in
	}
	if in.NotificationFilter != nil {
		in, out := &in.NotificationFilter, &out.NotificationFilter
		*out = new(NotificationFilterObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.OriginSteering != nil {
		in, out := &in.OriginSteering, &out.OriginSteering
		*out = new(OriginSteeringObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.Origins != nil {
		in, out := &in.Origins, &out.Origins
		*out = make([]OriginsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerPoolObservation.
func (in *BalancerPoolObservation) DeepCopy() *BalancerPoolObservation {
	if in == nil {
		return nil
	}
	out := new(BalancerPoolObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerPoolParameters) DeepCopyInto(out *BalancerPoolParameters) {
	*out = *in
	if in.AccountID != nil {
		in, out := &in.AccountID, &out.AccountID
		*out = new(string)
		**out = **in
	}
	if in.CheckRegions != nil {
		in, out := &in.CheckRegions, &out.CheckRegions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Latitude != nil {
		in, out := &in.Latitude, &out.Latitude
		*out = new(float64)
		**out = **in
	}
	if in.LoadShedding != nil {
		in, out := &in.LoadShedding, &out.LoadShedding
		*out = new(LoadSheddingParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Longitude != nil {
		in, out := &in.Longitude, &out.Longitude
		*out = new(float64)
		**out = **in
	}
	if in.MinimumOrigins != nil {
		in, out := &in.MinimumOrigins, &out.MinimumOrigins
		*out = new(float64)
		**out = **in
	}
	if in.Monitor != nil {
		in, out := &in.Monitor, &out.Monitor
		*out = new(string)
		**out = **in
	}
	if in.NotificationEmail != nil {
		in, out := &in.NotificationEmail, &out.NotificationEmail
		*out = new(string)
		**out = **in
	}
	if in.NotificationFilter != nil {
		in, out := &in.NotificationFilter, &out.NotificationFilter
		*out = new(NotificationFilterParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.OriginSteering != nil {
		in, out := &in.OriginSteering, &out.OriginSteering
		*out = new(OriginSteeringParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Origins != nil {
		in, out := &in.Origins, &out.Origins
		*out = make([]OriginsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerPoolParameters.
func (in *BalancerPoolParameters) DeepCopy() *BalancerPoolParameters {
	if in == nil {
		return nil
	}
	out := new(BalancerPoolParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerPoolSpec) DeepCopyInto(out *BalancerPoolSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerPoolSpec.
func (in *BalancerPoolSpec) DeepCopy() *BalancerPoolSpec {
	if in == nil {
		return nil
	}
	out := new(BalancerPoolSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerPoolStatus) DeepCopyInto(out *BalancerPoolStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerPoolStatus.
func (in *BalancerPoolStatus) DeepCopy() *BalancerPoolStatus {
	if in == nil {
		return nil
	}
	out := new(BalancerPoolStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerSessionAffinityAttributesInitParameters) DeepCopyInto(out *BalancerSessionAffinityAttributesInitParameters) {
	*out = *in
	if in.DrainDuration != nil {
		in, out := &in.DrainDuration, &out.DrainDuration
		*out = new(float64)
		**out = **in
	}
	if in.Headers != nil {
		in, out := &in.Headers, &out.Headers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RequireAllHeaders != nil {
		in, out := &in.RequireAllHeaders, &out.RequireAllHeaders
		*out = new(bool)
		**out = **in
	}
	if in.Samesite != nil {
		in, out := &in.Samesite, &out.Samesite
		*out = new(string)
		**out = **in
	}
	if in.Secure != nil {
		in, out := &in.Secure, &out.Secure
		*out = new(string)
		**out = **in
	}
	if in.ZeroDowntimeFailover != nil {
		in, out := &in.ZeroDowntimeFailover, &out.ZeroDowntimeFailover
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerSessionAffinityAttributesInitParameters.
func (in *BalancerSessionAffinityAttributesInitParameters) DeepCopy() *BalancerSessionAffinityAttributesInitParameters {
	if in == nil {
		return nil
	}
	out := new(BalancerSessionAffinityAttributesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerSessionAffinityAttributesObservation) DeepCopyInto(out *BalancerSessionAffinityAttributesObservation) {
	*out = *in
	if in.DrainDuration != nil {
		in, out := &in.DrainDuration, &out.DrainDuration
		*out = new(float64)
		**out = **in
	}
	if in.Headers != nil {
		in, out := &in.Headers, &out.Headers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RequireAllHeaders != nil {
		in, out := &in.RequireAllHeaders, &out.RequireAllHeaders
		*out = new(bool)
		**out = **in
	}
	if in.Samesite != nil {
		in, out := &in.Samesite, &out.Samesite
		*out = new(string)
		**out = **in
	}
	if in.Secure != nil {
		in, out := &in.Secure, &out.Secure
		*out = new(string)
		**out = **in
	}
	if in.ZeroDowntimeFailover != nil {
		in, out := &in.ZeroDowntimeFailover, &out.ZeroDowntimeFailover
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerSessionAffinityAttributesObservation.
func (in *BalancerSessionAffinityAttributesObservation) DeepCopy() *BalancerSessionAffinityAttributesObservation {
	if in == nil {
		return nil
	}
	out := new(BalancerSessionAffinityAttributesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerSessionAffinityAttributesParameters) DeepCopyInto(out *BalancerSessionAffinityAttributesParameters) {
	*out = *in
	if in.DrainDuration != nil {
		in, out := &in.DrainDuration, &out.DrainDuration
		*out = new(float64)
		**out = **in
	}
	if in.Headers != nil {
		in, out := &in.Headers, &out.Headers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RequireAllHeaders != nil {
		in, out := &in.RequireAllHeaders, &out.RequireAllHeaders
		*out = new(bool)
		**out = **in
	}
	if in.Samesite != nil {
		in, out := &in.Samesite, &out.Samesite
		*out = new(string)
		**out = **in
	}
	if in.Secure != nil {
		in, out := &in.Secure, &out.Secure
		*out = new(string)
		**out = **in
	}
	if in.ZeroDowntimeFailover != nil {
		in, out := &in.ZeroDowntimeFailover, &out.ZeroDowntimeFailover
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerSessionAffinityAttributesParameters.
func (in *BalancerSessionAffinityAttributesParameters) DeepCopy() *BalancerSessionAffinityAttributesParameters {
	if in == nil {
		return nil
	}
	out := new(BalancerSessionAffinityAttributesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerSpec) DeepCopyInto(out *BalancerSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerSpec.
func (in *BalancerSpec) DeepCopy() *BalancerSpec {
	if in == nil {
		return nil
	}
	out := new(BalancerSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BalancerStatus) DeepCopyInto(out *BalancerStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BalancerStatus.
func (in *BalancerStatus) DeepCopy() *BalancerStatus {
	if in == nil {
		return nil
	}
	out := new(BalancerStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FixedResponseInitParameters) DeepCopyInto(out *FixedResponseInitParameters) {
	*out = *in
	if in.ContentType != nil {
		in, out := &in.ContentType, &out.ContentType
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.MessageBody != nil {
		in, out := &in.MessageBody, &out.MessageBody
		*out = new(string)
		**out = **in
	}
	if in.StatusCode != nil {
		in, out := &in.StatusCode, &out.StatusCode
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FixedResponseInitParameters.
func (in *FixedResponseInitParameters) DeepCopy() *FixedResponseInitParameters {
	if in == nil {
		return nil
	}
	out := new(FixedResponseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FixedResponseObservation) DeepCopyInto(out *FixedResponseObservation) {
	*out = *in
	if in.ContentType != nil {
		in, out := &in.ContentType, &out.ContentType
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.MessageBody != nil {
		in, out := &in.MessageBody, &out.MessageBody
		*out = new(string)
		**out = **in
	}
	if in.StatusCode != nil {
		in, out := &in.StatusCode, &out.StatusCode
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FixedResponseObservation.
func (in *FixedResponseObservation) DeepCopy() *FixedResponseObservation {
	if in == nil {
		return nil
	}
	out := new(FixedResponseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FixedResponseParameters) DeepCopyInto(out *FixedResponseParameters) {
	*out = *in
	if in.ContentType != nil {
		in, out := &in.ContentType, &out.ContentType
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.MessageBody != nil {
		in, out := &in.MessageBody, &out.MessageBody
		*out = new(string)
		**out = **in
	}
	if in.StatusCode != nil {
		in, out := &in.StatusCode, &out.StatusCode
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FixedResponseParameters.
func (in *FixedResponseParameters) DeepCopy() *FixedResponseParameters {
	if in == nil {
		return nil
	}
	out := new(FixedResponseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HeaderInitParameters) DeepCopyInto(out *HeaderInitParameters) {
	*out = *in
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HeaderInitParameters.
func (in *HeaderInitParameters) DeepCopy() *HeaderInitParameters {
	if in == nil {
		return nil
	}
	out := new(HeaderInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HeaderObservation) DeepCopyInto(out *HeaderObservation) {
	*out = *in
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HeaderObservation.
func (in *HeaderObservation) DeepCopy() *HeaderObservation {
	if in == nil {
		return nil
	}
	out := new(HeaderObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HeaderParameters) DeepCopyInto(out *HeaderParameters) {
	*out = *in
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HeaderParameters.
func (in *HeaderParameters) DeepCopy() *HeaderParameters {
	if in == nil {
		return nil
	}
	out := new(HeaderParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LoadSheddingInitParameters) DeepCopyInto(out *LoadSheddingInitParameters) {
	*out = *in
	if in.DefaultPercent != nil {
		in, out := &in.DefaultPercent, &out.DefaultPercent
		*out = new(float64)
		**out = **in
	}
	if in.DefaultPolicy != nil {
		in, out := &in.DefaultPolicy, &out.DefaultPolicy
		*out = new(string)
		**out = **in
	}
	if in.SessionPercent != nil {
		in, out := &in.SessionPercent, &out.SessionPercent
		*out = new(float64)
		**out = **in
	}
	if in.SessionPolicy != nil {
		in, out := &in.SessionPolicy, &out.SessionPolicy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LoadSheddingInitParameters.
func (in *LoadSheddingInitParameters) DeepCopy() *LoadSheddingInitParameters {
	if in == nil {
		return nil
	}
	out := new(LoadSheddingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LoadSheddingObservation) DeepCopyInto(out *LoadSheddingObservation) {
	*out = *in
	if in.DefaultPercent != nil {
		in, out := &in.DefaultPercent, &out.DefaultPercent
		*out = new(float64)
		**out = **in
	}
	if in.DefaultPolicy != nil {
		in, out := &in.DefaultPolicy, &out.DefaultPolicy
		*out = new(string)
		**out = **in
	}
	if in.SessionPercent != nil {
		in, out := &in.SessionPercent, &out.SessionPercent
		*out = new(float64)
		**out = **in
	}
	if in.SessionPolicy != nil {
		in, out := &in.SessionPolicy, &out.SessionPolicy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LoadSheddingObservation.
func (in *LoadSheddingObservation) DeepCopy() *LoadSheddingObservation {
	if in == nil {
		return nil
	}
	out := new(LoadSheddingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LoadSheddingParameters) DeepCopyInto(out *LoadSheddingParameters) {
	*out = *in
	if in.DefaultPercent != nil {
		in, out := &in.DefaultPercent, &out.DefaultPercent
		*out = new(float64)
		**out = **in
	}
	if in.DefaultPolicy != nil {
		in, out := &in.DefaultPolicy, &out.DefaultPolicy
		*out = new(string)
		**out = **in
	}
	if in.SessionPercent != nil {
		in, out := &in.SessionPercent, &out.SessionPercent
		*out = new(float64)
		**out = **in
	}
	if in.SessionPolicy != nil {
		in, out := &in.SessionPolicy, &out.SessionPolicy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LoadSheddingParameters.
func (in *LoadSheddingParameters) DeepCopy() *LoadSheddingParameters {
	if in == nil {
		return nil
	}
	out := new(LoadSheddingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocationStrategyInitParameters) DeepCopyInto(out *LocationStrategyInitParameters) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.PreferEcs != nil {
		in, out := &in.PreferEcs, &out.PreferEcs
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocationStrategyInitParameters.
func (in *LocationStrategyInitParameters) DeepCopy() *LocationStrategyInitParameters {
	if in == nil {
		return nil
	}
	out := new(LocationStrategyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocationStrategyObservation) DeepCopyInto(out *LocationStrategyObservation) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.PreferEcs != nil {
		in, out := &in.PreferEcs, &out.PreferEcs
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocationStrategyObservation.
func (in *LocationStrategyObservation) DeepCopy() *LocationStrategyObservation {
	if in == nil {
		return nil
	}
	out := new(LocationStrategyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LocationStrategyParameters) DeepCopyInto(out *LocationStrategyParameters) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.PreferEcs != nil {
		in, out := &in.PreferEcs, &out.PreferEcs
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LocationStrategyParameters.
func (in *LocationStrategyParameters) DeepCopy() *LocationStrategyParameters {
	if in == nil {
		return nil
	}
	out := new(LocationStrategyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationFilterInitParameters) DeepCopyInto(out *NotificationFilterInitParameters) {
	*out = *in
	if in.Origin != nil {
		in, out := &in.Origin, &out.Origin
		*out = new(OriginInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Pool != nil {
		in, out := &in.Pool, &out.Pool
		*out = new(PoolInitParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationFilterInitParameters.
func (in *NotificationFilterInitParameters) DeepCopy() *NotificationFilterInitParameters {
	if in == nil {
		return nil
	}
	out := new(NotificationFilterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationFilterObservation) DeepCopyInto(out *NotificationFilterObservation) {
	*out = *in
	if in.Origin != nil {
		in, out := &in.Origin, &out.Origin
		*out = new(OriginObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.Pool != nil {
		in, out := &in.Pool, &out.Pool
		*out = new(PoolObservation)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationFilterObservation.
func (in *NotificationFilterObservation) DeepCopy() *NotificationFilterObservation {
	if in == nil {
		return nil
	}
	out := new(NotificationFilterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationFilterParameters) DeepCopyInto(out *NotificationFilterParameters) {
	*out = *in
	if in.Origin != nil {
		in, out := &in.Origin, &out.Origin
		*out = new(OriginParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Pool != nil {
		in, out := &in.Pool, &out.Pool
		*out = new(PoolParameters)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationFilterParameters.
func (in *NotificationFilterParameters) DeepCopy() *NotificationFilterParameters {
	if in == nil {
		return nil
	}
	out := new(NotificationFilterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OriginInitParameters) DeepCopyInto(out *OriginInitParameters) {
	*out = *in
	if in.Disable != nil {
		in, out := &in.Disable, &out.Disable
		*out = new(bool)
		**out = **in
	}
	if in.Healthy != nil {
		in, out := &in.Healthy, &out.Healthy
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OriginInitParameters.
func (in *OriginInitParameters) DeepCopy() *OriginInitParameters {
	if in == nil {
		return nil
	}
	out := new(OriginInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OriginObservation) DeepCopyInto(out *OriginObservation) {
	*out = *in
	if in.Disable != nil {
		in, out := &in.Disable, &out.Disable
		*out = new(bool)
		**out = **in
	}
	if in.Healthy != nil {
		in, out := &in.Healthy, &out.Healthy
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OriginObservation.
func (in *OriginObservation) DeepCopy() *OriginObservation {
	if in == nil {
		return nil
	}
	out := new(OriginObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OriginParameters) DeepCopyInto(out *OriginParameters) {
	*out = *in
	if in.Disable != nil {
		in, out := &in.Disable, &out.Disable
		*out = new(bool)
		**out = **in
	}
	if in.Healthy != nil {
		in, out := &in.Healthy, &out.Healthy
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OriginParameters.
func (in *OriginParameters) DeepCopy() *OriginParameters {
	if in == nil {
		return nil
	}
	out := new(OriginParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OriginSteeringInitParameters) DeepCopyInto(out *OriginSteeringInitParameters) {
	*out = *in
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OriginSteeringInitParameters.
func (in *OriginSteeringInitParameters) DeepCopy() *OriginSteeringInitParameters {
	if in == nil {
		return nil
	}
	out := new(OriginSteeringInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OriginSteeringObservation) DeepCopyInto(out *OriginSteeringObservation) {
	*out = *in
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OriginSteeringObservation.
func (in *OriginSteeringObservation) DeepCopy() *OriginSteeringObservation {
	if in == nil {
		return nil
	}
	out := new(OriginSteeringObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OriginSteeringParameters) DeepCopyInto(out *OriginSteeringParameters) {
	*out = *in
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OriginSteeringParameters.
func (in *OriginSteeringParameters) DeepCopy() *OriginSteeringParameters {
	if in == nil {
		return nil
	}
	out := new(OriginSteeringParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OriginsInitParameters) DeepCopyInto(out *OriginsInitParameters) {
	*out = *in
	if in.Address != nil {
		in, out := &in.Address, &out.Address
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Header != nil {
		in, out := &in.Header, &out.Header
		*out = new(HeaderInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VirtualNetworkID != nil {
		in, out := &in.VirtualNetworkID, &out.VirtualNetworkID
		*out = new(string)
		**out = **in
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OriginsInitParameters.
func (in *OriginsInitParameters) DeepCopy() *OriginsInitParameters {
	if in == nil {
		return nil
	}
	out := new(OriginsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OriginsObservation) DeepCopyInto(out *OriginsObservation) {
	*out = *in
	if in.Address != nil {
		in, out := &in.Address, &out.Address
		*out = new(string)
		**out = **in
	}
	if in.DisabledAt != nil {
		in, out := &in.DisabledAt, &out.DisabledAt
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Header != nil {
		in, out := &in.Header, &out.Header
		*out = new(HeaderObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VirtualNetworkID != nil {
		in, out := &in.VirtualNetworkID, &out.VirtualNetworkID
		*out = new(string)
		**out = **in
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OriginsObservation.
func (in *OriginsObservation) DeepCopy() *OriginsObservation {
	if in == nil {
		return nil
	}
	out := new(OriginsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OriginsParameters) DeepCopyInto(out *OriginsParameters) {
	*out = *in
	if in.Address != nil {
		in, out := &in.Address, &out.Address
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Header != nil {
		in, out := &in.Header, &out.Header
		*out = new(HeaderParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VirtualNetworkID != nil {
		in, out := &in.VirtualNetworkID, &out.VirtualNetworkID
		*out = new(string)
		**out = **in
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OriginsParameters.
func (in *OriginsParameters) DeepCopy() *OriginsParameters {
	if in == nil {
		return nil
	}
	out := new(OriginsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesAdaptiveRoutingInitParameters) DeepCopyInto(out *OverridesAdaptiveRoutingInitParameters) {
	*out = *in
	if in.FailoverAcrossPools != nil {
		in, out := &in.FailoverAcrossPools, &out.FailoverAcrossPools
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesAdaptiveRoutingInitParameters.
func (in *OverridesAdaptiveRoutingInitParameters) DeepCopy() *OverridesAdaptiveRoutingInitParameters {
	if in == nil {
		return nil
	}
	out := new(OverridesAdaptiveRoutingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesAdaptiveRoutingObservation) DeepCopyInto(out *OverridesAdaptiveRoutingObservation) {
	*out = *in
	if in.FailoverAcrossPools != nil {
		in, out := &in.FailoverAcrossPools, &out.FailoverAcrossPools
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesAdaptiveRoutingObservation.
func (in *OverridesAdaptiveRoutingObservation) DeepCopy() *OverridesAdaptiveRoutingObservation {
	if in == nil {
		return nil
	}
	out := new(OverridesAdaptiveRoutingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesAdaptiveRoutingParameters) DeepCopyInto(out *OverridesAdaptiveRoutingParameters) {
	*out = *in
	if in.FailoverAcrossPools != nil {
		in, out := &in.FailoverAcrossPools, &out.FailoverAcrossPools
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesAdaptiveRoutingParameters.
func (in *OverridesAdaptiveRoutingParameters) DeepCopy() *OverridesAdaptiveRoutingParameters {
	if in == nil {
		return nil
	}
	out := new(OverridesAdaptiveRoutingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesInitParameters) DeepCopyInto(out *OverridesInitParameters) {
	*out = *in
	if in.AdaptiveRouting != nil {
		in, out := &in.AdaptiveRouting, &out.AdaptiveRouting
		*out = new(OverridesAdaptiveRoutingInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.CountryPools != nil {
		in, out := &in.CountryPools, &out.CountryPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.DefaultPools != nil {
		in, out := &in.DefaultPools, &out.DefaultPools
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.FallbackPool != nil {
		in, out := &in.FallbackPool, &out.FallbackPool
		*out = new(string)
		**out = **in
	}
	if in.LocationStrategy != nil {
		in, out := &in.LocationStrategy, &out.LocationStrategy
		*out = new(OverridesLocationStrategyInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.PopPools != nil {
		in, out := &in.PopPools, &out.PopPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.RandomSteering != nil {
		in, out := &in.RandomSteering, &out.RandomSteering
		*out = new(OverridesRandomSteeringInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.RegionPools != nil {
		in, out := &in.RegionPools, &out.RegionPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.SessionAffinity != nil {
		in, out := &in.SessionAffinity, &out.SessionAffinity
		*out = new(string)
		**out = **in
	}
	if in.SessionAffinityAttributes != nil {
		in, out := &in.SessionAffinityAttributes, &out.SessionAffinityAttributes
		*out = new(SessionAffinityAttributesInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.SessionAffinityTTL != nil {
		in, out := &in.SessionAffinityTTL, &out.SessionAffinityTTL
		*out = new(float64)
		**out = **in
	}
	if in.SteeringPolicy != nil {
		in, out := &in.SteeringPolicy, &out.SteeringPolicy
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesInitParameters.
func (in *OverridesInitParameters) DeepCopy() *OverridesInitParameters {
	if in == nil {
		return nil
	}
	out := new(OverridesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesLocationStrategyInitParameters) DeepCopyInto(out *OverridesLocationStrategyInitParameters) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.PreferEcs != nil {
		in, out := &in.PreferEcs, &out.PreferEcs
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesLocationStrategyInitParameters.
func (in *OverridesLocationStrategyInitParameters) DeepCopy() *OverridesLocationStrategyInitParameters {
	if in == nil {
		return nil
	}
	out := new(OverridesLocationStrategyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesLocationStrategyObservation) DeepCopyInto(out *OverridesLocationStrategyObservation) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.PreferEcs != nil {
		in, out := &in.PreferEcs, &out.PreferEcs
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesLocationStrategyObservation.
func (in *OverridesLocationStrategyObservation) DeepCopy() *OverridesLocationStrategyObservation {
	if in == nil {
		return nil
	}
	out := new(OverridesLocationStrategyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesLocationStrategyParameters) DeepCopyInto(out *OverridesLocationStrategyParameters) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.PreferEcs != nil {
		in, out := &in.PreferEcs, &out.PreferEcs
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesLocationStrategyParameters.
func (in *OverridesLocationStrategyParameters) DeepCopy() *OverridesLocationStrategyParameters {
	if in == nil {
		return nil
	}
	out := new(OverridesLocationStrategyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesObservation) DeepCopyInto(out *OverridesObservation) {
	*out = *in
	if in.AdaptiveRouting != nil {
		in, out := &in.AdaptiveRouting, &out.AdaptiveRouting
		*out = new(OverridesAdaptiveRoutingObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.CountryPools != nil {
		in, out := &in.CountryPools, &out.CountryPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.DefaultPools != nil {
		in, out := &in.DefaultPools, &out.DefaultPools
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.FallbackPool != nil {
		in, out := &in.FallbackPool, &out.FallbackPool
		*out = new(string)
		**out = **in
	}
	if in.LocationStrategy != nil {
		in, out := &in.LocationStrategy, &out.LocationStrategy
		*out = new(OverridesLocationStrategyObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.PopPools != nil {
		in, out := &in.PopPools, &out.PopPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.RandomSteering != nil {
		in, out := &in.RandomSteering, &out.RandomSteering
		*out = new(OverridesRandomSteeringObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.RegionPools != nil {
		in, out := &in.RegionPools, &out.RegionPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.SessionAffinity != nil {
		in, out := &in.SessionAffinity, &out.SessionAffinity
		*out = new(string)
		**out = **in
	}
	if in.SessionAffinityAttributes != nil {
		in, out := &in.SessionAffinityAttributes, &out.SessionAffinityAttributes
		*out = new(SessionAffinityAttributesObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.SessionAffinityTTL != nil {
		in, out := &in.SessionAffinityTTL, &out.SessionAffinityTTL
		*out = new(float64)
		**out = **in
	}
	if in.SteeringPolicy != nil {
		in, out := &in.SteeringPolicy, &out.SteeringPolicy
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesObservation.
func (in *OverridesObservation) DeepCopy() *OverridesObservation {
	if in == nil {
		return nil
	}
	out := new(OverridesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesParameters) DeepCopyInto(out *OverridesParameters) {
	*out = *in
	if in.AdaptiveRouting != nil {
		in, out := &in.AdaptiveRouting, &out.AdaptiveRouting
		*out = new(OverridesAdaptiveRoutingParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.CountryPools != nil {
		in, out := &in.CountryPools, &out.CountryPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.DefaultPools != nil {
		in, out := &in.DefaultPools, &out.DefaultPools
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.FallbackPool != nil {
		in, out := &in.FallbackPool, &out.FallbackPool
		*out = new(string)
		**out = **in
	}
	if in.LocationStrategy != nil {
		in, out := &in.LocationStrategy, &out.LocationStrategy
		*out = new(OverridesLocationStrategyParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.PopPools != nil {
		in, out := &in.PopPools, &out.PopPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.RandomSteering != nil {
		in, out := &in.RandomSteering, &out.RandomSteering
		*out = new(OverridesRandomSteeringParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.RegionPools != nil {
		in, out := &in.RegionPools, &out.RegionPools
		*out = make(map[string][]*string, len(*in))
		for key, val := range *in {
			var outVal []*string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]*string, len(*in))
				for i := range *in {
					if (*in)[i] != nil {
						in, out := &(*in)[i], &(*out)[i]
						*out = new(string)
						**out = **in
					}
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.SessionAffinity != nil {
		in, out := &in.SessionAffinity, &out.SessionAffinity
		*out = new(string)
		**out = **in
	}
	if in.SessionAffinityAttributes != nil {
		in, out := &in.SessionAffinityAttributes, &out.SessionAffinityAttributes
		*out = new(SessionAffinityAttributesParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.SessionAffinityTTL != nil {
		in, out := &in.SessionAffinityTTL, &out.SessionAffinityTTL
		*out = new(float64)
		**out = **in
	}
	if in.SteeringPolicy != nil {
		in, out := &in.SteeringPolicy, &out.SteeringPolicy
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesParameters.
func (in *OverridesParameters) DeepCopy() *OverridesParameters {
	if in == nil {
		return nil
	}
	out := new(OverridesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesRandomSteeringInitParameters) DeepCopyInto(out *OverridesRandomSteeringInitParameters) {
	*out = *in
	if in.DefaultWeight != nil {
		in, out := &in.DefaultWeight, &out.DefaultWeight
		*out = new(float64)
		**out = **in
	}
	if in.PoolWeights != nil {
		in, out := &in.PoolWeights, &out.PoolWeights
		*out = make(map[string]*float64, len(*in))
		for key, val := range *in {
			var outVal *float64
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(float64)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesRandomSteeringInitParameters.
func (in *OverridesRandomSteeringInitParameters) DeepCopy() *OverridesRandomSteeringInitParameters {
	if in == nil {
		return nil
	}
	out := new(OverridesRandomSteeringInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesRandomSteeringObservation) DeepCopyInto(out *OverridesRandomSteeringObservation) {
	*out = *in
	if in.DefaultWeight != nil {
		in, out := &in.DefaultWeight, &out.DefaultWeight
		*out = new(float64)
		**out = **in
	}
	if in.PoolWeights != nil {
		in, out := &in.PoolWeights, &out.PoolWeights
		*out = make(map[string]*float64, len(*in))
		for key, val := range *in {
			var outVal *float64
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(float64)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesRandomSteeringObservation.
func (in *OverridesRandomSteeringObservation) DeepCopy() *OverridesRandomSteeringObservation {
	if in == nil {
		return nil
	}
	out := new(OverridesRandomSteeringObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OverridesRandomSteeringParameters) DeepCopyInto(out *OverridesRandomSteeringParameters) {
	*out = *in
	if in.DefaultWeight != nil {
		in, out := &in.DefaultWeight, &out.DefaultWeight
		*out = new(float64)
		**out = **in
	}
	if in.PoolWeights != nil {
		in, out := &in.PoolWeights, &out.PoolWeights
		*out = make(map[string]*float64, len(*in))
		for key, val := range *in {
			var outVal *float64
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(float64)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OverridesRandomSteeringParameters.
func (in *OverridesRandomSteeringParameters) DeepCopy() *OverridesRandomSteeringParameters {
	if in == nil {
		return nil
	}
	out := new(OverridesRandomSteeringParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PoolInitParameters) DeepCopyInto(out *PoolInitParameters) {
	*out = *in
	if in.Disable != nil {
		in, out := &in.Disable, &out.Disable
		*out = new(bool)
		**out = **in
	}
	if in.Healthy != nil {
		in, out := &in.Healthy, &out.Healthy
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PoolInitParameters.
func (in *PoolInitParameters) DeepCopy() *PoolInitParameters {
	if in == nil {
		return nil
	}
	out := new(PoolInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PoolObservation) DeepCopyInto(out *PoolObservation) {
	*out = *in
	if in.Disable != nil {
		in, out := &in.Disable, &out.Disable
		*out = new(bool)
		**out = **in
	}
	if in.Healthy != nil {
		in, out := &in.Healthy, &out.Healthy
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PoolObservation.
func (in *PoolObservation) DeepCopy() *PoolObservation {
	if in == nil {
		return nil
	}
	out := new(PoolObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PoolParameters) DeepCopyInto(out *PoolParameters) {
	*out = *in
	if in.Disable != nil {
		in, out := &in.Disable, &out.Disable
		*out = new(bool)
		**out = **in
	}
	if in.Healthy != nil {
		in, out := &in.Healthy, &out.Healthy
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PoolParameters.
func (in *PoolParameters) DeepCopy() *PoolParameters {
	if in == nil {
		return nil
	}
	out := new(PoolParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RandomSteeringInitParameters) DeepCopyInto(out *RandomSteeringInitParameters) {
	*out = *in
	if in.DefaultWeight != nil {
		in, out := &in.DefaultWeight, &out.DefaultWeight
		*out = new(float64)
		**out = **in
	}
	if in.PoolWeights != nil {
		in, out := &in.PoolWeights, &out.PoolWeights
		*out = make(map[string]*float64, len(*in))
		for key, val := range *in {
			var outVal *float64
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(float64)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RandomSteeringInitParameters.
func (in *RandomSteeringInitParameters) DeepCopy() *RandomSteeringInitParameters {
	if in == nil {
		return nil
	}
	out := new(RandomSteeringInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RandomSteeringObservation) DeepCopyInto(out *RandomSteeringObservation) {
	*out = *in
	if in.DefaultWeight != nil {
		in, out := &in.DefaultWeight, &out.DefaultWeight
		*out = new(float64)
		**out = **in
	}
	if in.PoolWeights != nil {
		in, out := &in.PoolWeights, &out.PoolWeights
		*out = make(map[string]*float64, len(*in))
		for key, val := range *in {
			var outVal *float64
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(float64)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RandomSteeringObservation.
func (in *RandomSteeringObservation) DeepCopy() *RandomSteeringObservation {
	if in == nil {
		return nil
	}
	out := new(RandomSteeringObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RandomSteeringParameters) DeepCopyInto(out *RandomSteeringParameters) {
	*out = *in
	if in.DefaultWeight != nil {
		in, out := &in.DefaultWeight, &out.DefaultWeight
		*out = new(float64)
		**out = **in
	}
	if in.PoolWeights != nil {
		in, out := &in.PoolWeights, &out.PoolWeights
		*out = make(map[string]*float64, len(*in))
		for key, val := range *in {
			var outVal *float64
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(float64)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RandomSteeringParameters.
func (in *RandomSteeringParameters) DeepCopy() *RandomSteeringParameters {
	if in == nil {
		return nil
	}
	out := new(RandomSteeringParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RulesInitParameters) DeepCopyInto(out *RulesInitParameters) {
	*out = *in
	if in.Condition != nil {
		in, out := &in.Condition, &out.Condition
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.FixedResponse != nil {
		in, out := &in.FixedResponse, &out.FixedResponse
		*out = new(FixedResponseInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Overrides != nil {
		in, out := &in.Overrides, &out.Overrides
		*out = new(OverridesInitParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.Terminates != nil {
		in, out := &in.Terminates, &out.Terminates
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RulesInitParameters.
func (in *RulesInitParameters) DeepCopy() *RulesInitParameters {
	if in == nil {
		return nil
	}
	out := new(RulesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RulesObservation) DeepCopyInto(out *RulesObservation) {
	*out = *in
	if in.Condition != nil {
		in, out := &in.Condition, &out.Condition
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.FixedResponse != nil {
		in, out := &in.FixedResponse, &out.FixedResponse
		*out = new(FixedResponseObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Overrides != nil {
		in, out := &in.Overrides, &out.Overrides
		*out = new(OverridesObservation)
		(*in).DeepCopyInto(*out)
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.Terminates != nil {
		in, out := &in.Terminates, &out.Terminates
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RulesObservation.
func (in *RulesObservation) DeepCopy() *RulesObservation {
	if in == nil {
		return nil
	}
	out := new(RulesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RulesParameters) DeepCopyInto(out *RulesParameters) {
	*out = *in
	if in.Condition != nil {
		in, out := &in.Condition, &out.Condition
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.FixedResponse != nil {
		in, out := &in.FixedResponse, &out.FixedResponse
		*out = new(FixedResponseParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Overrides != nil {
		in, out := &in.Overrides, &out.Overrides
		*out = new(OverridesParameters)
		(*in).DeepCopyInto(*out)
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.Terminates != nil {
		in, out := &in.Terminates, &out.Terminates
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RulesParameters.
func (in *RulesParameters) DeepCopy() *RulesParameters {
	if in == nil {
		return nil
	}
	out := new(RulesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SessionAffinityAttributesInitParameters) DeepCopyInto(out *SessionAffinityAttributesInitParameters) {
	*out = *in
	if in.DrainDuration != nil {
		in, out := &in.DrainDuration, &out.DrainDuration
		*out = new(float64)
		**out = **in
	}
	if in.Headers != nil {
		in, out := &in.Headers, &out.Headers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RequireAllHeaders != nil {
		in, out := &in.RequireAllHeaders, &out.RequireAllHeaders
		*out = new(bool)
		**out = **in
	}
	if in.Samesite != nil {
		in, out := &in.Samesite, &out.Samesite
		*out = new(string)
		**out = **in
	}
	if in.Secure != nil {
		in, out := &in.Secure, &out.Secure
		*out = new(string)
		**out = **in
	}
	if in.ZeroDowntimeFailover != nil {
		in, out := &in.ZeroDowntimeFailover, &out.ZeroDowntimeFailover
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SessionAffinityAttributesInitParameters.
func (in *SessionAffinityAttributesInitParameters) DeepCopy() *SessionAffinityAttributesInitParameters {
	if in == nil {
		return nil
	}
	out := new(SessionAffinityAttributesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SessionAffinityAttributesObservation) DeepCopyInto(out *SessionAffinityAttributesObservation) {
	*out = *in
	if in.DrainDuration != nil {
		in, out := &in.DrainDuration, &out.DrainDuration
		*out = new(float64)
		**out = **in
	}
	if in.Headers != nil {
		in, out := &in.Headers, &out.Headers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RequireAllHeaders != nil {
		in, out := &in.RequireAllHeaders, &out.RequireAllHeaders
		*out = new(bool)
		**out = **in
	}
	if in.Samesite != nil {
		in, out := &in.Samesite, &out.Samesite
		*out = new(string)
		**out = **in
	}
	if in.Secure != nil {
		in, out := &in.Secure, &out.Secure
		*out = new(string)
		**out = **in
	}
	if in.ZeroDowntimeFailover != nil {
		in, out := &in.ZeroDowntimeFailover, &out.ZeroDowntimeFailover
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SessionAffinityAttributesObservation.
func (in *SessionAffinityAttributesObservation) DeepCopy() *SessionAffinityAttributesObservation {
	if in == nil {
		return nil
	}
	out := new(SessionAffinityAttributesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SessionAffinityAttributesParameters) DeepCopyInto(out *SessionAffinityAttributesParameters) {
	*out = *in
	if in.DrainDuration != nil {
		in, out := &in.DrainDuration, &out.DrainDuration
		*out = new(float64)
		**out = **in
	}
	if in.Headers != nil {
		in, out := &in.Headers, &out.Headers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RequireAllHeaders != nil {
		in, out := &in.RequireAllHeaders, &out.RequireAllHeaders
		*out = new(bool)
		**out = **in
	}
	if in.Samesite != nil {
		in, out := &in.Samesite, &out.Samesite
		*out = new(string)
		**out = **in
	}
	if in.Secure != nil {
		in, out := &in.Secure, &out.Secure
		*out = new(string)
		**out = **in
	}
	if in.ZeroDowntimeFailover != nil {
		in, out := &in.ZeroDowntimeFailover, &out.ZeroDowntimeFailover
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SessionAffinityAttributesParameters.
func (in *SessionAffinityAttributesParameters) DeepCopy() *SessionAffinityAttributesParameters {
	if in == nil {
		return nil
	}
	out := new(SessionAffinityAttributesParameters)
	in.DeepCopyInto(out)
	return out
}
