// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionParametersInitParameters struct {

	// (List of Number) List of additional ports that caching can be enabled on.
	// List of additional ports that caching can be enabled on.
	AdditionalCacheablePorts []*float64 `json:"additionalCacheablePorts,omitempty" tf:"additional_cacheable_ports,omitempty"`

	// (Attributes List) Custom order for compression algorithms. (see below for nested schema)
	Algorithms []AlgorithmsInitParameters `json:"algorithms,omitempty" tf:"algorithms,omitempty"`

	// (Boolean) Turn on or off Automatic HTTPS Rewrites.
	// Turn on or off Automatic HTTPS Rewrites.
	AutomaticHTTPSRewrites *bool `json:"automaticHttpsRewrites,omitempty" tf:"automatic_https_rewrites,omitempty"`

	// (Attributes) Select which file extensions to minify automatically. (see below for nested schema)
	Autominify *AutominifyInitParameters `json:"autominify,omitempty" tf:"autominify,omitempty"`

	// (Boolean) Turn on or off Browser Integrity Check.
	// Turn on or off Browser Integrity Check.
	Bic *bool `json:"bic,omitempty" tf:"bic,omitempty"`

	// (Attributes) Specify how long client browsers should cache the response. Cloudflare cache purge will not purge content cached on client browsers, so high browser TTLs may lead to stale content. (see below for nested schema)
	BrowserTTL *BrowserTTLInitParameters `json:"browserTtl,omitempty" tf:"browser_ttl,omitempty"`

	// control header and your other caching configurations.
	// Mark whether the requestâ€™s response from origin is eligible for caching. Caching itself will still depend on the cache-control header and your other caching configurations.
	Cache *bool `json:"cache,omitempty" tf:"cache,omitempty"`

	// (Attributes) Define which components of the request are included or excluded from the cache key Cloudflare uses to store the response in cache. (see below for nested schema)
	CacheKey *CacheKeyInitParameters `json:"cacheKey,omitempty" tf:"cache_key,omitempty"`

	// on plan). (see below for nested schema)
	CacheReserve *CacheReserveInitParameters `json:"cacheReserve,omitempty" tf:"cache_reserve,omitempty"`

	// (String) Error response content.
	// Error response content.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// type header to set with the response.
	// Content-type header to set with the response.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// (Attributes List) The cookie fields to log. (see below for nested schema)
	CookieFields []CookieFieldsInitParameters `json:"cookieFields,omitempty" tf:"cookie_fields,omitempty"`

	// (Boolean) Turn off all active Cloudflare Apps.
	// Turn off all active Cloudflare Apps.
	DisableApps *bool `json:"disableApps,omitempty" tf:"disable_apps,omitempty"`

	// (Boolean) Turn off Real User Monitoring (RUM).
	// Turn off Real User Monitoring (RUM).
	DisableRum *bool `json:"disableRum,omitempty" tf:"disable_rum,omitempty"`

	// (Boolean) Turn off Zaraz.
	// Turn off Zaraz.
	DisableZaraz *bool `json:"disableZaraz,omitempty" tf:"disable_zaraz,omitempty"`

	// (Attributes) TTL (Time to Live) specifies the maximum time to cache a resource in the Cloudflare edge network. (see below for nested schema)
	EdgeTTL *EdgeTTLInitParameters `json:"edgeTtl,omitempty" tf:"edge_ttl,omitempty"`

	// (Boolean) Turn on or off Email Obfuscation.
	// Turn on or off Email Obfuscation.
	EmailObfuscation *bool `json:"emailObfuscation,omitempty" tf:"email_obfuscation,omitempty"`

	// (Boolean) Turn on or off Cloudflare Fonts.
	// Turn on or off Cloudflare Fonts.
	Fonts *bool `json:"fonts,omitempty" tf:"fonts,omitempty"`

	// (Attributes) Serve a redirect based on a bulk list lookup. (see below for nested schema)
	FromList *FromListInitParameters `json:"fromList,omitempty" tf:"from_list,omitempty"`

	// (Attributes) Serve a redirect based on the request properties. (see below for nested schema)
	FromValue *FromValueInitParameters `json:"fromValue,omitempty" tf:"from_value,omitempty"`

	// (Attributes Map) Map of request headers to modify. (see below for nested schema)
	Headers map[string]HeadersInitParameters `json:"headers,omitempty" tf:"headers,omitempty"`

	// (String) Rewrite the HTTP Host header.
	// Rewrite the HTTP Host header.
	HostHeader *string `json:"hostHeader,omitempty" tf:"host_header,omitempty"`

	// (Boolean) Turn on or off the Hotlink Protection.
	// Turn on or off the Hotlink Protection.
	HotlinkProtection *bool `json:"hotlinkProtection,omitempty" tf:"hotlink_protection,omitempty"`

	// (String) The unique ID of the ruleset.
	// The ID of the ruleset to execute.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) Increment contains the delta to change the score and can be either positive or negative.
	// Increment contains the delta to change the score and can be either positive or negative.
	Increment *float64 `json:"increment,omitempty" tf:"increment,omitempty"`

	// (Attributes) The configuration to use for matched data logging. (see below for nested schema)
	MatchedData *MatchedDataInitParameters `json:"matchedData,omitempty" tf:"matched_data,omitempty"`

	// (Boolean) Turn on or off Mirage.
	// Turn on or off Mirage.
	Mirage *bool `json:"mirage,omitempty" tf:"mirage,omitempty"`

	// (Boolean) Turn on or off Opportunistic Encryption.
	// Turn on or off Opportunistic Encryption.
	OpportunisticEncryption *bool `json:"opportunisticEncryption,omitempty" tf:"opportunistic_encryption,omitempty"`

	// (Attributes) Override the IP/TCP destination. (see below for nested schema)
	Origin *OriginInitParameters `json:"origin,omitempty" tf:"origin,omitempty"`

	// (Boolean) When enabled, Cloudflare will aim to strictly adhere to RFC 7234.
	// When enabled, Cloudflare will aim to strictly adhere to RFC 7234.
	OriginCacheControl *bool `json:"originCacheControl,omitempty" tf:"origin_cache_control,omitempty"`

	// (Boolean) Generate Cloudflare error pages from issues sent from the origin server. When on, error pages will trigger for issues from the origin
	// Generate Cloudflare error pages from issues sent from the origin server. When on, error pages will trigger for issues from the origin
	OriginErrorPagePassthru *bool `json:"originErrorPagePassthru,omitempty" tf:"origin_error_page_passthru,omitempty"`

	// (Attributes) A set of overrides to apply to the target ruleset. (see below for nested schema)
	Overrides *OverridesInitParameters `json:"overrides,omitempty" tf:"overrides,omitempty"`

	// (List of String) A list of phases to skip the execution of. This option is incompatible with the ruleset and rulesets options.
	// A list of phases to skip the execution of. This option is incompatible with the ruleset and rulesets options.
	Phases []*string `json:"phases,omitempty" tf:"phases,omitempty"`

	// (String) Configure the Polish level.
	// Configure the Polish level.
	Polish *string `json:"polish,omitempty" tf:"polish,omitempty"`

	// (List of String) A list of legacy security products to skip the execution of.
	// A list of legacy security products to skip the execution of.
	Products []*string `json:"products,omitempty" tf:"products,omitempty"`

	// (Number) Define a timeout value between two successive read operations to your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
	// Define a timeout value between two successive read operations to your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
	ReadTimeout *float64 `json:"readTimeout,omitempty" tf:"read_timeout,omitempty"`

	// (Attributes List) The request fields to log. (see below for nested schema)
	RequestFields []RequestFieldsInitParameters `json:"requestFields,omitempty" tf:"request_fields,omitempty"`

	// (Boolean) Specify whether or not Cloudflare should respect strong ETag (entity tag) headers. When off, Cloudflare converts strong ETag headers to weak ETag headers.
	// Specify whether or not Cloudflare should respect strong ETag (entity tag) headers. When off, Cloudflare converts strong ETag headers to weak ETag headers.
	RespectStrongEtags *bool `json:"respectStrongEtags,omitempty" tf:"respect_strong_etags,omitempty"`

	// (Attributes) The response to show when the block is applied. (see below for nested schema)
	Response *ResponseInitParameters `json:"response,omitempty" tf:"response,omitempty"`

	// (Attributes List) The response fields to log. (see below for nested schema)
	ResponseFields []ResponseFieldsInitParameters `json:"responseFields,omitempty" tf:"response_fields,omitempty"`

	// (Boolean) Turn on or off Rocket Loader
	// Turn on or off Rocket Loader
	RocketLoader *bool `json:"rocketLoader,omitempty" tf:"rocket_loader,omitempty"`

	// (Attributes List) The list of rules in the ruleset. (see below for nested schema)
	// A mapping of ruleset IDs to a list of rule IDs in that ruleset to skip the execution of. This option is incompatible with the ruleset option.
	Rules map[string][]*string `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) A ruleset to skip the execution of. This option is incompatible with the rulesets, rules and phases options.
	// A ruleset to skip the execution of. This option is incompatible with the rulesets, rules and phases options.
	Ruleset *string `json:"ruleset,omitempty" tf:"ruleset,omitempty"`

	// (List of String) A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
	// A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
	Rulesets []*string `json:"rulesets,omitempty" tf:"rulesets,omitempty"`

	// (String) Configure the SSL level.
	// Configure the SSL level.
	SSL *string `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// (String) Configure the Security Level.
	// Configure the Security Level.
	SecurityLevel *string `json:"securityLevel,omitempty" tf:"security_level,omitempty"`

	// (Attributes) Define if Cloudflare should serve stale content while getting the latest content from the origin. If on, Cloudflare will not serve stale content while getting the latest content from the origin. (see below for nested schema)
	ServeStale *ServeStaleInitParameters `json:"serveStale,omitempty" tf:"serve_stale,omitempty"`

	// (Boolean) Turn on or off Server Side Excludes.
	// Turn on or off Server Side Excludes.
	ServerSideExcludes *bool `json:"serverSideExcludes,omitempty" tf:"server_side_excludes,omitempty"`

	// (Attributes) Override the Server Name Indication (SNI). (see below for nested schema)
	Sni *SniInitParameters `json:"sni,omitempty" tf:"sni,omitempty"`

	// (Number) The status code to use for the error.
	// The status code to use for the error.
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// (Boolean) Turn on or off Signed Exchanges (SXG).
	// Turn on or off Signed Exchanges (SXG).
	Sxg *bool `json:"sxg,omitempty" tf:"sxg,omitempty"`

	// (Attributes) URI to rewrite the request to. (see below for nested schema)
	URI *URIInitParameters `json:"uri,omitempty" tf:"uri,omitempty"`
}

type ActionParametersObservation struct {

	// (List of Number) List of additional ports that caching can be enabled on.
	// List of additional ports that caching can be enabled on.
	AdditionalCacheablePorts []*float64 `json:"additionalCacheablePorts,omitempty" tf:"additional_cacheable_ports,omitempty"`

	// (Attributes List) Custom order for compression algorithms. (see below for nested schema)
	Algorithms []AlgorithmsObservation `json:"algorithms,omitempty" tf:"algorithms,omitempty"`

	// (Boolean) Turn on or off Automatic HTTPS Rewrites.
	// Turn on or off Automatic HTTPS Rewrites.
	AutomaticHTTPSRewrites *bool `json:"automaticHttpsRewrites,omitempty" tf:"automatic_https_rewrites,omitempty"`

	// (Attributes) Select which file extensions to minify automatically. (see below for nested schema)
	Autominify *AutominifyObservation `json:"autominify,omitempty" tf:"autominify,omitempty"`

	// (Boolean) Turn on or off Browser Integrity Check.
	// Turn on or off Browser Integrity Check.
	Bic *bool `json:"bic,omitempty" tf:"bic,omitempty"`

	// (Attributes) Specify how long client browsers should cache the response. Cloudflare cache purge will not purge content cached on client browsers, so high browser TTLs may lead to stale content. (see below for nested schema)
	BrowserTTL *BrowserTTLObservation `json:"browserTtl,omitempty" tf:"browser_ttl,omitempty"`

	// control header and your other caching configurations.
	// Mark whether the requestâ€™s response from origin is eligible for caching. Caching itself will still depend on the cache-control header and your other caching configurations.
	Cache *bool `json:"cache,omitempty" tf:"cache,omitempty"`

	// (Attributes) Define which components of the request are included or excluded from the cache key Cloudflare uses to store the response in cache. (see below for nested schema)
	CacheKey *CacheKeyObservation `json:"cacheKey,omitempty" tf:"cache_key,omitempty"`

	// on plan). (see below for nested schema)
	CacheReserve *CacheReserveObservation `json:"cacheReserve,omitempty" tf:"cache_reserve,omitempty"`

	// (String) Error response content.
	// Error response content.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// type header to set with the response.
	// Content-type header to set with the response.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// (Attributes List) The cookie fields to log. (see below for nested schema)
	CookieFields []CookieFieldsObservation `json:"cookieFields,omitempty" tf:"cookie_fields,omitempty"`

	// (Boolean) Turn off all active Cloudflare Apps.
	// Turn off all active Cloudflare Apps.
	DisableApps *bool `json:"disableApps,omitempty" tf:"disable_apps,omitempty"`

	// (Boolean) Turn off Real User Monitoring (RUM).
	// Turn off Real User Monitoring (RUM).
	DisableRum *bool `json:"disableRum,omitempty" tf:"disable_rum,omitempty"`

	// (Boolean) Turn off Zaraz.
	// Turn off Zaraz.
	DisableZaraz *bool `json:"disableZaraz,omitempty" tf:"disable_zaraz,omitempty"`

	// (Attributes) TTL (Time to Live) specifies the maximum time to cache a resource in the Cloudflare edge network. (see below for nested schema)
	EdgeTTL *EdgeTTLObservation `json:"edgeTtl,omitempty" tf:"edge_ttl,omitempty"`

	// (Boolean) Turn on or off Email Obfuscation.
	// Turn on or off Email Obfuscation.
	EmailObfuscation *bool `json:"emailObfuscation,omitempty" tf:"email_obfuscation,omitempty"`

	// (Boolean) Turn on or off Cloudflare Fonts.
	// Turn on or off Cloudflare Fonts.
	Fonts *bool `json:"fonts,omitempty" tf:"fonts,omitempty"`

	// (Attributes) Serve a redirect based on a bulk list lookup. (see below for nested schema)
	FromList *FromListObservation `json:"fromList,omitempty" tf:"from_list,omitempty"`

	// (Attributes) Serve a redirect based on the request properties. (see below for nested schema)
	FromValue *FromValueObservation `json:"fromValue,omitempty" tf:"from_value,omitempty"`

	// (Attributes Map) Map of request headers to modify. (see below for nested schema)
	Headers []HeadersObservation `json:"headers,omitempty" tf:"headers,omitempty"`

	// (String) Rewrite the HTTP Host header.
	// Rewrite the HTTP Host header.
	HostHeader *string `json:"hostHeader,omitempty" tf:"host_header,omitempty"`

	// (Boolean) Turn on or off the Hotlink Protection.
	// Turn on or off the Hotlink Protection.
	HotlinkProtection *bool `json:"hotlinkProtection,omitempty" tf:"hotlink_protection,omitempty"`

	// (String) The unique ID of the ruleset.
	// The ID of the ruleset to execute.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) Increment contains the delta to change the score and can be either positive or negative.
	// Increment contains the delta to change the score and can be either positive or negative.
	Increment *float64 `json:"increment,omitempty" tf:"increment,omitempty"`

	// (Attributes) The configuration to use for matched data logging. (see below for nested schema)
	MatchedData *MatchedDataObservation `json:"matchedData,omitempty" tf:"matched_data,omitempty"`

	// (Boolean) Turn on or off Mirage.
	// Turn on or off Mirage.
	Mirage *bool `json:"mirage,omitempty" tf:"mirage,omitempty"`

	// (Boolean) Turn on or off Opportunistic Encryption.
	// Turn on or off Opportunistic Encryption.
	OpportunisticEncryption *bool `json:"opportunisticEncryption,omitempty" tf:"opportunistic_encryption,omitempty"`

	// (Attributes) Override the IP/TCP destination. (see below for nested schema)
	Origin *OriginObservation `json:"origin,omitempty" tf:"origin,omitempty"`

	// (Boolean) When enabled, Cloudflare will aim to strictly adhere to RFC 7234.
	// When enabled, Cloudflare will aim to strictly adhere to RFC 7234.
	OriginCacheControl *bool `json:"originCacheControl,omitempty" tf:"origin_cache_control,omitempty"`

	// (Boolean) Generate Cloudflare error pages from issues sent from the origin server. When on, error pages will trigger for issues from the origin
	// Generate Cloudflare error pages from issues sent from the origin server. When on, error pages will trigger for issues from the origin
	OriginErrorPagePassthru *bool `json:"originErrorPagePassthru,omitempty" tf:"origin_error_page_passthru,omitempty"`

	// (Attributes) A set of overrides to apply to the target ruleset. (see below for nested schema)
	Overrides *OverridesObservation `json:"overrides,omitempty" tf:"overrides,omitempty"`

	// (List of String) A list of phases to skip the execution of. This option is incompatible with the ruleset and rulesets options.
	// A list of phases to skip the execution of. This option is incompatible with the ruleset and rulesets options.
	Phases []*string `json:"phases,omitempty" tf:"phases,omitempty"`

	// (String) Configure the Polish level.
	// Configure the Polish level.
	Polish *string `json:"polish,omitempty" tf:"polish,omitempty"`

	// (List of String) A list of legacy security products to skip the execution of.
	// A list of legacy security products to skip the execution of.
	Products []*string `json:"products,omitempty" tf:"products,omitempty"`

	// (Number) Define a timeout value between two successive read operations to your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
	// Define a timeout value between two successive read operations to your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
	ReadTimeout *float64 `json:"readTimeout,omitempty" tf:"read_timeout,omitempty"`

	// (Attributes List) The request fields to log. (see below for nested schema)
	RequestFields []RequestFieldsObservation `json:"requestFields,omitempty" tf:"request_fields,omitempty"`

	// (Boolean) Specify whether or not Cloudflare should respect strong ETag (entity tag) headers. When off, Cloudflare converts strong ETag headers to weak ETag headers.
	// Specify whether or not Cloudflare should respect strong ETag (entity tag) headers. When off, Cloudflare converts strong ETag headers to weak ETag headers.
	RespectStrongEtags *bool `json:"respectStrongEtags,omitempty" tf:"respect_strong_etags,omitempty"`

	// (Attributes) The response to show when the block is applied. (see below for nested schema)
	Response *ResponseObservation `json:"response,omitempty" tf:"response,omitempty"`

	// (Attributes List) The response fields to log. (see below for nested schema)
	ResponseFields []ResponseFieldsObservation `json:"responseFields,omitempty" tf:"response_fields,omitempty"`

	// (Boolean) Turn on or off Rocket Loader
	// Turn on or off Rocket Loader
	RocketLoader *bool `json:"rocketLoader,omitempty" tf:"rocket_loader,omitempty"`

	// (Attributes List) The list of rules in the ruleset. (see below for nested schema)
	// A mapping of ruleset IDs to a list of rule IDs in that ruleset to skip the execution of. This option is incompatible with the ruleset option.
	Rules map[string][]*string `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) A ruleset to skip the execution of. This option is incompatible with the rulesets, rules and phases options.
	// A ruleset to skip the execution of. This option is incompatible with the rulesets, rules and phases options.
	Ruleset *string `json:"ruleset,omitempty" tf:"ruleset,omitempty"`

	// (List of String) A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
	// A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
	Rulesets []*string `json:"rulesets,omitempty" tf:"rulesets,omitempty"`

	// (String) Configure the SSL level.
	// Configure the SSL level.
	SSL *string `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// (String) Configure the Security Level.
	// Configure the Security Level.
	SecurityLevel *string `json:"securityLevel,omitempty" tf:"security_level,omitempty"`

	// (Attributes) Define if Cloudflare should serve stale content while getting the latest content from the origin. If on, Cloudflare will not serve stale content while getting the latest content from the origin. (see below for nested schema)
	ServeStale *ServeStaleObservation `json:"serveStale,omitempty" tf:"serve_stale,omitempty"`

	// (Boolean) Turn on or off Server Side Excludes.
	// Turn on or off Server Side Excludes.
	ServerSideExcludes *bool `json:"serverSideExcludes,omitempty" tf:"server_side_excludes,omitempty"`

	// (Attributes) Override the Server Name Indication (SNI). (see below for nested schema)
	Sni *SniObservation `json:"sni,omitempty" tf:"sni,omitempty"`

	// (Number) The status code to use for the error.
	// The status code to use for the error.
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// (Boolean) Turn on or off Signed Exchanges (SXG).
	// Turn on or off Signed Exchanges (SXG).
	Sxg *bool `json:"sxg,omitempty" tf:"sxg,omitempty"`

	// (Attributes) URI to rewrite the request to. (see below for nested schema)
	URI *URIObservation `json:"uri,omitempty" tf:"uri,omitempty"`
}

type ActionParametersParameters struct {

	// (List of Number) List of additional ports that caching can be enabled on.
	// List of additional ports that caching can be enabled on.
	// +kubebuilder:validation:Optional
	AdditionalCacheablePorts []*float64 `json:"additionalCacheablePorts,omitempty" tf:"additional_cacheable_ports,omitempty"`

	// (Attributes List) Custom order for compression algorithms. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Algorithms []AlgorithmsParameters `json:"algorithms" tf:"algorithms,omitempty"`

	// (Boolean) Turn on or off Automatic HTTPS Rewrites.
	// Turn on or off Automatic HTTPS Rewrites.
	// +kubebuilder:validation:Optional
	AutomaticHTTPSRewrites *bool `json:"automaticHttpsRewrites,omitempty" tf:"automatic_https_rewrites,omitempty"`

	// (Attributes) Select which file extensions to minify automatically. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Autominify *AutominifyParameters `json:"autominify,omitempty" tf:"autominify,omitempty"`

	// (Boolean) Turn on or off Browser Integrity Check.
	// Turn on or off Browser Integrity Check.
	// +kubebuilder:validation:Optional
	Bic *bool `json:"bic,omitempty" tf:"bic,omitempty"`

	// (Attributes) Specify how long client browsers should cache the response. Cloudflare cache purge will not purge content cached on client browsers, so high browser TTLs may lead to stale content. (see below for nested schema)
	// +kubebuilder:validation:Optional
	BrowserTTL *BrowserTTLParameters `json:"browserTtl" tf:"browser_ttl,omitempty"`

	// control header and your other caching configurations.
	// Mark whether the requestâ€™s response from origin is eligible for caching. Caching itself will still depend on the cache-control header and your other caching configurations.
	// +kubebuilder:validation:Optional
	Cache *bool `json:"cache,omitempty" tf:"cache,omitempty"`

	// (Attributes) Define which components of the request are included or excluded from the cache key Cloudflare uses to store the response in cache. (see below for nested schema)
	// +kubebuilder:validation:Optional
	CacheKey *CacheKeyParameters `json:"cacheKey,omitempty" tf:"cache_key,omitempty"`

	// on plan). (see below for nested schema)
	// +kubebuilder:validation:Optional
	CacheReserve *CacheReserveParameters `json:"cacheReserve" tf:"cache_reserve,omitempty"`

	// (String) Error response content.
	// Error response content.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// type header to set with the response.
	// Content-type header to set with the response.
	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// (Attributes List) The cookie fields to log. (see below for nested schema)
	// +kubebuilder:validation:Optional
	CookieFields []CookieFieldsParameters `json:"cookieFields" tf:"cookie_fields,omitempty"`

	// (Boolean) Turn off all active Cloudflare Apps.
	// Turn off all active Cloudflare Apps.
	// +kubebuilder:validation:Optional
	DisableApps *bool `json:"disableApps,omitempty" tf:"disable_apps,omitempty"`

	// (Boolean) Turn off Real User Monitoring (RUM).
	// Turn off Real User Monitoring (RUM).
	// +kubebuilder:validation:Optional
	DisableRum *bool `json:"disableRum,omitempty" tf:"disable_rum,omitempty"`

	// (Boolean) Turn off Zaraz.
	// Turn off Zaraz.
	// +kubebuilder:validation:Optional
	DisableZaraz *bool `json:"disableZaraz,omitempty" tf:"disable_zaraz,omitempty"`

	// (Attributes) TTL (Time to Live) specifies the maximum time to cache a resource in the Cloudflare edge network. (see below for nested schema)
	// +kubebuilder:validation:Optional
	EdgeTTL *EdgeTTLParameters `json:"edgeTtl" tf:"edge_ttl,omitempty"`

	// (Boolean) Turn on or off Email Obfuscation.
	// Turn on or off Email Obfuscation.
	// +kubebuilder:validation:Optional
	EmailObfuscation *bool `json:"emailObfuscation,omitempty" tf:"email_obfuscation,omitempty"`

	// (Boolean) Turn on or off Cloudflare Fonts.
	// Turn on or off Cloudflare Fonts.
	// +kubebuilder:validation:Optional
	Fonts *bool `json:"fonts,omitempty" tf:"fonts,omitempty"`

	// (Attributes) Serve a redirect based on a bulk list lookup. (see below for nested schema)
	// +kubebuilder:validation:Optional
	FromList *FromListParameters `json:"fromList,omitempty" tf:"from_list,omitempty"`

	// (Attributes) Serve a redirect based on the request properties. (see below for nested schema)
	// +kubebuilder:validation:Optional
	FromValue *FromValueParameters `json:"fromValue,omitempty" tf:"from_value,omitempty"`

	// (Attributes Map) Map of request headers to modify. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Headers map[string]HeadersParameters `json:"headers" tf:"headers,omitempty"`

	// (String) Rewrite the HTTP Host header.
	// Rewrite the HTTP Host header.
	// +kubebuilder:validation:Optional
	HostHeader *string `json:"hostHeader,omitempty" tf:"host_header,omitempty"`

	// (Boolean) Turn on or off the Hotlink Protection.
	// Turn on or off the Hotlink Protection.
	// +kubebuilder:validation:Optional
	HotlinkProtection *bool `json:"hotlinkProtection,omitempty" tf:"hotlink_protection,omitempty"`

	// (String) The unique ID of the ruleset.
	// The ID of the ruleset to execute.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) Increment contains the delta to change the score and can be either positive or negative.
	// Increment contains the delta to change the score and can be either positive or negative.
	// +kubebuilder:validation:Optional
	Increment *float64 `json:"increment,omitempty" tf:"increment,omitempty"`

	// (Attributes) The configuration to use for matched data logging. (see below for nested schema)
	// +kubebuilder:validation:Optional
	MatchedData *MatchedDataParameters `json:"matchedData" tf:"matched_data,omitempty"`

	// (Boolean) Turn on or off Mirage.
	// Turn on or off Mirage.
	// +kubebuilder:validation:Optional
	Mirage *bool `json:"mirage,omitempty" tf:"mirage,omitempty"`

	// (Boolean) Turn on or off Opportunistic Encryption.
	// Turn on or off Opportunistic Encryption.
	// +kubebuilder:validation:Optional
	OpportunisticEncryption *bool `json:"opportunisticEncryption,omitempty" tf:"opportunistic_encryption,omitempty"`

	// (Attributes) Override the IP/TCP destination. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Origin *OriginParameters `json:"origin,omitempty" tf:"origin,omitempty"`

	// (Boolean) When enabled, Cloudflare will aim to strictly adhere to RFC 7234.
	// When enabled, Cloudflare will aim to strictly adhere to RFC 7234.
	// +kubebuilder:validation:Optional
	OriginCacheControl *bool `json:"originCacheControl,omitempty" tf:"origin_cache_control,omitempty"`

	// (Boolean) Generate Cloudflare error pages from issues sent from the origin server. When on, error pages will trigger for issues from the origin
	// Generate Cloudflare error pages from issues sent from the origin server. When on, error pages will trigger for issues from the origin
	// +kubebuilder:validation:Optional
	OriginErrorPagePassthru *bool `json:"originErrorPagePassthru,omitempty" tf:"origin_error_page_passthru,omitempty"`

	// (Attributes) A set of overrides to apply to the target ruleset. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Overrides *OverridesParameters `json:"overrides,omitempty" tf:"overrides,omitempty"`

	// (List of String) A list of phases to skip the execution of. This option is incompatible with the ruleset and rulesets options.
	// A list of phases to skip the execution of. This option is incompatible with the ruleset and rulesets options.
	// +kubebuilder:validation:Optional
	Phases []*string `json:"phases,omitempty" tf:"phases,omitempty"`

	// (String) Configure the Polish level.
	// Configure the Polish level.
	// +kubebuilder:validation:Optional
	Polish *string `json:"polish,omitempty" tf:"polish,omitempty"`

	// (List of String) A list of legacy security products to skip the execution of.
	// A list of legacy security products to skip the execution of.
	// +kubebuilder:validation:Optional
	Products []*string `json:"products,omitempty" tf:"products,omitempty"`

	// (Number) Define a timeout value between two successive read operations to your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
	// Define a timeout value between two successive read operations to your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
	// +kubebuilder:validation:Optional
	ReadTimeout *float64 `json:"readTimeout,omitempty" tf:"read_timeout,omitempty"`

	// (Attributes List) The request fields to log. (see below for nested schema)
	// +kubebuilder:validation:Optional
	RequestFields []RequestFieldsParameters `json:"requestFields" tf:"request_fields,omitempty"`

	// (Boolean) Specify whether or not Cloudflare should respect strong ETag (entity tag) headers. When off, Cloudflare converts strong ETag headers to weak ETag headers.
	// Specify whether or not Cloudflare should respect strong ETag (entity tag) headers. When off, Cloudflare converts strong ETag headers to weak ETag headers.
	// +kubebuilder:validation:Optional
	RespectStrongEtags *bool `json:"respectStrongEtags,omitempty" tf:"respect_strong_etags,omitempty"`

	// (Attributes) The response to show when the block is applied. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Response *ResponseParameters `json:"response" tf:"response,omitempty"`

	// (Attributes List) The response fields to log. (see below for nested schema)
	// +kubebuilder:validation:Optional
	ResponseFields []ResponseFieldsParameters `json:"responseFields" tf:"response_fields,omitempty"`

	// (Boolean) Turn on or off Rocket Loader
	// Turn on or off Rocket Loader
	// +kubebuilder:validation:Optional
	RocketLoader *bool `json:"rocketLoader,omitempty" tf:"rocket_loader,omitempty"`

	// (Attributes List) The list of rules in the ruleset. (see below for nested schema)
	// A mapping of ruleset IDs to a list of rule IDs in that ruleset to skip the execution of. This option is incompatible with the ruleset option.
	// +kubebuilder:validation:Optional
	Rules map[string][]*string `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) A ruleset to skip the execution of. This option is incompatible with the rulesets, rules and phases options.
	// A ruleset to skip the execution of. This option is incompatible with the rulesets, rules and phases options.
	// +kubebuilder:validation:Optional
	Ruleset *string `json:"ruleset,omitempty" tf:"ruleset,omitempty"`

	// (List of String) A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
	// A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
	// +kubebuilder:validation:Optional
	Rulesets []*string `json:"rulesets,omitempty" tf:"rulesets,omitempty"`

	// (String) Configure the SSL level.
	// Configure the SSL level.
	// +kubebuilder:validation:Optional
	SSL *string `json:"ssl,omitempty" tf:"ssl,omitempty"`

	// (String) Configure the Security Level.
	// Configure the Security Level.
	// +kubebuilder:validation:Optional
	SecurityLevel *string `json:"securityLevel,omitempty" tf:"security_level,omitempty"`

	// (Attributes) Define if Cloudflare should serve stale content while getting the latest content from the origin. If on, Cloudflare will not serve stale content while getting the latest content from the origin. (see below for nested schema)
	// +kubebuilder:validation:Optional
	ServeStale *ServeStaleParameters `json:"serveStale" tf:"serve_stale,omitempty"`

	// (Boolean) Turn on or off Server Side Excludes.
	// Turn on or off Server Side Excludes.
	// +kubebuilder:validation:Optional
	ServerSideExcludes *bool `json:"serverSideExcludes,omitempty" tf:"server_side_excludes,omitempty"`

	// (Attributes) Override the Server Name Indication (SNI). (see below for nested schema)
	// +kubebuilder:validation:Optional
	Sni *SniParameters `json:"sni" tf:"sni,omitempty"`

	// (Number) The status code to use for the error.
	// The status code to use for the error.
	// +kubebuilder:validation:Optional
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// (Boolean) Turn on or off Signed Exchanges (SXG).
	// Turn on or off Signed Exchanges (SXG).
	// +kubebuilder:validation:Optional
	Sxg *bool `json:"sxg,omitempty" tf:"sxg,omitempty"`

	// (Attributes) URI to rewrite the request to. (see below for nested schema)
	// +kubebuilder:validation:Optional
	URI *URIParameters `json:"uri,omitempty" tf:"uri,omitempty"`
}

type AlgorithmsInitParameters struct {

	// readable name of the ruleset.
	// Name of compression algorithm to enable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type AlgorithmsObservation struct {

	// readable name of the ruleset.
	// Name of compression algorithm to enable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type AlgorithmsParameters struct {

	// readable name of the ruleset.
	// Name of compression algorithm to enable.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type AutominifyInitParameters struct {

	// (Boolean) Minify CSS files.
	// Minify CSS files.
	CSS *bool `json:"css,omitempty" tf:"css,omitempty"`

	// (Boolean) Minify HTML files.
	// Minify HTML files.
	HTML *bool `json:"html,omitempty" tf:"html,omitempty"`

	// (Boolean) Minify JS files.
	// Minify JS files.
	Js *bool `json:"js,omitempty" tf:"js,omitempty"`
}

type AutominifyObservation struct {

	// (Boolean) Minify CSS files.
	// Minify CSS files.
	CSS *bool `json:"css,omitempty" tf:"css,omitempty"`

	// (Boolean) Minify HTML files.
	// Minify HTML files.
	HTML *bool `json:"html,omitempty" tf:"html,omitempty"`

	// (Boolean) Minify JS files.
	// Minify JS files.
	Js *bool `json:"js,omitempty" tf:"js,omitempty"`
}

type AutominifyParameters struct {

	// (Boolean) Minify CSS files.
	// Minify CSS files.
	// +kubebuilder:validation:Optional
	CSS *bool `json:"css,omitempty" tf:"css,omitempty"`

	// (Boolean) Minify HTML files.
	// Minify HTML files.
	// +kubebuilder:validation:Optional
	HTML *bool `json:"html,omitempty" tf:"html,omitempty"`

	// (Boolean) Minify JS files.
	// Minify JS files.
	// +kubebuilder:validation:Optional
	Js *bool `json:"js,omitempty" tf:"js,omitempty"`
}

type BrowserTTLInitParameters struct {

	// (Number) The TTL (in seconds) if you choose override_origin mode.
	// The TTL (in seconds) if you choose override_origin mode.
	Default *float64 `json:"default,omitempty" tf:"default,omitempty"`

	// (String) Determines which browser ttl mode to use.
	// Determines which browser ttl mode to use.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type BrowserTTLObservation struct {

	// (Number) The TTL (in seconds) if you choose override_origin mode.
	// The TTL (in seconds) if you choose override_origin mode.
	Default *float64 `json:"default,omitempty" tf:"default,omitempty"`

	// (String) Determines which browser ttl mode to use.
	// Determines which browser ttl mode to use.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type BrowserTTLParameters struct {

	// (Number) The TTL (in seconds) if you choose override_origin mode.
	// The TTL (in seconds) if you choose override_origin mode.
	// +kubebuilder:validation:Optional
	Default *float64 `json:"default,omitempty" tf:"default,omitempty"`

	// (String) Determines which browser ttl mode to use.
	// Determines which browser ttl mode to use.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode" tf:"mode,omitempty"`
}

type CacheKeyInitParameters struct {

	// (Boolean) Separate cached content based on the visitorâ€™s device type
	// Separate cached content based on the visitorâ€™s device type
	CacheByDeviceType *bool `json:"cacheByDeviceType,omitempty" tf:"cache_by_device_type,omitempty"`

	// (Boolean) Protect from web cache deception attacks while allowing static assets to be cached
	// Protect from web cache deception attacks while allowing static assets to be cached
	CacheDeceptionArmor *bool `json:"cacheDeceptionArmor,omitempty" tf:"cache_deception_armor,omitempty"`

	// (Attributes) Customize which components of the request are included or excluded from the cache key. (see below for nested schema)
	CustomKey *CustomKeyInitParameters `json:"customKey,omitempty" tf:"custom_key,omitempty"`

	// (Boolean) Treat requests with the same query parameters the same, regardless of the order those query parameters are in. A value of true ignores the query strings' order.
	// Treat requests with the same query parameters the same, regardless of the order those query parameters are in. A value of true ignores the query strings' order.
	IgnoreQueryStringsOrder *bool `json:"ignoreQueryStringsOrder,omitempty" tf:"ignore_query_strings_order,omitempty"`
}

type CacheKeyObservation struct {

	// (Boolean) Separate cached content based on the visitorâ€™s device type
	// Separate cached content based on the visitorâ€™s device type
	CacheByDeviceType *bool `json:"cacheByDeviceType,omitempty" tf:"cache_by_device_type,omitempty"`

	// (Boolean) Protect from web cache deception attacks while allowing static assets to be cached
	// Protect from web cache deception attacks while allowing static assets to be cached
	CacheDeceptionArmor *bool `json:"cacheDeceptionArmor,omitempty" tf:"cache_deception_armor,omitempty"`

	// (Attributes) Customize which components of the request are included or excluded from the cache key. (see below for nested schema)
	CustomKey *CustomKeyObservation `json:"customKey,omitempty" tf:"custom_key,omitempty"`

	// (Boolean) Treat requests with the same query parameters the same, regardless of the order those query parameters are in. A value of true ignores the query strings' order.
	// Treat requests with the same query parameters the same, regardless of the order those query parameters are in. A value of true ignores the query strings' order.
	IgnoreQueryStringsOrder *bool `json:"ignoreQueryStringsOrder,omitempty" tf:"ignore_query_strings_order,omitempty"`
}

type CacheKeyParameters struct {

	// (Boolean) Separate cached content based on the visitorâ€™s device type
	// Separate cached content based on the visitorâ€™s device type
	// +kubebuilder:validation:Optional
	CacheByDeviceType *bool `json:"cacheByDeviceType,omitempty" tf:"cache_by_device_type,omitempty"`

	// (Boolean) Protect from web cache deception attacks while allowing static assets to be cached
	// Protect from web cache deception attacks while allowing static assets to be cached
	// +kubebuilder:validation:Optional
	CacheDeceptionArmor *bool `json:"cacheDeceptionArmor,omitempty" tf:"cache_deception_armor,omitempty"`

	// (Attributes) Customize which components of the request are included or excluded from the cache key. (see below for nested schema)
	// +kubebuilder:validation:Optional
	CustomKey *CustomKeyParameters `json:"customKey,omitempty" tf:"custom_key,omitempty"`

	// (Boolean) Treat requests with the same query parameters the same, regardless of the order those query parameters are in. A value of true ignores the query strings' order.
	// Treat requests with the same query parameters the same, regardless of the order those query parameters are in. A value of true ignores the query strings' order.
	// +kubebuilder:validation:Optional
	IgnoreQueryStringsOrder *bool `json:"ignoreQueryStringsOrder,omitempty" tf:"ignore_query_strings_order,omitempty"`
}

type CacheReserveInitParameters struct {

	// (Boolean) Determines whether cache reserve is enabled. If this is true and a request meets eligibility criteria, Cloudflare will write the resource to cache reserve.
	// Determines whether cache reserve is enabled. If this is true and a request meets eligibility criteria, Cloudflare will write the resource to cache reserve.
	Eligible *bool `json:"eligible,omitempty" tf:"eligible,omitempty"`

	// (Number) The minimum file size eligible for store in cache reserve.
	// The minimum file size eligible for store in cache reserve.
	MinimumFileSize *float64 `json:"minimumFileSize,omitempty" tf:"minimum_file_size,omitempty"`
}

type CacheReserveObservation struct {

	// (Boolean) Determines whether cache reserve is enabled. If this is true and a request meets eligibility criteria, Cloudflare will write the resource to cache reserve.
	// Determines whether cache reserve is enabled. If this is true and a request meets eligibility criteria, Cloudflare will write the resource to cache reserve.
	Eligible *bool `json:"eligible,omitempty" tf:"eligible,omitempty"`

	// (Number) The minimum file size eligible for store in cache reserve.
	// The minimum file size eligible for store in cache reserve.
	MinimumFileSize *float64 `json:"minimumFileSize,omitempty" tf:"minimum_file_size,omitempty"`
}

type CacheReserveParameters struct {

	// (Boolean) Determines whether cache reserve is enabled. If this is true and a request meets eligibility criteria, Cloudflare will write the resource to cache reserve.
	// Determines whether cache reserve is enabled. If this is true and a request meets eligibility criteria, Cloudflare will write the resource to cache reserve.
	// +kubebuilder:validation:Optional
	Eligible *bool `json:"eligible" tf:"eligible,omitempty"`

	// (Number) The minimum file size eligible for store in cache reserve.
	// The minimum file size eligible for store in cache reserve.
	// +kubebuilder:validation:Optional
	MinimumFileSize *float64 `json:"minimumFileSize" tf:"minimum_file_size,omitempty"`
}

type CategoriesInitParameters struct {

	// (String) The action to perform when the rule matches.
	// The action to override rules in the category with.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) The name of the category to override.
	// The name of the category to override.
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// (Boolean) Whether the rule should be executed.
	// Whether to enable execution of rules in the category.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) A sensitivity level to set for all rules. This option has lower precedence than rule and category overrides and is only applicable for DDoS phases.
	// The sensitivity level to use for rules in the category.
	SensitivityLevel *string `json:"sensitivityLevel,omitempty" tf:"sensitivity_level,omitempty"`
}

type CategoriesObservation struct {

	// (String) The action to perform when the rule matches.
	// The action to override rules in the category with.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) The name of the category to override.
	// The name of the category to override.
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// (Boolean) Whether the rule should be executed.
	// Whether to enable execution of rules in the category.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) A sensitivity level to set for all rules. This option has lower precedence than rule and category overrides and is only applicable for DDoS phases.
	// The sensitivity level to use for rules in the category.
	SensitivityLevel *string `json:"sensitivityLevel,omitempty" tf:"sensitivity_level,omitempty"`
}

type CategoriesParameters struct {

	// (String) The action to perform when the rule matches.
	// The action to override rules in the category with.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) The name of the category to override.
	// The name of the category to override.
	// +kubebuilder:validation:Optional
	Category *string `json:"category" tf:"category,omitempty"`

	// (Boolean) Whether the rule should be executed.
	// Whether to enable execution of rules in the category.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) A sensitivity level to set for all rules. This option has lower precedence than rule and category overrides and is only applicable for DDoS phases.
	// The sensitivity level to use for rules in the category.
	// +kubebuilder:validation:Optional
	SensitivityLevel *string `json:"sensitivityLevel,omitempty" tf:"sensitivity_level,omitempty"`
}

type CookieFieldsInitParameters struct {

	// readable name of the ruleset.
	// The name of the field.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CookieFieldsObservation struct {

	// readable name of the ruleset.
	// The name of the field.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CookieFieldsParameters struct {

	// readable name of the ruleset.
	// The name of the field.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type CookieInitParameters struct {

	// (List of String) Checks for the presence of these cookie names. The presence of these cookies is used in building the cache key.
	// Checks for the presence of these cookie names. The presence of these cookies is used in building the cache key.
	CheckPresence []*string `json:"checkPresence,omitempty" tf:"check_presence,omitempty"`

	// (List of String) Include these cookies' names and their values.
	// Include these cookies' names and their values.
	Include []*string `json:"include,omitempty" tf:"include,omitempty"`
}

type CookieObservation struct {

	// (List of String) Checks for the presence of these cookie names. The presence of these cookies is used in building the cache key.
	// Checks for the presence of these cookie names. The presence of these cookies is used in building the cache key.
	CheckPresence []*string `json:"checkPresence,omitempty" tf:"check_presence,omitempty"`

	// (List of String) Include these cookies' names and their values.
	// Include these cookies' names and their values.
	Include []*string `json:"include,omitempty" tf:"include,omitempty"`
}

type CookieParameters struct {

	// (List of String) Checks for the presence of these cookie names. The presence of these cookies is used in building the cache key.
	// Checks for the presence of these cookie names. The presence of these cookies is used in building the cache key.
	// +kubebuilder:validation:Optional
	CheckPresence []*string `json:"checkPresence,omitempty" tf:"check_presence,omitempty"`

	// (List of String) Include these cookies' names and their values.
	// Include these cookies' names and their values.
	// +kubebuilder:validation:Optional
	Include []*string `json:"include,omitempty" tf:"include,omitempty"`
}

type CustomKeyInitParameters struct {

	// (Attributes) The cookies to include in building the cache key. (see below for nested schema)
	Cookie *CookieInitParameters `json:"cookie,omitempty" tf:"cookie,omitempty"`

	// (Attributes) The header names and values to include in building the cache key. (see below for nested schema)
	Header *HeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`

	// (Attributes) Whether to use the original host or the resolved host in the cache key. (see below for nested schema)
	Host *HostInitParameters `json:"host,omitempty" tf:"host,omitempty"`

	// (Attributes) Use the presence of parameters in the query string to build the cache key. (see below for nested schema)
	QueryString *QueryStringInitParameters `json:"queryString,omitempty" tf:"query_string,omitempty"`

	// (Attributes) Characteristics of the request user agent used in building the cache key. (see below for nested schema)
	User *UserInitParameters `json:"user,omitempty" tf:"user,omitempty"`
}

type CustomKeyObservation struct {

	// (Attributes) The cookies to include in building the cache key. (see below for nested schema)
	Cookie *CookieObservation `json:"cookie,omitempty" tf:"cookie,omitempty"`

	// (Attributes) The header names and values to include in building the cache key. (see below for nested schema)
	Header *HeaderObservation `json:"header,omitempty" tf:"header,omitempty"`

	// (Attributes) Whether to use the original host or the resolved host in the cache key. (see below for nested schema)
	Host *HostObservation `json:"host,omitempty" tf:"host,omitempty"`

	// (Attributes) Use the presence of parameters in the query string to build the cache key. (see below for nested schema)
	QueryString *QueryStringObservation `json:"queryString,omitempty" tf:"query_string,omitempty"`

	// (Attributes) Characteristics of the request user agent used in building the cache key. (see below for nested schema)
	User *UserObservation `json:"user,omitempty" tf:"user,omitempty"`
}

type CustomKeyParameters struct {

	// (Attributes) The cookies to include in building the cache key. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Cookie *CookieParameters `json:"cookie,omitempty" tf:"cookie,omitempty"`

	// (Attributes) The header names and values to include in building the cache key. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Header *HeaderParameters `json:"header,omitempty" tf:"header,omitempty"`

	// (Attributes) Whether to use the original host or the resolved host in the cache key. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Host *HostParameters `json:"host,omitempty" tf:"host,omitempty"`

	// (Attributes) Use the presence of parameters in the query string to build the cache key. (see below for nested schema)
	// +kubebuilder:validation:Optional
	QueryString *QueryStringParameters `json:"queryString,omitempty" tf:"query_string,omitempty"`

	// (Attributes) Characteristics of the request user agent used in building the cache key. (see below for nested schema)
	// +kubebuilder:validation:Optional
	User *UserParameters `json:"user,omitempty" tf:"user,omitempty"`
}

type EdgeTTLInitParameters struct {

	// (Number) The TTL (in seconds) if you choose override_origin mode.
	// The TTL (in seconds) if you choose override_origin mode.
	Default *float64 `json:"default,omitempty" tf:"default,omitempty"`

	// (String) Determines which browser ttl mode to use.
	// edge ttl options
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (Attributes List) List of single status codes, or status code ranges to apply the selected mode (see below for nested schema)
	StatusCodeTTL []StatusCodeTTLInitParameters `json:"statusCodeTtl,omitempty" tf:"status_code_ttl,omitempty"`
}

type EdgeTTLObservation struct {

	// (Number) The TTL (in seconds) if you choose override_origin mode.
	// The TTL (in seconds) if you choose override_origin mode.
	Default *float64 `json:"default,omitempty" tf:"default,omitempty"`

	// (String) Determines which browser ttl mode to use.
	// edge ttl options
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (Attributes List) List of single status codes, or status code ranges to apply the selected mode (see below for nested schema)
	StatusCodeTTL []StatusCodeTTLObservation `json:"statusCodeTtl,omitempty" tf:"status_code_ttl,omitempty"`
}

type EdgeTTLParameters struct {

	// (Number) The TTL (in seconds) if you choose override_origin mode.
	// The TTL (in seconds) if you choose override_origin mode.
	// +kubebuilder:validation:Optional
	Default *float64 `json:"default,omitempty" tf:"default,omitempty"`

	// (String) Determines which browser ttl mode to use.
	// edge ttl options
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// (Attributes List) List of single status codes, or status code ranges to apply the selected mode (see below for nested schema)
	// +kubebuilder:validation:Optional
	StatusCodeTTL []StatusCodeTTLParameters `json:"statusCodeTtl" tf:"status_code_ttl,omitempty"`
}

type ExcludeInitParameters struct {

	// (Boolean) Determines whether to exclude all query string parameters from the cache key.
	// Determines whether to exclude all query string parameters from the cache key.
	All *bool `json:"all,omitempty" tf:"all,omitempty"`

	// (List of String)
	List []*string `json:"list,omitempty" tf:"list,omitempty"`
}

type ExcludeObservation struct {

	// (Boolean) Determines whether to exclude all query string parameters from the cache key.
	// Determines whether to exclude all query string parameters from the cache key.
	All *bool `json:"all,omitempty" tf:"all,omitempty"`

	// (List of String)
	List []*string `json:"list,omitempty" tf:"list,omitempty"`
}

type ExcludeParameters struct {

	// (Boolean) Determines whether to exclude all query string parameters from the cache key.
	// Determines whether to exclude all query string parameters from the cache key.
	// +kubebuilder:validation:Optional
	All *bool `json:"all,omitempty" tf:"all,omitempty"`

	// (List of String)
	// +kubebuilder:validation:Optional
	List []*string `json:"list,omitempty" tf:"list,omitempty"`
}

type ExposedCredentialCheckInitParameters struct {

	// (String) Expression that selects the password used in the credentials check.
	// Expression that selects the password used in the credentials check.
	PasswordExpression *string `json:"passwordExpression,omitempty" tf:"password_expression,omitempty"`

	// (String) Expression that selects the user ID used in the credentials check.
	// Expression that selects the user ID used in the credentials check.
	UsernameExpression *string `json:"usernameExpression,omitempty" tf:"username_expression,omitempty"`
}

type ExposedCredentialCheckObservation struct {

	// (String) Expression that selects the password used in the credentials check.
	// Expression that selects the password used in the credentials check.
	PasswordExpression *string `json:"passwordExpression,omitempty" tf:"password_expression,omitempty"`

	// (String) Expression that selects the user ID used in the credentials check.
	// Expression that selects the user ID used in the credentials check.
	UsernameExpression *string `json:"usernameExpression,omitempty" tf:"username_expression,omitempty"`
}

type ExposedCredentialCheckParameters struct {

	// (String) Expression that selects the password used in the credentials check.
	// Expression that selects the password used in the credentials check.
	// +kubebuilder:validation:Optional
	PasswordExpression *string `json:"passwordExpression" tf:"password_expression,omitempty"`

	// (String) Expression that selects the user ID used in the credentials check.
	// Expression that selects the user ID used in the credentials check.
	// +kubebuilder:validation:Optional
	UsernameExpression *string `json:"usernameExpression" tf:"username_expression,omitempty"`
}

type FromListInitParameters struct {

	// (String) Expression that evaluates to the list lookup key.
	// Expression that evaluates to the list lookup key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// readable name of the ruleset.
	// The name of the list to match against.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type FromListObservation struct {

	// (String) Expression that evaluates to the list lookup key.
	// Expression that evaluates to the list lookup key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// readable name of the ruleset.
	// The name of the list to match against.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type FromListParameters struct {

	// (String) Expression that evaluates to the list lookup key.
	// Expression that evaluates to the list lookup key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// readable name of the ruleset.
	// The name of the list to match against.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type FromValueInitParameters struct {

	// (Boolean) Keep the query string of the original request.
	// Keep the query string of the original request.
	PreserveQueryString *bool `json:"preserveQueryString,omitempty" tf:"preserve_query_string,omitempty"`

	// (Number) The status code to use for the error.
	// The status code to be used for the redirect.
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// (Attributes) The URL to redirect the request to. (see below for nested schema)
	TargetURL *TargetURLInitParameters `json:"targetUrl,omitempty" tf:"target_url,omitempty"`
}

type FromValueObservation struct {

	// (Boolean) Keep the query string of the original request.
	// Keep the query string of the original request.
	PreserveQueryString *bool `json:"preserveQueryString,omitempty" tf:"preserve_query_string,omitempty"`

	// (Number) The status code to use for the error.
	// The status code to be used for the redirect.
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// (Attributes) The URL to redirect the request to. (see below for nested schema)
	TargetURL *TargetURLObservation `json:"targetUrl,omitempty" tf:"target_url,omitempty"`
}

type FromValueParameters struct {

	// (Boolean) Keep the query string of the original request.
	// Keep the query string of the original request.
	// +kubebuilder:validation:Optional
	PreserveQueryString *bool `json:"preserveQueryString,omitempty" tf:"preserve_query_string,omitempty"`

	// (Number) The status code to use for the error.
	// The status code to be used for the redirect.
	// +kubebuilder:validation:Optional
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// (Attributes) The URL to redirect the request to. (see below for nested schema)
	// +kubebuilder:validation:Optional
	TargetURL *TargetURLParameters `json:"targetUrl,omitempty" tf:"target_url,omitempty"`
}

type HeaderInitParameters struct {

	// (List of String) Checks for the presence of these cookie names. The presence of these cookies is used in building the cache key.
	// Checks for the presence of these header names. The presence of these headers is used in building the cache key.
	CheckPresence []*string `json:"checkPresence,omitempty" tf:"check_presence,omitempty"`

	// (Map of List of String) For each header name and list of values combination, check if the request header contains any of the values provided. The presence of the request header and whether any of the values provided are contained in the request header value is used in building the cache key.
	// For each header name and list of values combination, check if the request header contains any of the values provided. The presence of the request header and whether any of the values provided are contained in the request header value is used in building the cache key.
	Contains map[string][]*string `json:"contains,omitempty" tf:"contains,omitempty"`

	// (Boolean) Whether or not to include the origin header. A value of true will exclude the origin header in the cache key.
	// Whether or not to include the origin header. A value of true will exclude the origin header in the cache key.
	ExcludeOrigin *bool `json:"excludeOrigin,omitempty" tf:"exclude_origin,omitempty"`

	// (List of String) Include these cookies' names and their values.
	// Include these headers' names and their values.
	Include []*string `json:"include,omitempty" tf:"include,omitempty"`
}

type HeaderObservation struct {

	// (List of String) Checks for the presence of these cookie names. The presence of these cookies is used in building the cache key.
	// Checks for the presence of these header names. The presence of these headers is used in building the cache key.
	CheckPresence []*string `json:"checkPresence,omitempty" tf:"check_presence,omitempty"`

	// (Map of List of String) For each header name and list of values combination, check if the request header contains any of the values provided. The presence of the request header and whether any of the values provided are contained in the request header value is used in building the cache key.
	// For each header name and list of values combination, check if the request header contains any of the values provided. The presence of the request header and whether any of the values provided are contained in the request header value is used in building the cache key.
	Contains map[string][]*string `json:"contains,omitempty" tf:"contains,omitempty"`

	// (Boolean) Whether or not to include the origin header. A value of true will exclude the origin header in the cache key.
	// Whether or not to include the origin header. A value of true will exclude the origin header in the cache key.
	ExcludeOrigin *bool `json:"excludeOrigin,omitempty" tf:"exclude_origin,omitempty"`

	// (List of String) Include these cookies' names and their values.
	// Include these headers' names and their values.
	Include []*string `json:"include,omitempty" tf:"include,omitempty"`
}

type HeaderParameters struct {

	// (List of String) Checks for the presence of these cookie names. The presence of these cookies is used in building the cache key.
	// Checks for the presence of these header names. The presence of these headers is used in building the cache key.
	// +kubebuilder:validation:Optional
	CheckPresence []*string `json:"checkPresence,omitempty" tf:"check_presence,omitempty"`

	// (Map of List of String) For each header name and list of values combination, check if the request header contains any of the values provided. The presence of the request header and whether any of the values provided are contained in the request header value is used in building the cache key.
	// For each header name and list of values combination, check if the request header contains any of the values provided. The presence of the request header and whether any of the values provided are contained in the request header value is used in building the cache key.
	// +kubebuilder:validation:Optional
	Contains map[string][]*string `json:"contains,omitempty" tf:"contains,omitempty"`

	// (Boolean) Whether or not to include the origin header. A value of true will exclude the origin header in the cache key.
	// Whether or not to include the origin header. A value of true will exclude the origin header in the cache key.
	// +kubebuilder:validation:Optional
	ExcludeOrigin *bool `json:"excludeOrigin,omitempty" tf:"exclude_origin,omitempty"`

	// (List of String) Include these cookies' names and their values.
	// Include these headers' names and their values.
	// +kubebuilder:validation:Optional
	Include []*string `json:"include,omitempty" tf:"include,omitempty"`
}

type HeadersInitParameters struct {

	// (String) The expression defining which traffic will match the rule.
	// Expression for the header value.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (String)
	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// Static value for the header.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeadersObservation struct {

	// (String) The expression defining which traffic will match the rule.
	// Expression for the header value.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (String)
	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// Static value for the header.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeadersParameters struct {

	// (String) The expression defining which traffic will match the rule.
	// Expression for the header value.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Operation *string `json:"operation" tf:"operation,omitempty"`

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// Static value for the header.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HostInitParameters struct {

	// (Boolean) Use the resolved host in the cache key. A value of true will use the resolved host, while a value or false will use the original host.
	// Use the resolved host in the cache key. A value of true will use the resolved host, while a value or false will use the original host.
	Resolved *bool `json:"resolved,omitempty" tf:"resolved,omitempty"`
}

type HostObservation struct {

	// (Boolean) Use the resolved host in the cache key. A value of true will use the resolved host, while a value or false will use the original host.
	// Use the resolved host in the cache key. A value of true will use the resolved host, while a value or false will use the original host.
	Resolved *bool `json:"resolved,omitempty" tf:"resolved,omitempty"`
}

type HostParameters struct {

	// (Boolean) Use the resolved host in the cache key. A value of true will use the resolved host, while a value or false will use the original host.
	// Use the resolved host in the cache key. A value of true will use the resolved host, while a value or false will use the original host.
	// +kubebuilder:validation:Optional
	Resolved *bool `json:"resolved,omitempty" tf:"resolved,omitempty"`
}

type IncludeInitParameters struct {

	// (Boolean) Determines whether to exclude all query string parameters from the cache key.
	// Determines whether to include all query string parameters in the cache key.
	All *bool `json:"all,omitempty" tf:"all,omitempty"`

	// (List of String)
	List []*string `json:"list,omitempty" tf:"list,omitempty"`
}

type IncludeObservation struct {

	// (Boolean) Determines whether to exclude all query string parameters from the cache key.
	// Determines whether to include all query string parameters in the cache key.
	All *bool `json:"all,omitempty" tf:"all,omitempty"`

	// (List of String)
	List []*string `json:"list,omitempty" tf:"list,omitempty"`
}

type IncludeParameters struct {

	// (Boolean) Determines whether to exclude all query string parameters from the cache key.
	// Determines whether to include all query string parameters in the cache key.
	// +kubebuilder:validation:Optional
	All *bool `json:"all,omitempty" tf:"all,omitempty"`

	// (List of String)
	// +kubebuilder:validation:Optional
	List []*string `json:"list,omitempty" tf:"list,omitempty"`
}

type LoggingInitParameters struct {

	// (Boolean) Whether the rule should be executed.
	// Whether to generate a log when the rule matches.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type LoggingObservation struct {

	// (Boolean) Whether the rule should be executed.
	// Whether to generate a log when the rule matches.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type LoggingParameters struct {

	// (Boolean) Whether the rule should be executed.
	// Whether to generate a log when the rule matches.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`
}

type MatchedDataInitParameters struct {

	// (String) The public key to encrypt matched data logs with.
	// The public key to encrypt matched data logs with.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type MatchedDataObservation struct {

	// (String) The public key to encrypt matched data logs with.
	// The public key to encrypt matched data logs with.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type MatchedDataParameters struct {

	// (String) The public key to encrypt matched data logs with.
	// The public key to encrypt matched data logs with.
	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey" tf:"public_key,omitempty"`
}

type OriginInitParameters struct {

	// (Attributes) Whether to use the original host or the resolved host in the cache key. (see below for nested schema)
	// Override the resolved hostname.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (Number) Override the destination port.
	// Override the destination port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type OriginObservation struct {

	// (Attributes) Whether to use the original host or the resolved host in the cache key. (see below for nested schema)
	// Override the resolved hostname.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (Number) Override the destination port.
	// Override the destination port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type OriginParameters struct {

	// (Attributes) Whether to use the original host or the resolved host in the cache key. (see below for nested schema)
	// Override the resolved hostname.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (Number) Override the destination port.
	// Override the destination port.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type OverridesInitParameters struct {

	// (String) The action to perform when the rule matches.
	// An action to override all rules with. This option has lower precedence than rule and category overrides.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (List of String) The categories of the rule.
	Categories []CategoriesInitParameters `json:"categories,omitempty" tf:"categories,omitempty"`

	// (Boolean) Whether the rule should be executed.
	// Whether to enable execution of all rules. This option has lower precedence than rule and category overrides.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes List) The list of rules in the ruleset. (see below for nested schema)
	Rules []OverridesRulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) A sensitivity level to set for all rules. This option has lower precedence than rule and category overrides and is only applicable for DDoS phases.
	// A sensitivity level to set for all rules. This option has lower precedence than rule and category overrides and is only applicable for DDoS phases.
	SensitivityLevel *string `json:"sensitivityLevel,omitempty" tf:"sensitivity_level,omitempty"`
}

type OverridesObservation struct {

	// (String) The action to perform when the rule matches.
	// An action to override all rules with. This option has lower precedence than rule and category overrides.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (List of String) The categories of the rule.
	Categories []CategoriesObservation `json:"categories,omitempty" tf:"categories,omitempty"`

	// (Boolean) Whether the rule should be executed.
	// Whether to enable execution of all rules. This option has lower precedence than rule and category overrides.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes List) The list of rules in the ruleset. (see below for nested schema)
	Rules []OverridesRulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) A sensitivity level to set for all rules. This option has lower precedence than rule and category overrides and is only applicable for DDoS phases.
	// A sensitivity level to set for all rules. This option has lower precedence than rule and category overrides and is only applicable for DDoS phases.
	SensitivityLevel *string `json:"sensitivityLevel,omitempty" tf:"sensitivity_level,omitempty"`
}

type OverridesParameters struct {

	// (String) The action to perform when the rule matches.
	// An action to override all rules with. This option has lower precedence than rule and category overrides.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (List of String) The categories of the rule.
	// +kubebuilder:validation:Optional
	Categories []CategoriesParameters `json:"categories" tf:"categories,omitempty"`

	// (Boolean) Whether the rule should be executed.
	// Whether to enable execution of all rules. This option has lower precedence than rule and category overrides.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes List) The list of rules in the ruleset. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Rules []OverridesRulesParameters `json:"rules" tf:"rules,omitempty"`

	// (String) A sensitivity level to set for all rules. This option has lower precedence than rule and category overrides and is only applicable for DDoS phases.
	// A sensitivity level to set for all rules. This option has lower precedence than rule and category overrides and is only applicable for DDoS phases.
	// +kubebuilder:validation:Optional
	SensitivityLevel *string `json:"sensitivityLevel,omitempty" tf:"sensitivity_level,omitempty"`
}

type OverridesRulesInitParameters struct {

	// (String) The action to perform when the rule matches.
	// The action to override the rule with.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (Boolean) Whether the rule should be executed.
	// Whether to enable execution of the rule.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The unique ID of the ruleset.
	// The ID of the rule to override.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) The score threshold to use for the rule.
	// The score threshold to use for the rule.
	ScoreThreshold *float64 `json:"scoreThreshold,omitempty" tf:"score_threshold,omitempty"`

	// (String) A sensitivity level to set for all rules. This option has lower precedence than rule and category overrides and is only applicable for DDoS phases.
	// The sensitivity level to use for the rule.
	SensitivityLevel *string `json:"sensitivityLevel,omitempty" tf:"sensitivity_level,omitempty"`
}

type OverridesRulesObservation struct {

	// (String) The action to perform when the rule matches.
	// The action to override the rule with.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (Boolean) Whether the rule should be executed.
	// Whether to enable execution of the rule.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The unique ID of the ruleset.
	// The ID of the rule to override.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) The score threshold to use for the rule.
	// The score threshold to use for the rule.
	ScoreThreshold *float64 `json:"scoreThreshold,omitempty" tf:"score_threshold,omitempty"`

	// (String) A sensitivity level to set for all rules. This option has lower precedence than rule and category overrides and is only applicable for DDoS phases.
	// The sensitivity level to use for the rule.
	SensitivityLevel *string `json:"sensitivityLevel,omitempty" tf:"sensitivity_level,omitempty"`
}

type OverridesRulesParameters struct {

	// (String) The action to perform when the rule matches.
	// The action to override the rule with.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (Boolean) Whether the rule should be executed.
	// Whether to enable execution of the rule.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The unique ID of the ruleset.
	// The ID of the rule to override.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// (Number) The score threshold to use for the rule.
	// The score threshold to use for the rule.
	// +kubebuilder:validation:Optional
	ScoreThreshold *float64 `json:"scoreThreshold,omitempty" tf:"score_threshold,omitempty"`

	// (String) A sensitivity level to set for all rules. This option has lower precedence than rule and category overrides and is only applicable for DDoS phases.
	// The sensitivity level to use for the rule.
	// +kubebuilder:validation:Optional
	SensitivityLevel *string `json:"sensitivityLevel,omitempty" tf:"sensitivity_level,omitempty"`
}

type PathInitParameters struct {

	// (String) The expression defining which traffic will match the rule.
	// Expression to evaluate for the replacement value.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// Predefined replacement value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PathObservation struct {

	// (String) The expression defining which traffic will match the rule.
	// Expression to evaluate for the replacement value.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// Predefined replacement value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PathParameters struct {

	// (String) The expression defining which traffic will match the rule.
	// Expression to evaluate for the replacement value.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// Predefined replacement value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type QueryInitParameters struct {

	// (String) The expression defining which traffic will match the rule.
	// Expression to evaluate for the replacement value.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// Predefined replacement value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type QueryObservation struct {

	// (String) The expression defining which traffic will match the rule.
	// Expression to evaluate for the replacement value.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// Predefined replacement value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type QueryParameters struct {

	// (String) The expression defining which traffic will match the rule.
	// Expression to evaluate for the replacement value.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// Predefined replacement value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type QueryStringInitParameters struct {

	// (Attributes) A list of query string parameters NOT used to build the cache key. All parameters present in the request but missing in this list will be used to build the cache key. (see below for nested schema)
	Exclude *ExcludeInitParameters `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// (List of String) Include these cookies' names and their values.
	Include *IncludeInitParameters `json:"include,omitempty" tf:"include,omitempty"`
}

type QueryStringObservation struct {

	// (Attributes) A list of query string parameters NOT used to build the cache key. All parameters present in the request but missing in this list will be used to build the cache key. (see below for nested schema)
	Exclude *ExcludeObservation `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// (List of String) Include these cookies' names and their values.
	Include *IncludeObservation `json:"include,omitempty" tf:"include,omitempty"`
}

type QueryStringParameters struct {

	// (Attributes) A list of query string parameters NOT used to build the cache key. All parameters present in the request but missing in this list will be used to build the cache key. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Exclude *ExcludeParameters `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// (List of String) Include these cookies' names and their values.
	// +kubebuilder:validation:Optional
	Include *IncludeParameters `json:"include,omitempty" tf:"include,omitempty"`
}

type RatelimitInitParameters struct {

	// (List of String) Characteristics of the request on which the ratelimiter counter will be incremented.
	// Characteristics of the request on which the ratelimiter counter will be incremented.
	Characteristics []*string `json:"characteristics,omitempty" tf:"characteristics,omitempty"`

	// (String) Defines when the ratelimit counter should be incremented. It is optional and defaults to the same as the rule's expression.
	// Defines when the ratelimit counter should be incremented. It is optional and defaults to the same as the rule's expression.
	CountingExpression *string `json:"countingExpression,omitempty" tf:"counting_expression,omitempty"`

	// (Number) Period of time in seconds after which the action will be disabled following its first execution.
	// Period of time in seconds after which the action will be disabled following its first execution.
	MitigationTimeout *float64 `json:"mitigationTimeout,omitempty" tf:"mitigation_timeout,omitempty"`

	// (Number) Period in seconds over which the counter is being incremented.
	// Period in seconds over which the counter is being incremented.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// (Number) The threshold of requests per period after which the action will be executed for the first time.
	// The threshold of requests per period after which the action will be executed for the first time.
	RequestsPerPeriod *float64 `json:"requestsPerPeriod,omitempty" tf:"requests_per_period,omitempty"`

	// (Boolean) Defines if ratelimit counting is only done when an origin is reached.
	// Defines if ratelimit counting is only done when an origin is reached.
	RequestsToOrigin *bool `json:"requestsToOrigin,omitempty" tf:"requests_to_origin,omitempty"`

	// (Number) The score threshold per period for which the action will be executed the first time.
	// The score threshold per period for which the action will be executed the first time.
	ScorePerPeriod *float64 `json:"scorePerPeriod,omitempty" tf:"score_per_period,omitempty"`

	// (String) The response header name provided by the origin which should contain the score to increment ratelimit counter on.
	// The response header name provided by the origin which should contain the score to increment ratelimit counter on.
	ScoreResponseHeaderName *string `json:"scoreResponseHeaderName,omitempty" tf:"score_response_header_name,omitempty"`
}

type RatelimitObservation struct {

	// (List of String) Characteristics of the request on which the ratelimiter counter will be incremented.
	// Characteristics of the request on which the ratelimiter counter will be incremented.
	Characteristics []*string `json:"characteristics,omitempty" tf:"characteristics,omitempty"`

	// (String) Defines when the ratelimit counter should be incremented. It is optional and defaults to the same as the rule's expression.
	// Defines when the ratelimit counter should be incremented. It is optional and defaults to the same as the rule's expression.
	CountingExpression *string `json:"countingExpression,omitempty" tf:"counting_expression,omitempty"`

	// (Number) Period of time in seconds after which the action will be disabled following its first execution.
	// Period of time in seconds after which the action will be disabled following its first execution.
	MitigationTimeout *float64 `json:"mitigationTimeout,omitempty" tf:"mitigation_timeout,omitempty"`

	// (Number) Period in seconds over which the counter is being incremented.
	// Period in seconds over which the counter is being incremented.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// (Number) The threshold of requests per period after which the action will be executed for the first time.
	// The threshold of requests per period after which the action will be executed for the first time.
	RequestsPerPeriod *float64 `json:"requestsPerPeriod,omitempty" tf:"requests_per_period,omitempty"`

	// (Boolean) Defines if ratelimit counting is only done when an origin is reached.
	// Defines if ratelimit counting is only done when an origin is reached.
	RequestsToOrigin *bool `json:"requestsToOrigin,omitempty" tf:"requests_to_origin,omitempty"`

	// (Number) The score threshold per period for which the action will be executed the first time.
	// The score threshold per period for which the action will be executed the first time.
	ScorePerPeriod *float64 `json:"scorePerPeriod,omitempty" tf:"score_per_period,omitempty"`

	// (String) The response header name provided by the origin which should contain the score to increment ratelimit counter on.
	// The response header name provided by the origin which should contain the score to increment ratelimit counter on.
	ScoreResponseHeaderName *string `json:"scoreResponseHeaderName,omitempty" tf:"score_response_header_name,omitempty"`
}

type RatelimitParameters struct {

	// (List of String) Characteristics of the request on which the ratelimiter counter will be incremented.
	// Characteristics of the request on which the ratelimiter counter will be incremented.
	// +kubebuilder:validation:Optional
	Characteristics []*string `json:"characteristics" tf:"characteristics,omitempty"`

	// (String) Defines when the ratelimit counter should be incremented. It is optional and defaults to the same as the rule's expression.
	// Defines when the ratelimit counter should be incremented. It is optional and defaults to the same as the rule's expression.
	// +kubebuilder:validation:Optional
	CountingExpression *string `json:"countingExpression,omitempty" tf:"counting_expression,omitempty"`

	// (Number) Period of time in seconds after which the action will be disabled following its first execution.
	// Period of time in seconds after which the action will be disabled following its first execution.
	// +kubebuilder:validation:Optional
	MitigationTimeout *float64 `json:"mitigationTimeout,omitempty" tf:"mitigation_timeout,omitempty"`

	// (Number) Period in seconds over which the counter is being incremented.
	// Period in seconds over which the counter is being incremented.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period" tf:"period,omitempty"`

	// (Number) The threshold of requests per period after which the action will be executed for the first time.
	// The threshold of requests per period after which the action will be executed for the first time.
	// +kubebuilder:validation:Optional
	RequestsPerPeriod *float64 `json:"requestsPerPeriod,omitempty" tf:"requests_per_period,omitempty"`

	// (Boolean) Defines if ratelimit counting is only done when an origin is reached.
	// Defines if ratelimit counting is only done when an origin is reached.
	// +kubebuilder:validation:Optional
	RequestsToOrigin *bool `json:"requestsToOrigin,omitempty" tf:"requests_to_origin,omitempty"`

	// (Number) The score threshold per period for which the action will be executed the first time.
	// The score threshold per period for which the action will be executed the first time.
	// +kubebuilder:validation:Optional
	ScorePerPeriod *float64 `json:"scorePerPeriod,omitempty" tf:"score_per_period,omitempty"`

	// (String) The response header name provided by the origin which should contain the score to increment ratelimit counter on.
	// The response header name provided by the origin which should contain the score to increment ratelimit counter on.
	// +kubebuilder:validation:Optional
	ScoreResponseHeaderName *string `json:"scoreResponseHeaderName,omitempty" tf:"score_response_header_name,omitempty"`
}

type RequestFieldsInitParameters struct {

	// readable name of the ruleset.
	// The name of the field.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type RequestFieldsObservation struct {

	// readable name of the ruleset.
	// The name of the field.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type RequestFieldsParameters struct {

	// readable name of the ruleset.
	// The name of the field.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type ResponseFieldsInitParameters struct {

	// readable name of the ruleset.
	// The name of the field.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ResponseFieldsObservation struct {

	// readable name of the ruleset.
	// The name of the field.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ResponseFieldsParameters struct {

	// readable name of the ruleset.
	// The name of the field.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type ResponseInitParameters struct {

	// (String) Error response content.
	// The content to return.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// type header to set with the response.
	// The type of the content to return.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// (Number) The status code to use for the error.
	// The status code to return.
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`
}

type ResponseObservation struct {

	// (String) Error response content.
	// The content to return.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// type header to set with the response.
	// The type of the content to return.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// (Number) The status code to use for the error.
	// The status code to return.
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`
}

type ResponseParameters struct {

	// (String) Error response content.
	// The content to return.
	// +kubebuilder:validation:Optional
	Content *string `json:"content" tf:"content,omitempty"`

	// type header to set with the response.
	// The type of the content to return.
	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType" tf:"content_type,omitempty"`

	// (Number) The status code to use for the error.
	// The status code to return.
	// +kubebuilder:validation:Optional
	StatusCode *float64 `json:"statusCode" tf:"status_code,omitempty"`
}

type RulesInitParameters struct {

	// (String) The action to perform when the rule matches.
	// The action to perform when the rule matches.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (Attributes) The parameters configuring the rule's action. (see below for nested schema)
	ActionParameters *ActionParametersInitParameters `json:"actionParameters,omitempty" tf:"action_parameters,omitempty"`

	// (String) An informative description of the ruleset.
	// An informative description of the rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether the rule should be executed.
	// Whether the rule should be executed.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes) Configure checks for exposed credentials. (see below for nested schema)
	ExposedCredentialCheck *ExposedCredentialCheckInitParameters `json:"exposedCredentialCheck,omitempty" tf:"exposed_credential_check,omitempty"`

	// (String) The expression defining which traffic will match the rule.
	// The expression defining which traffic will match the rule.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (Attributes) An object configuring the rule's logging behavior. (see below for nested schema)
	Logging *LoggingInitParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	// (Attributes) An object configuring the rule's ratelimit behavior. (see below for nested schema)
	Ratelimit *RatelimitInitParameters `json:"ratelimit,omitempty" tf:"ratelimit,omitempty"`

	// (String) The reference of the rule (the rule ID by default).
	// The reference of the rule (the rule ID by default).
	Ref *string `json:"ref,omitempty" tf:"ref,omitempty"`
}

type RulesObservation struct {

	// (String) The action to perform when the rule matches.
	// The action to perform when the rule matches.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (Attributes) The parameters configuring the rule's action. (see below for nested schema)
	ActionParameters *ActionParametersObservation `json:"actionParameters,omitempty" tf:"action_parameters,omitempty"`

	// (List of String) The categories of the rule.
	// The categories of the rule.
	Categories []*string `json:"categories,omitempty" tf:"categories,omitempty"`

	// (String) An informative description of the ruleset.
	// An informative description of the rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether the rule should be executed.
	// Whether the rule should be executed.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes) Configure checks for exposed credentials. (see below for nested schema)
	ExposedCredentialCheck *ExposedCredentialCheckObservation `json:"exposedCredentialCheck,omitempty" tf:"exposed_credential_check,omitempty"`

	// (String) The expression defining which traffic will match the rule.
	// The expression defining which traffic will match the rule.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (String) The unique ID of the ruleset.
	// The unique ID of the rule.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes) An object configuring the rule's logging behavior. (see below for nested schema)
	Logging *LoggingObservation `json:"logging,omitempty" tf:"logging,omitempty"`

	// (Attributes) An object configuring the rule's ratelimit behavior. (see below for nested schema)
	Ratelimit *RatelimitObservation `json:"ratelimit,omitempty" tf:"ratelimit,omitempty"`

	// (String) The reference of the rule (the rule ID by default).
	// The reference of the rule (the rule ID by default).
	Ref *string `json:"ref,omitempty" tf:"ref,omitempty"`
}

type RulesParameters struct {

	// (String) The action to perform when the rule matches.
	// The action to perform when the rule matches.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (Attributes) The parameters configuring the rule's action. (see below for nested schema)
	// +kubebuilder:validation:Optional
	ActionParameters *ActionParametersParameters `json:"actionParameters" tf:"action_parameters,omitempty"`

	// (String) An informative description of the ruleset.
	// An informative description of the rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether the rule should be executed.
	// Whether the rule should be executed.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes) Configure checks for exposed credentials. (see below for nested schema)
	// +kubebuilder:validation:Optional
	ExposedCredentialCheck *ExposedCredentialCheckParameters `json:"exposedCredentialCheck" tf:"exposed_credential_check,omitempty"`

	// (String) The expression defining which traffic will match the rule.
	// The expression defining which traffic will match the rule.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (Attributes) An object configuring the rule's logging behavior. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Logging *LoggingParameters `json:"logging" tf:"logging,omitempty"`

	// (Attributes) An object configuring the rule's ratelimit behavior. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Ratelimit *RatelimitParameters `json:"ratelimit" tf:"ratelimit,omitempty"`

	// (String) The reference of the rule (the rule ID by default).
	// The reference of the rule (the rule ID by default).
	// +kubebuilder:validation:Optional
	Ref *string `json:"ref,omitempty" tf:"ref,omitempty"`
}

type RulesetInitParameters struct {

	// (String) The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) An informative description of the ruleset.
	// An informative description of the ruleset.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The kind of the ruleset.
	// The kind of the ruleset.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (String) The phase of the ruleset.
	// The phase of the ruleset.
	Phase *string `json:"phase,omitempty" tf:"phase,omitempty"`

	// (Attributes List) The list of rules in the ruleset. (see below for nested schema)
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RulesetObservation struct {

	// (String) The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) An informative description of the ruleset.
	// An informative description of the ruleset.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The unique ID of the ruleset.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The kind of the ruleset.
	// The kind of the ruleset.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (String) The phase of the ruleset.
	// The phase of the ruleset.
	Phase *string `json:"phase,omitempty" tf:"phase,omitempty"`

	// (Attributes List) The list of rules in the ruleset. (see below for nested schema)
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RulesetParameters struct {

	// (String) The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) An informative description of the ruleset.
	// An informative description of the ruleset.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The kind of the ruleset.
	// The kind of the ruleset.
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (String) The phase of the ruleset.
	// The phase of the ruleset.
	// +kubebuilder:validation:Optional
	Phase *string `json:"phase,omitempty" tf:"phase,omitempty"`

	// (Attributes List) The list of rules in the ruleset. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ServeStaleInitParameters struct {

	// (Boolean) Defines whether Cloudflare should serve stale content while updating. If true, Cloudflare will not serve stale content while getting the latest content from the origin.
	// Defines whether Cloudflare should serve stale content while updating. If true, Cloudflare will not serve stale content while getting the latest content from the origin.
	DisableStaleWhileUpdating *bool `json:"disableStaleWhileUpdating,omitempty" tf:"disable_stale_while_updating,omitempty"`
}

type ServeStaleObservation struct {

	// (Boolean) Defines whether Cloudflare should serve stale content while updating. If true, Cloudflare will not serve stale content while getting the latest content from the origin.
	// Defines whether Cloudflare should serve stale content while updating. If true, Cloudflare will not serve stale content while getting the latest content from the origin.
	DisableStaleWhileUpdating *bool `json:"disableStaleWhileUpdating,omitempty" tf:"disable_stale_while_updating,omitempty"`
}

type ServeStaleParameters struct {

	// (Boolean) Defines whether Cloudflare should serve stale content while updating. If true, Cloudflare will not serve stale content while getting the latest content from the origin.
	// Defines whether Cloudflare should serve stale content while updating. If true, Cloudflare will not serve stale content while getting the latest content from the origin.
	// +kubebuilder:validation:Optional
	DisableStaleWhileUpdating *bool `json:"disableStaleWhileUpdating" tf:"disable_stale_while_updating,omitempty"`
}

type SniInitParameters struct {

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// The SNI override.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SniObservation struct {

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// The SNI override.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SniParameters struct {

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// The SNI override.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type StatusCodeRangeInitParameters struct {

	// (Number) response status code lower bound
	// response status code lower bound
	From *float64 `json:"from,omitempty" tf:"from,omitempty"`

	// (Number) response status code upper bound
	// response status code upper bound
	To *float64 `json:"to,omitempty" tf:"to,omitempty"`
}

type StatusCodeRangeObservation struct {

	// (Number) response status code lower bound
	// response status code lower bound
	From *float64 `json:"from,omitempty" tf:"from,omitempty"`

	// (Number) response status code upper bound
	// response status code upper bound
	To *float64 `json:"to,omitempty" tf:"to,omitempty"`
}

type StatusCodeRangeParameters struct {

	// (Number) response status code lower bound
	// response status code lower bound
	// +kubebuilder:validation:Optional
	From *float64 `json:"from,omitempty" tf:"from,omitempty"`

	// (Number) response status code upper bound
	// response status code upper bound
	// +kubebuilder:validation:Optional
	To *float64 `json:"to,omitempty" tf:"to,omitempty"`
}

type StatusCodeTTLInitParameters struct {

	// (Number) The status code to use for the error.
	// Set the ttl for responses with this specific status code
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// (Attributes) The range of status codes used to apply the selected mode. (see below for nested schema)
	StatusCodeRange *StatusCodeRangeInitParameters `json:"statusCodeRange,omitempty" tf:"status_code_range,omitempty"`

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// Time to cache a response (in seconds). A value of 0 is equivalent to setting the Cache-Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type StatusCodeTTLObservation struct {

	// (Number) The status code to use for the error.
	// Set the ttl for responses with this specific status code
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// (Attributes) The range of status codes used to apply the selected mode. (see below for nested schema)
	StatusCodeRange *StatusCodeRangeObservation `json:"statusCodeRange,omitempty" tf:"status_code_range,omitempty"`

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// Time to cache a response (in seconds). A value of 0 is equivalent to setting the Cache-Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type StatusCodeTTLParameters struct {

	// (Number) The status code to use for the error.
	// Set the ttl for responses with this specific status code
	// +kubebuilder:validation:Optional
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// (Attributes) The range of status codes used to apply the selected mode. (see below for nested schema)
	// +kubebuilder:validation:Optional
	StatusCodeRange *StatusCodeRangeParameters `json:"statusCodeRange,omitempty" tf:"status_code_range,omitempty"`

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// Time to cache a response (in seconds). A value of 0 is equivalent to setting the Cache-Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type TargetURLInitParameters struct {

	// (String) The expression defining which traffic will match the rule.
	// An expression to evaluate to get the URL to redirect the request to.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// The URL to redirect the request to.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TargetURLObservation struct {

	// (String) The expression defining which traffic will match the rule.
	// An expression to evaluate to get the URL to redirect the request to.
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// The URL to redirect the request to.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TargetURLParameters struct {

	// (String) The expression defining which traffic will match the rule.
	// An expression to evaluate to get the URL to redirect the request to.
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// Control header with the value "no-cache". A value of -1 is equivalent to setting Cache-Control header with the value of "no-store".
	// The URL to redirect the request to.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type URIInitParameters struct {

	// (Attributes) Path portion rewrite. (see below for nested schema)
	Path *PathInitParameters `json:"path,omitempty" tf:"path,omitempty"`

	// (Attributes) Query portion rewrite. (see below for nested schema)
	Query *QueryInitParameters `json:"query,omitempty" tf:"query,omitempty"`
}

type URIObservation struct {

	// (Attributes) Path portion rewrite. (see below for nested schema)
	Path *PathObservation `json:"path,omitempty" tf:"path,omitempty"`

	// (Attributes) Query portion rewrite. (see below for nested schema)
	Query *QueryObservation `json:"query,omitempty" tf:"query,omitempty"`
}

type URIParameters struct {

	// (Attributes) Path portion rewrite. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Path *PathParameters `json:"path,omitempty" tf:"path,omitempty"`

	// (Attributes) Query portion rewrite. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Query *QueryParameters `json:"query,omitempty" tf:"query,omitempty"`
}

type UserInitParameters struct {

	// (Boolean) Use the user agent's device type in the cache key.
	// Use the user agent's device type in the cache key.
	DeviceType *bool `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// (Boolean) Use the user agents's country in the cache key.
	// Use the user agents's country in the cache key.
	Geo *bool `json:"geo,omitempty" tf:"geo,omitempty"`

	// (Boolean) Use the user agent's language in the cache key.
	// Use the user agent's language in the cache key.
	Lang *bool `json:"lang,omitempty" tf:"lang,omitempty"`
}

type UserObservation struct {

	// (Boolean) Use the user agent's device type in the cache key.
	// Use the user agent's device type in the cache key.
	DeviceType *bool `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// (Boolean) Use the user agents's country in the cache key.
	// Use the user agents's country in the cache key.
	Geo *bool `json:"geo,omitempty" tf:"geo,omitempty"`

	// (Boolean) Use the user agent's language in the cache key.
	// Use the user agent's language in the cache key.
	Lang *bool `json:"lang,omitempty" tf:"lang,omitempty"`
}

type UserParameters struct {

	// (Boolean) Use the user agent's device type in the cache key.
	// Use the user agent's device type in the cache key.
	// +kubebuilder:validation:Optional
	DeviceType *bool `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// (Boolean) Use the user agents's country in the cache key.
	// Use the user agents's country in the cache key.
	// +kubebuilder:validation:Optional
	Geo *bool `json:"geo,omitempty" tf:"geo,omitempty"`

	// (Boolean) Use the user agent's language in the cache key.
	// Use the user agent's language in the cache key.
	// +kubebuilder:validation:Optional
	Lang *bool `json:"lang,omitempty" tf:"lang,omitempty"`
}

// RulesetSpec defines the desired state of Ruleset
type RulesetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RulesetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RulesetInitParameters `json:"initProvider,omitempty"`
}

// RulesetStatus defines the observed state of Ruleset.
type RulesetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RulesetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Ruleset is the Schema for the Rulesets API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Ruleset struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.kind) || (has(self.initProvider) && has(self.initProvider.kind))",message="spec.forProvider.kind is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.phase) || (has(self.initProvider) && has(self.initProvider.phase))",message="spec.forProvider.phase is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rules) || (has(self.initProvider) && has(self.initProvider.rules))",message="spec.forProvider.rules is a required parameter"
	Spec   RulesetSpec   `json:"spec"`
	Status RulesetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RulesetList contains a list of Rulesets
type RulesetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ruleset `json:"items"`
}

// Repository type metadata.
var (
	Ruleset_Kind             = "Ruleset"
	Ruleset_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Ruleset_Kind}.String()
	Ruleset_KindAPIVersion   = Ruleset_Kind + "." + CRDGroupVersion.String()
	Ruleset_GroupVersionKind = CRDGroupVersion.WithKind(Ruleset_Kind)
)

func init() {
	SchemeBuilder.Register(&Ruleset{}, &RulesetList{})
}
