// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MetaInitParameters struct {
}

type MetaObservation struct {

	// (Boolean) The zone is only configured for CDN
	// The zone is only configured for CDN
	CdnOnly *bool `json:"cdnOnly,omitempty" tf:"cdn_only,omitempty"`

	// (Number) Number of Custom Certificates the zone can have
	// Number of Custom Certificates the zone can have
	CustomCertificateQuota *float64 `json:"customCertificateQuota,omitempty" tf:"custom_certificate_quota,omitempty"`

	// (Boolean) The zone is only configured for DNS
	// The zone is only configured for DNS
	DNSOnly *bool `json:"dnsOnly,omitempty" tf:"dns_only,omitempty"`

	// (Boolean) The zone is setup with Foundation DNS
	// The zone is setup with Foundation DNS
	FoundationDNS *bool `json:"foundationDns,omitempty" tf:"foundation_dns,omitempty"`

	// (Number) Number of Page Rules a zone can have
	// Number of Page Rules a zone can have
	PageRuleQuota *float64 `json:"pageRuleQuota,omitempty" tf:"page_rule_quota,omitempty"`

	// (Boolean) The zone has been flagged for phishing
	// The zone has been flagged for phishing
	PhishingDetected *bool `json:"phishingDetected,omitempty" tf:"phishing_detected,omitempty"`

	// (Number)
	Step *float64 `json:"step,omitempty" tf:"step,omitempty"`
}

type MetaParameters struct {
}

type OwnerInitParameters struct {
}

type OwnerObservation struct {

	// (String) Identifier
	// Identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The domain name
	// Name of the owner
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// hosted zone or a CNAME setup.
	// The type of owner
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type OwnerParameters struct {
}

type ZoneAccountInitParameters struct {

	// (String) Identifier
	// Identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ZoneAccountObservation struct {

	// (String) Identifier
	// Identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ZoneAccountParameters struct {

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ZoneInitParameters struct {

	// (Attributes) (see below for nested schema)
	Account *ZoneAccountInitParameters `json:"account,omitempty" tf:"account,omitempty"`

	// (Attributes) Metadata about the zone (see below for nested schema)
	Meta *MetaInitParameters `json:"meta,omitempty" tf:"meta,omitempty"`

	// (Attributes) The owner of the zone (see below for nested schema)
	Owner *OwnerInitParameters `json:"owner,omitempty" tf:"owner,omitempty"`

	// hosted zone or a CNAME setup.
	// A full zone implies that DNS is hosted with Cloudflare. A partial zone is
	// typically a partner-hosted zone or a CNAME setup.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (List of String) An array of domains used for custom name servers. This is only
	// available for Business and Enterprise plans.
	// An array of domains used for custom name servers. This is only
	// available for Business and Enterprise plans.
	VanityNameServers []*string `json:"vanityNameServers,omitempty" tf:"vanity_name_servers,omitempty"`
}

type ZoneObservation struct {

	// (Attributes) (see below for nested schema)
	Account *ZoneAccountObservation `json:"account,omitempty" tf:"account,omitempty"`

	// (String) The last time proof of ownership was detected and the zone was made
	// active
	// The last time proof of ownership was detected and the zone was made
	// active
	ActivatedOn *string `json:"activatedOn,omitempty" tf:"activated_on,omitempty"`

	// (String) When the zone was created
	// When the zone was created
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (Number) The interval (in seconds) from when development mode expires
	// (positive integer) or last expired (negative integer) for the
	// domain. If development mode has never been enabled, this value is 0.
	// The interval (in seconds) from when development mode expires
	// (positive integer) or last expired (negative integer) for the
	// domain. If development mode has never been enabled, this value is 0.
	DevelopmentMode *float64 `json:"developmentMode,omitempty" tf:"development_mode,omitempty"`

	// (String) Identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes) Metadata about the zone (see below for nested schema)
	Meta *MetaObservation `json:"meta,omitempty" tf:"meta,omitempty"`

	// (String) When the zone was last modified
	// When the zone was last modified
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (List of String) The name servers Cloudflare assigns to a zone
	// The name servers Cloudflare assigns to a zone
	NameServers []*string `json:"nameServers,omitempty" tf:"name_servers,omitempty"`

	// (String) DNS host at the time of switching to Cloudflare
	// DNS host at the time of switching to Cloudflare
	OriginalDnshost *string `json:"originalDnshost,omitempty" tf:"original_dnshost,omitempty"`

	// (List of String) Original name servers before moving to Cloudflare
	// Original name servers before moving to Cloudflare
	OriginalNameServers []*string `json:"originalNameServers,omitempty" tf:"original_name_servers,omitempty"`

	// (String) Registrar for the domain at the time of switching to Cloudflare
	// Registrar for the domain at the time of switching to Cloudflare
	OriginalRegistrar *string `json:"originalRegistrar,omitempty" tf:"original_registrar,omitempty"`

	// (Attributes) The owner of the zone (see below for nested schema)
	Owner *OwnerObservation `json:"owner,omitempty" tf:"owner,omitempty"`

	// (Boolean) Indicates whether the zone is only using Cloudflare DNS services. A
	// true value means the zone will not receive security or performance
	// benefits.
	// Indicates whether the zone is only using Cloudflare DNS services. A
	// true value means the zone will not receive security or performance
	// benefits.
	Paused *bool `json:"paused,omitempty" tf:"paused,omitempty"`

	// (String) The zone status on Cloudflare.
	// The zone status on Cloudflare.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// hosted zone or a CNAME setup.
	// A full zone implies that DNS is hosted with Cloudflare. A partial zone is
	// typically a partner-hosted zone or a CNAME setup.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (List of String) An array of domains used for custom name servers. This is only
	// available for Business and Enterprise plans.
	// An array of domains used for custom name servers. This is only
	// available for Business and Enterprise plans.
	VanityNameServers []*string `json:"vanityNameServers,omitempty" tf:"vanity_name_servers,omitempty"`

	// (String) Verification key for partial zone setup.
	// Verification key for partial zone setup.
	VerificationKey *string `json:"verificationKey,omitempty" tf:"verification_key,omitempty"`
}

type ZoneParameters struct {

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Account *ZoneAccountParameters `json:"account,omitempty" tf:"account,omitempty"`

	// (Attributes) Metadata about the zone (see below for nested schema)
	// +kubebuilder:validation:Optional
	Meta *MetaParameters `json:"meta,omitempty" tf:"meta,omitempty"`

	// (Attributes) The owner of the zone (see below for nested schema)
	// +kubebuilder:validation:Optional
	Owner *OwnerParameters `json:"owner,omitempty" tf:"owner,omitempty"`

	// hosted zone or a CNAME setup.
	// A full zone implies that DNS is hosted with Cloudflare. A partial zone is
	// typically a partner-hosted zone or a CNAME setup.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (List of String) An array of domains used for custom name servers. This is only
	// available for Business and Enterprise plans.
	// An array of domains used for custom name servers. This is only
	// available for Business and Enterprise plans.
	// +kubebuilder:validation:Optional
	VanityNameServers []*string `json:"vanityNameServers,omitempty" tf:"vanity_name_servers,omitempty"`
}

// ZoneSpec defines the desired state of Zone
type ZoneSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ZoneParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ZoneInitParameters `json:"initProvider,omitempty"`
}

// ZoneStatus defines the observed state of Zone.
type ZoneStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ZoneObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Zone is the Schema for the Zones API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Zone struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ZoneSpec   `json:"spec"`
	Status            ZoneStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneList contains a list of Zones
type ZoneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Zone `json:"items"`
}

// Repository type metadata.
var (
	Zone_Kind             = "Zone"
	Zone_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Zone_Kind}.String()
	Zone_KindAPIVersion   = Zone_Kind + "." + CRDGroupVersion.String()
	Zone_GroupVersionKind = CRDGroupVersion.WithKind(Zone_Kind)
)

func init() {
	SchemeBuilder.Register(&Zone{}, &ZoneList{})
}
