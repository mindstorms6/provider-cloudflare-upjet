// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ImageInitParameters struct {

	// (String) Account identifier tag.
	// Account identifier tag.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) An image binary data. Only needed when type is uploading a file.
	// An image binary data. Only needed when type is uploading a file.
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// value store. Can use used for keeping references to another system of record for managing images.
	// User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Boolean) Indicates whether the image requires a signature token for the access.
	// Indicates whether the image requires a signature token for the access.
	RequireSignedUrls *bool `json:"requireSignedUrls,omitempty" tf:"require_signed_urls,omitempty"`

	// (String) A URL to fetch an image from origin. Only needed when type is uploading from a URL.
	// A URL to fetch an image from origin. Only needed when type is uploading from a URL.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ImageObservation struct {

	// (String) Account identifier tag.
	// Account identifier tag.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) An image binary data. Only needed when type is uploading a file.
	// An image binary data. Only needed when type is uploading a file.
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// (String) Image file name.
	// Image file name.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	// (String) Image unique identifier.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
	// User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
	Meta *string `json:"meta,omitempty" tf:"meta,omitempty"`

	// value store. Can use used for keeping references to another system of record for managing images.
	// User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Boolean) Indicates whether the image requires a signature token for the access.
	// Indicates whether the image requires a signature token for the access.
	RequireSignedUrls *bool `json:"requireSignedUrls,omitempty" tf:"require_signed_urls,omitempty"`

	// (String) A URL to fetch an image from origin. Only needed when type is uploading from a URL.
	// A URL to fetch an image from origin. Only needed when type is uploading from a URL.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) When the media item was uploaded.
	// When the media item was uploaded.
	Uploaded *string `json:"uploaded,omitempty" tf:"uploaded,omitempty"`

	// (List of String) Object specifying available variants for an image.
	// Object specifying available variants for an image.
	Variants []*string `json:"variants,omitempty" tf:"variants,omitempty"`
}

type ImageParameters struct {

	// (String) Account identifier tag.
	// Account identifier tag.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) An image binary data. Only needed when type is uploading a file.
	// An image binary data. Only needed when type is uploading a file.
	// +kubebuilder:validation:Optional
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// value store. Can use used for keeping references to another system of record for managing images.
	// User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Boolean) Indicates whether the image requires a signature token for the access.
	// Indicates whether the image requires a signature token for the access.
	// +kubebuilder:validation:Optional
	RequireSignedUrls *bool `json:"requireSignedUrls,omitempty" tf:"require_signed_urls,omitempty"`

	// (String) A URL to fetch an image from origin. Only needed when type is uploading from a URL.
	// A URL to fetch an image from origin. Only needed when type is uploading from a URL.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

// ImageSpec defines the desired state of Image
type ImageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ImageInitParameters `json:"initProvider,omitempty"`
}

// ImageStatus defines the observed state of Image.
type ImageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Image is the Schema for the Images API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Image struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	Spec   ImageSpec   `json:"spec"`
	Status ImageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageList contains a list of Images
type ImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Image `json:"items"`
}

// Repository type metadata.
var (
	Image_Kind             = "Image"
	Image_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Image_Kind}.String()
	Image_KindAPIVersion   = Image_Kind + "." + CRDGroupVersion.String()
	Image_GroupVersionKind = CRDGroupVersion.WithKind(Image_Kind)
)

func init() {
	SchemeBuilder.Register(&Image{}, &ImageList{})
}
