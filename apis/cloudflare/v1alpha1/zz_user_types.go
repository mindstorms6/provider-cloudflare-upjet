// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserInitParameters_2 struct {

	// (String) The country in which the user lives.
	// The country in which the user lives.
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// (String) User's first name
	// User's first name
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// (String) User's last name
	// User's last name
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// (String) User's telephone number
	// User's telephone number
	Telephone *string `json:"telephone,omitempty" tf:"telephone,omitempty"`

	// (String) The zipcode or postal code where the user lives.
	// The zipcode or postal code where the user lives.
	Zipcode *string `json:"zipcode,omitempty" tf:"zipcode,omitempty"`
}

type UserObservation_2 struct {

	// (String) The country in which the user lives.
	// The country in which the user lives.
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// (String) User's first name
	// User's first name
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) User's last name
	// User's last name
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// (String) User's telephone number
	// User's telephone number
	Telephone *string `json:"telephone,omitempty" tf:"telephone,omitempty"`

	// (String) The zipcode or postal code where the user lives.
	// The zipcode or postal code where the user lives.
	Zipcode *string `json:"zipcode,omitempty" tf:"zipcode,omitempty"`
}

type UserParameters_2 struct {

	// (String) The country in which the user lives.
	// The country in which the user lives.
	// +kubebuilder:validation:Optional
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// (String) User's first name
	// User's first name
	// +kubebuilder:validation:Optional
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// (String) User's last name
	// User's last name
	// +kubebuilder:validation:Optional
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// (String) User's telephone number
	// User's telephone number
	// +kubebuilder:validation:Optional
	Telephone *string `json:"telephone,omitempty" tf:"telephone,omitempty"`

	// (String) The zipcode or postal code where the user lives.
	// The zipcode or postal code where the user lives.
	// +kubebuilder:validation:Optional
	Zipcode *string `json:"zipcode,omitempty" tf:"zipcode,omitempty"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserInitParameters_2 `json:"initProvider,omitempty"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// User is the Schema for the Users API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserSpec   `json:"spec"`
	Status            UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
