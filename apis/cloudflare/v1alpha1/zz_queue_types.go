// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConsumersInitParameters struct {

	// (Attributes) (see below for nested schema)
	Settings *ConsumersSettingsInitParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type ConsumersObservation struct {

	// (String) A Resource identifier.
	// A Resource identifier.
	ConsumerID *string `json:"consumerId,omitempty" tf:"consumer_id,omitempty"`

	// (String)
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (String)
	// A Resource identifier.
	QueueID *string `json:"queueId,omitempty" tf:"queue_id,omitempty"`

	// (String) Name of a Worker
	// Name of a Worker
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// (String) Name of a Worker
	// Name of a Worker
	ScriptName *string `json:"scriptName,omitempty" tf:"script_name,omitempty"`

	// (Attributes) (see below for nested schema)
	Settings *ConsumersSettingsObservation `json:"settings,omitempty" tf:"settings,omitempty"`

	// (String)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConsumersParameters struct {

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Settings *ConsumersSettingsParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type ConsumersSettingsInitParameters struct {
}

type ConsumersSettingsObservation struct {

	// (Number) The maximum number of messages to include in a batch.
	// The maximum number of messages to include in a batch.
	BatchSize *float64 `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// (Number) Maximum number of concurrent consumers that may consume from this Queue. Set to null to automatically opt in to the platform's maximum (recommended).
	// Maximum number of concurrent consumers that may consume from this Queue. Set to `null` to automatically opt in to the platform's maximum (recommended).
	MaxConcurrency *float64 `json:"maxConcurrency,omitempty" tf:"max_concurrency,omitempty"`

	// (Number) The maximum number of retries
	// The maximum number of retries
	MaxRetries *float64 `json:"maxRetries,omitempty" tf:"max_retries,omitempty"`

	// (Number) The number of milliseconds to wait for a batch to fill up before attempting to deliver it
	// The number of milliseconds to wait for a batch to fill up before attempting to deliver it
	MaxWaitTimeMs *float64 `json:"maxWaitTimeMs,omitempty" tf:"max_wait_time_ms,omitempty"`

	// (Number) The number of seconds to delay before making the message available for another attempt.
	// The number of seconds to delay before making the message available for another attempt.
	RetryDelay *float64 `json:"retryDelay,omitempty" tf:"retry_delay,omitempty"`

	// (Number) The number of milliseconds that a message is exclusively leased. After the timeout, the message becomes available for another attempt.
	// The number of milliseconds that a message is exclusively leased. After the timeout, the message becomes available for another attempt.
	VisibilityTimeoutMs *float64 `json:"visibilityTimeoutMs,omitempty" tf:"visibility_timeout_ms,omitempty"`
}

type ConsumersSettingsParameters struct {
}

type ProducersInitParameters struct {
}

type ProducersObservation struct {

	// (String)
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// (String) Name of a Worker
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// (String)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ProducersParameters struct {
}

type QueueInitParameters struct {

	// (String) A Resource identifier.
	// A Resource identifier.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes List) (see below for nested schema)
	Consumers []ConsumersInitParameters `json:"consumers,omitempty" tf:"consumers,omitempty"`

	// (Attributes List) (see below for nested schema)
	Producers []ProducersInitParameters `json:"producers,omitempty" tf:"producers,omitempty"`

	// (String)
	QueueName *string `json:"queueName,omitempty" tf:"queue_name,omitempty"`

	// (Attributes) (see below for nested schema)
	Settings *QueueSettingsInitParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type QueueObservation struct {

	// (String) A Resource identifier.
	// A Resource identifier.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes List) (see below for nested schema)
	Consumers []ConsumersObservation `json:"consumers,omitempty" tf:"consumers,omitempty"`

	// (Number)
	ConsumersTotalCount *float64 `json:"consumersTotalCount,omitempty" tf:"consumers_total_count,omitempty"`

	// (String)
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (Attributes List) (see below for nested schema)
	Producers []ProducersObservation `json:"producers,omitempty" tf:"producers,omitempty"`

	// (Number)
	ProducersTotalCount *float64 `json:"producersTotalCount,omitempty" tf:"producers_total_count,omitempty"`

	// (String)
	QueueID *string `json:"queueId,omitempty" tf:"queue_id,omitempty"`

	// (String)
	QueueName *string `json:"queueName,omitempty" tf:"queue_name,omitempty"`

	// (Attributes) (see below for nested schema)
	Settings *QueueSettingsObservation `json:"settings,omitempty" tf:"settings,omitempty"`
}

type QueueParameters struct {

	// (String) A Resource identifier.
	// A Resource identifier.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Consumers []ConsumersParameters `json:"consumers,omitempty" tf:"consumers,omitempty"`

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Producers []ProducersParameters `json:"producers,omitempty" tf:"producers,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	QueueName *string `json:"queueName,omitempty" tf:"queue_name,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Settings *QueueSettingsParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type QueueSettingsInitParameters struct {

	// (Number) Number of seconds to delay delivery of all messages to consumers.
	// Number of seconds to delay delivery of all messages to consumers.
	DeliveryDelay *float64 `json:"deliveryDelay,omitempty" tf:"delivery_delay,omitempty"`

	// (Number) Number of seconds after which an unconsumed message will be delayed.
	// Number of seconds after which an unconsumed message will be delayed.
	MessageRetentionPeriod *float64 `json:"messageRetentionPeriod,omitempty" tf:"message_retention_period,omitempty"`
}

type QueueSettingsObservation struct {

	// (Number) Number of seconds to delay delivery of all messages to consumers.
	// Number of seconds to delay delivery of all messages to consumers.
	DeliveryDelay *float64 `json:"deliveryDelay,omitempty" tf:"delivery_delay,omitempty"`

	// (Number) Number of seconds after which an unconsumed message will be delayed.
	// Number of seconds after which an unconsumed message will be delayed.
	MessageRetentionPeriod *float64 `json:"messageRetentionPeriod,omitempty" tf:"message_retention_period,omitempty"`
}

type QueueSettingsParameters struct {

	// (Number) Number of seconds to delay delivery of all messages to consumers.
	// Number of seconds to delay delivery of all messages to consumers.
	// +kubebuilder:validation:Optional
	DeliveryDelay *float64 `json:"deliveryDelay,omitempty" tf:"delivery_delay,omitempty"`

	// (Number) Number of seconds after which an unconsumed message will be delayed.
	// Number of seconds after which an unconsumed message will be delayed.
	// +kubebuilder:validation:Optional
	MessageRetentionPeriod *float64 `json:"messageRetentionPeriod,omitempty" tf:"message_retention_period,omitempty"`
}

// QueueSpec defines the desired state of Queue
type QueueSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QueueParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider QueueInitParameters `json:"initProvider,omitempty"`
}

// QueueStatus defines the observed state of Queue.
type QueueStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QueueObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Queue is the Schema for the Queues API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Queue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountId) || (has(self.initProvider) && has(self.initProvider.accountId))",message="spec.forProvider.accountId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.consumers) || (has(self.initProvider) && has(self.initProvider.consumers))",message="spec.forProvider.consumers is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.producers) || (has(self.initProvider) && has(self.initProvider.producers))",message="spec.forProvider.producers is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.queueName) || (has(self.initProvider) && has(self.initProvider.queueName))",message="spec.forProvider.queueName is a required parameter"
	Spec   QueueSpec   `json:"spec"`
	Status QueueStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QueueList contains a list of Queues
type QueueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Queue `json:"items"`
}

// Repository type metadata.
var (
	Queue_Kind             = "Queue"
	Queue_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Queue_Kind}.String()
	Queue_KindAPIVersion   = Queue_Kind + "." + CRDGroupVersion.String()
	Queue_GroupVersionKind = CRDGroupVersion.WithKind(Queue_Kind)
)

func init() {
	SchemeBuilder.Register(&Queue{}, &QueueList{})
}
