// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CACertificateInitParameters struct {

	// encoded.
	// The Certificate Signing Request (CSR). Must be newline-encoded.
	Csr *string `json:"csr,omitempty" tf:"csr,omitempty"`

	// (List of String) Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
	// Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
	Hostnames []*string `json:"hostnames,omitempty" tf:"hostnames,omitempty"`

	// rsa" (rsa), "origin-ecc" (ecdsa), or "keyless-certificate" (for Keyless SSL servers).
	// Signature type desired on certificate ("origin-rsa" (rsa), "origin-ecc" (ecdsa), or "keyless-certificate" (for Keyless SSL servers).
	RequestType *string `json:"requestType,omitempty" tf:"request_type,omitempty"`

	// (Number) The number of days for which the certificate should be valid.
	// The number of days for which the certificate should be valid.
	RequestedValidity *float64 `json:"requestedValidity,omitempty" tf:"requested_validity,omitempty"`
}

type CACertificateObservation struct {

	// encoded.
	// The Origin CA certificate. Will be newline-encoded.
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// encoded.
	// The Certificate Signing Request (CSR). Must be newline-encoded.
	Csr *string `json:"csr,omitempty" tf:"csr,omitempty"`

	// (String) When the certificate will expire.
	// When the certificate will expire.
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	// (List of String) Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
	// Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
	Hostnames []*string `json:"hostnames,omitempty" tf:"hostnames,omitempty"`

	// (String) Identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// rsa" (rsa), "origin-ecc" (ecdsa), or "keyless-certificate" (for Keyless SSL servers).
	// Signature type desired on certificate ("origin-rsa" (rsa), "origin-ecc" (ecdsa), or "keyless-certificate" (for Keyless SSL servers).
	RequestType *string `json:"requestType,omitempty" tf:"request_type,omitempty"`

	// (Number) The number of days for which the certificate should be valid.
	// The number of days for which the certificate should be valid.
	RequestedValidity *float64 `json:"requestedValidity,omitempty" tf:"requested_validity,omitempty"`
}

type CACertificateParameters struct {

	// encoded.
	// The Certificate Signing Request (CSR). Must be newline-encoded.
	// +kubebuilder:validation:Optional
	Csr *string `json:"csr,omitempty" tf:"csr,omitempty"`

	// (List of String) Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
	// Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
	// +kubebuilder:validation:Optional
	Hostnames []*string `json:"hostnames,omitempty" tf:"hostnames,omitempty"`

	// rsa" (rsa), "origin-ecc" (ecdsa), or "keyless-certificate" (for Keyless SSL servers).
	// Signature type desired on certificate ("origin-rsa" (rsa), "origin-ecc" (ecdsa), or "keyless-certificate" (for Keyless SSL servers).
	// +kubebuilder:validation:Optional
	RequestType *string `json:"requestType,omitempty" tf:"request_type,omitempty"`

	// (Number) The number of days for which the certificate should be valid.
	// The number of days for which the certificate should be valid.
	// +kubebuilder:validation:Optional
	RequestedValidity *float64 `json:"requestedValidity,omitempty" tf:"requested_validity,omitempty"`
}

// CACertificateSpec defines the desired state of CACertificate
type CACertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CACertificateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CACertificateInitParameters `json:"initProvider,omitempty"`
}

// CACertificateStatus defines the observed state of CACertificate.
type CACertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CACertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CACertificate is the Schema for the CACertificates API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type CACertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CACertificateSpec   `json:"spec"`
	Status            CACertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CACertificateList contains a list of CACertificates
type CACertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CACertificate `json:"items"`
}

// Repository type metadata.
var (
	CACertificate_Kind             = "CACertificate"
	CACertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CACertificate_Kind}.String()
	CACertificate_KindAPIVersion   = CACertificate_Kind + "." + CRDGroupVersion.String()
	CACertificate_GroupVersionKind = CRDGroupVersion.WithKind(CACertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&CACertificate{}, &CACertificateList{})
}
