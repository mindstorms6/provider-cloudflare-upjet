// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DesktopReportInitParameters struct {

	// (Attributes) (see below for nested schema)
	Error *ErrorInitParameters `json:"error,omitempty" tf:"error,omitempty"`
}

type DesktopReportObservation struct {

	// (Number) Cumulative Layout Shift.
	// Cumulative Layout Shift.
	Cls *float64 `json:"cls,omitempty" tf:"cls,omitempty"`

	// (String) The type of device.
	// The type of device.
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// (Attributes) (see below for nested schema)
	Error *ErrorObservation `json:"error,omitempty" tf:"error,omitempty"`

	// (Number) First Contentful Paint.
	// First Contentful Paint.
	Fcp *float64 `json:"fcp,omitempty" tf:"fcp,omitempty"`

	// (String) The URL to the full Lighthouse JSON report.
	// The URL to the full Lighthouse JSON report.
	JSONReportURL *string `json:"jsonReportUrl,omitempty" tf:"json_report_url,omitempty"`

	// (Number) Largest Contentful Paint.
	// Largest Contentful Paint.
	Lcp *float64 `json:"lcp,omitempty" tf:"lcp,omitempty"`

	// (Number) The Lighthouse performance score.
	// The Lighthouse performance score.
	PerformanceScore *float64 `json:"performanceScore,omitempty" tf:"performance_score,omitempty"`

	// (Number) Speed Index.
	// Speed Index.
	Si *float64 `json:"si,omitempty" tf:"si,omitempty"`

	// (String) The state of the Lighthouse report.
	// The state of the Lighthouse report.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (Number) Total Blocking Time.
	// Total Blocking Time.
	Tbt *float64 `json:"tbt,omitempty" tf:"tbt,omitempty"`

	// (Number) Time To First Byte.
	// Time To First Byte.
	Ttfb *float64 `json:"ttfb,omitempty" tf:"ttfb,omitempty"`

	// (Number) Time To Interactive.
	// Time To Interactive.
	Tti *float64 `json:"tti,omitempty" tf:"tti,omitempty"`
}

type DesktopReportParameters struct {

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Error *ErrorParameters `json:"error,omitempty" tf:"error,omitempty"`
}

type ErrorInitParameters struct {
}

type ErrorObservation struct {

	// (String) The error code of the Lighthouse result.
	// The error code of the Lighthouse result.
	Code *string `json:"code,omitempty" tf:"code,omitempty"`

	// (String) Detailed error message.
	// Detailed error message.
	Detail *string `json:"detail,omitempty" tf:"detail,omitempty"`

	// (String) The final URL displayed to the user.
	// The final URL displayed to the user.
	FinalDisplayedURL *string `json:"finalDisplayedUrl,omitempty" tf:"final_displayed_url,omitempty"`
}

type ErrorParameters struct {
}

type MobileReportErrorInitParameters struct {
}

type MobileReportErrorObservation struct {

	// (String) The error code of the Lighthouse result.
	// The error code of the Lighthouse result.
	Code *string `json:"code,omitempty" tf:"code,omitempty"`

	// (String) Detailed error message.
	// Detailed error message.
	Detail *string `json:"detail,omitempty" tf:"detail,omitempty"`

	// (String) The final URL displayed to the user.
	// The final URL displayed to the user.
	FinalDisplayedURL *string `json:"finalDisplayedUrl,omitempty" tf:"final_displayed_url,omitempty"`
}

type MobileReportErrorParameters struct {
}

type MobileReportInitParameters struct {

	// (Attributes) (see below for nested schema)
	Error *MobileReportErrorInitParameters `json:"error,omitempty" tf:"error,omitempty"`
}

type MobileReportObservation struct {

	// (Number) Cumulative Layout Shift.
	// Cumulative Layout Shift.
	Cls *float64 `json:"cls,omitempty" tf:"cls,omitempty"`

	// (String) The type of device.
	// The type of device.
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// (Attributes) (see below for nested schema)
	Error *MobileReportErrorObservation `json:"error,omitempty" tf:"error,omitempty"`

	// (Number) First Contentful Paint.
	// First Contentful Paint.
	Fcp *float64 `json:"fcp,omitempty" tf:"fcp,omitempty"`

	// (String) The URL to the full Lighthouse JSON report.
	// The URL to the full Lighthouse JSON report.
	JSONReportURL *string `json:"jsonReportUrl,omitempty" tf:"json_report_url,omitempty"`

	// (Number) Largest Contentful Paint.
	// Largest Contentful Paint.
	Lcp *float64 `json:"lcp,omitempty" tf:"lcp,omitempty"`

	// (Number) The Lighthouse performance score.
	// The Lighthouse performance score.
	PerformanceScore *float64 `json:"performanceScore,omitempty" tf:"performance_score,omitempty"`

	// (Number) Speed Index.
	// Speed Index.
	Si *float64 `json:"si,omitempty" tf:"si,omitempty"`

	// (String) The state of the Lighthouse report.
	// The state of the Lighthouse report.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (Number) Total Blocking Time.
	// Total Blocking Time.
	Tbt *float64 `json:"tbt,omitempty" tf:"tbt,omitempty"`

	// (Number) Time To First Byte.
	// Time To First Byte.
	Ttfb *float64 `json:"ttfb,omitempty" tf:"ttfb,omitempty"`

	// (Number) Time To Interactive.
	// Time To Interactive.
	Tti *float64 `json:"tti,omitempty" tf:"tti,omitempty"`
}

type MobileReportParameters struct {

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Error *MobileReportErrorParameters `json:"error,omitempty" tf:"error,omitempty"`
}

type RegionInitParameters struct {
}

type RegionObservation struct {

	// (String)
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// (String) A test region.
	// A test region.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RegionParameters struct {
}

type ScheduleInitParameters struct {
}

type ScheduleObservation struct {

	// (String) The frequency of the test.
	// The frequency of the test.
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (String) A test region.
	// A test region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) A URL.
	// A URL.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ScheduleParameters struct {
}

type ScheduledTestInitParameters struct {

	// (Attributes) The test schedule. (see below for nested schema)
	Schedule *ScheduleInitParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// (Attributes) (see below for nested schema)
	Test *TestInitParameters `json:"test,omitempty" tf:"test,omitempty"`

	// (String) A URL.
	// A URL.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ScheduledTestObservation struct {

	// (String) The frequency of the test.
	// The frequency of the test.
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (String) A URL.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) A test region.
	// A test region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (Attributes) The test schedule. (see below for nested schema)
	Schedule *ScheduleObservation `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// (Attributes) (see below for nested schema)
	Test *TestObservation `json:"test,omitempty" tf:"test,omitempty"`

	// (String) A URL.
	// A URL.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ScheduledTestParameters struct {

	// (Attributes) The test schedule. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Schedule *ScheduleParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Test *TestParameters `json:"test,omitempty" tf:"test,omitempty"`

	// (String) A URL.
	// A URL.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type TestInitParameters struct {

	// (Attributes) The Lighthouse report. (see below for nested schema)
	DesktopReport *DesktopReportInitParameters `json:"desktopReport,omitempty" tf:"desktop_report,omitempty"`

	// (Attributes) The Lighthouse report. (see below for nested schema)
	MobileReport *MobileReportInitParameters `json:"mobileReport,omitempty" tf:"mobile_report,omitempty"`

	// (String) A test region.
	Region *RegionInitParameters `json:"region,omitempty" tf:"region,omitempty"`
}

type TestObservation struct {

	// (String)
	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	// (Attributes) The Lighthouse report. (see below for nested schema)
	DesktopReport *DesktopReportObservation `json:"desktopReport,omitempty" tf:"desktop_report,omitempty"`

	// (String) A URL.
	// UUID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes) The Lighthouse report. (see below for nested schema)
	MobileReport *MobileReportObservation `json:"mobileReport,omitempty" tf:"mobile_report,omitempty"`

	// (String) A test region.
	Region *RegionObservation `json:"region,omitempty" tf:"region,omitempty"`

	// (String) The frequency of the test.
	// The frequency of the test.
	ScheduleFrequency *string `json:"scheduleFrequency,omitempty" tf:"schedule_frequency,omitempty"`

	// (String) A URL.
	// A URL.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type TestParameters struct {

	// (Attributes) The Lighthouse report. (see below for nested schema)
	// +kubebuilder:validation:Optional
	DesktopReport *DesktopReportParameters `json:"desktopReport,omitempty" tf:"desktop_report,omitempty"`

	// (Attributes) The Lighthouse report. (see below for nested schema)
	// +kubebuilder:validation:Optional
	MobileReport *MobileReportParameters `json:"mobileReport,omitempty" tf:"mobile_report,omitempty"`

	// (String) A test region.
	// +kubebuilder:validation:Optional
	Region *RegionParameters `json:"region,omitempty" tf:"region,omitempty"`
}

// ScheduledTestSpec defines the desired state of ScheduledTest
type ScheduledTestSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScheduledTestParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ScheduledTestInitParameters `json:"initProvider,omitempty"`
}

// ScheduledTestStatus defines the observed state of ScheduledTest.
type ScheduledTestStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScheduledTestObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ScheduledTest is the Schema for the ScheduledTests API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type ScheduledTest struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.url) || (has(self.initProvider) && has(self.initProvider.url))",message="spec.forProvider.url is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   ScheduledTestSpec   `json:"spec"`
	Status ScheduledTestStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScheduledTestList contains a list of ScheduledTests
type ScheduledTestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ScheduledTest `json:"items"`
}

// Repository type metadata.
var (
	ScheduledTest_Kind             = "ScheduledTest"
	ScheduledTest_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ScheduledTest_Kind}.String()
	ScheduledTest_KindAPIVersion   = ScheduledTest_Kind + "." + CRDGroupVersion.String()
	ScheduledTest_GroupVersionKind = CRDGroupVersion.WithKind(ScheduledTest_Kind)
)

func init() {
	SchemeBuilder.Register(&ScheduledTest{}, &ScheduledTestList{})
}
