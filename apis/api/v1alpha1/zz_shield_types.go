// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthIDCharacteristicsInitParameters struct {

	// (String) The name of the characteristic field, i.e., the header or cookie name.
	// The name of the characteristic field, i.e., the header or cookie name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The type of characteristic.
	// The type of characteristic.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AuthIDCharacteristicsObservation struct {

	// (String) The name of the characteristic field, i.e., the header or cookie name.
	// The name of the characteristic field, i.e., the header or cookie name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The type of characteristic.
	// The type of characteristic.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AuthIDCharacteristicsParameters struct {

	// (String) The name of the characteristic field, i.e., the header or cookie name.
	// The name of the characteristic field, i.e., the header or cookie name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The type of characteristic.
	// The type of characteristic.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ErrorsInitParameters struct {
}

type ErrorsObservation struct {

	// (Number)
	Code *float64 `json:"code,omitempty" tf:"code,omitempty"`

	// (String)
	Message *string `json:"message,omitempty" tf:"message,omitempty"`
}

type ErrorsParameters struct {
}

type MessagesInitParameters struct {
}

type MessagesObservation struct {

	// (Number)
	Code *float64 `json:"code,omitempty" tf:"code,omitempty"`

	// (String)
	Message *string `json:"message,omitempty" tf:"message,omitempty"`
}

type MessagesParameters struct {
}

type ShieldInitParameters struct {

	// (Attributes List) (see below for nested schema)
	AuthIDCharacteristics []AuthIDCharacteristicsInitParameters `json:"authIdCharacteristics,omitempty" tf:"auth_id_characteristics,omitempty"`

	// (Attributes List) (see below for nested schema)
	Errors []ErrorsInitParameters `json:"errors,omitempty" tf:"errors,omitempty"`

	// (Attributes List) (see below for nested schema)
	Messages []MessagesInitParameters `json:"messages,omitempty" tf:"messages,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ShieldObservation struct {

	// (Attributes List) (see below for nested schema)
	AuthIDCharacteristics []AuthIDCharacteristicsObservation `json:"authIdCharacteristics,omitempty" tf:"auth_id_characteristics,omitempty"`

	// (Attributes List) (see below for nested schema)
	Errors []ErrorsObservation `json:"errors,omitempty" tf:"errors,omitempty"`

	// (String) Identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes List) (see below for nested schema)
	Messages []MessagesObservation `json:"messages,omitempty" tf:"messages,omitempty"`

	// (Boolean) Whether the API call was successful
	// Whether the API call was successful
	Success *bool `json:"success,omitempty" tf:"success,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ShieldParameters struct {

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	AuthIDCharacteristics []AuthIDCharacteristicsParameters `json:"authIdCharacteristics,omitempty" tf:"auth_id_characteristics,omitempty"`

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Errors []ErrorsParameters `json:"errors,omitempty" tf:"errors,omitempty"`

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Messages []MessagesParameters `json:"messages,omitempty" tf:"messages,omitempty"`

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// ShieldSpec defines the desired state of Shield
type ShieldSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ShieldParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ShieldInitParameters `json:"initProvider,omitempty"`
}

// ShieldStatus defines the observed state of Shield.
type ShieldStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ShieldObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Shield is the Schema for the Shields API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Shield struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authIdCharacteristics) || (has(self.initProvider) && has(self.initProvider.authIdCharacteristics))",message="spec.forProvider.authIdCharacteristics is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.errors) || (has(self.initProvider) && has(self.initProvider.errors))",message="spec.forProvider.errors is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.messages) || (has(self.initProvider) && has(self.initProvider.messages))",message="spec.forProvider.messages is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   ShieldSpec   `json:"spec"`
	Status ShieldStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ShieldList contains a list of Shields
type ShieldList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Shield `json:"items"`
}

// Repository type metadata.
var (
	Shield_Kind             = "Shield"
	Shield_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Shield_Kind}.String()
	Shield_KindAPIVersion   = Shield_Kind + "." + CRDGroupVersion.String()
	Shield_GroupVersionKind = CRDGroupVersion.WithKind(Shield_Kind)
)

func init() {
	SchemeBuilder.Register(&Shield{}, &ShieldList{})
}
