// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SchemaInitParameters struct {
}

type SchemaObservation struct {

	// (String)
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) Kind of schema
	// Kind of schema
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (String) Name of the schema
	// Name of the schema
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String)
	// UUID
	SchemaID *string `json:"schemaId,omitempty" tf:"schema_id,omitempty"`

	// (String) Source of the schema
	// Source of the schema
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) Flag whether schema is enabled for validation.
	// Flag whether schema is enabled for validation.
	ValidationEnabled *bool `json:"validationEnabled,omitempty" tf:"validation_enabled,omitempty"`
}

type SchemaParameters struct {
}

type ShieldSchemaInitParameters struct {

	// (String) Schema file bytes
	// Schema file bytes
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// (String) Kind of schema
	// Kind of schema
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (Attributes) (see below for nested schema)
	Schema *SchemaInitParameters `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String)
	SchemaID *string `json:"schemaId,omitempty" tf:"schema_id,omitempty"`

	// (Attributes) (see below for nested schema)
	UploadDetails *UploadDetailsInitParameters `json:"uploadDetails,omitempty" tf:"upload_details,omitempty"`

	// (String) Flag whether schema is enabled for validation.
	// Flag whether schema is enabled for validation.
	ValidationEnabled *string `json:"validationEnabled,omitempty" tf:"validation_enabled,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ShieldSchemaObservation struct {

	// (String)
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) Schema file bytes
	// Schema file bytes
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Kind of schema
	// Kind of schema
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (Attributes) (see below for nested schema)
	Schema *SchemaObservation `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String)
	SchemaID *string `json:"schemaId,omitempty" tf:"schema_id,omitempty"`

	// (String) Source of the schema
	// Source of the schema
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (Attributes) (see below for nested schema)
	UploadDetails *UploadDetailsObservation `json:"uploadDetails,omitempty" tf:"upload_details,omitempty"`

	// (String) Flag whether schema is enabled for validation.
	// Flag whether schema is enabled for validation.
	ValidationEnabled *string `json:"validationEnabled,omitempty" tf:"validation_enabled,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type ShieldSchemaParameters struct {

	// (String) Schema file bytes
	// Schema file bytes
	// +kubebuilder:validation:Optional
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// (String) Kind of schema
	// Kind of schema
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Schema *SchemaParameters `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	SchemaID *string `json:"schemaId,omitempty" tf:"schema_id,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	UploadDetails *UploadDetailsParameters `json:"uploadDetails,omitempty" tf:"upload_details,omitempty"`

	// (String) Flag whether schema is enabled for validation.
	// Flag whether schema is enabled for validation.
	// +kubebuilder:validation:Optional
	ValidationEnabled *string `json:"validationEnabled,omitempty" tf:"validation_enabled,omitempty"`

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type UploadDetailsInitParameters struct {

	// critical errors found within the schema. (see below for nested schema)
	Warnings []WarningsInitParameters `json:"warnings,omitempty" tf:"warnings,omitempty"`
}

type UploadDetailsObservation struct {

	// critical errors found within the schema. (see below for nested schema)
	Warnings []WarningsObservation `json:"warnings,omitempty" tf:"warnings,omitempty"`
}

type UploadDetailsParameters struct {

	// critical errors found within the schema. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Warnings []WarningsParameters `json:"warnings" tf:"warnings,omitempty"`
}

type WarningsInitParameters struct {
}

type WarningsObservation struct {

	// (Number) Code that identifies the event that occurred.
	// Code that identifies the event that occurred.
	Code *float64 `json:"code,omitempty" tf:"code,omitempty"`

	// (List of String) JSONPath location(s) in the schema where these events were encountered.  See https://goessner.net/articles/JsonPath/ for JSONPath specification.
	// JSONPath location(s) in the schema where these events were encountered.  See [https://goessner.net/articles/JsonPath/](https://goessner.net/articles/JsonPath/) for JSONPath specification.
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`

	// (String) Diagnostic message that describes the event.
	// Diagnostic message that describes the event.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`
}

type WarningsParameters struct {
}

// ShieldSchemaSpec defines the desired state of ShieldSchema
type ShieldSchemaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ShieldSchemaParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ShieldSchemaInitParameters `json:"initProvider,omitempty"`
}

// ShieldSchemaStatus defines the observed state of ShieldSchema.
type ShieldSchemaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ShieldSchemaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ShieldSchema is the Schema for the ShieldSchemas API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type ShieldSchema struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.file) || (has(self.initProvider) && has(self.initProvider.file))",message="spec.forProvider.file is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.kind) || (has(self.initProvider) && has(self.initProvider.kind))",message="spec.forProvider.kind is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   ShieldSchemaSpec   `json:"spec"`
	Status ShieldSchemaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ShieldSchemaList contains a list of ShieldSchemas
type ShieldSchemaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ShieldSchema `json:"items"`
}

// Repository type metadata.
var (
	ShieldSchema_Kind             = "ShieldSchema"
	ShieldSchema_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ShieldSchema_Kind}.String()
	ShieldSchema_KindAPIVersion   = ShieldSchema_Kind + "." + CRDGroupVersion.String()
	ShieldSchema_GroupVersionKind = CRDGroupVersion.WithKind(ShieldSchema_Kind)
)

func init() {
	SchemeBuilder.Register(&ShieldSchema{}, &ShieldSchemaList{})
}
