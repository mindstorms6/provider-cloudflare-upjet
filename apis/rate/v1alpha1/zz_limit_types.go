// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionInitParameters struct {

	// (String) The action to perform.
	// The action to perform.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (Attributes) A custom content type and reponse to return when the threshold is exceeded. The custom response configured in this object will override the custom error for the zone. This object is optional.
	// Notes: If you omit this object, Cloudflare will use the default HTML error page. If "mode" is "challenge", "managed_challenge", or "js_challenge", Cloudflare will use the zone challenge pages and you should not provide the "response" object. (see below for nested schema)
	Response *ResponseInitParameters `json:"response,omitempty" tf:"response,omitempty"`

	// (Number) The time in seconds during which Cloudflare will perform the mitigation action. Must be an integer value greater than or equal to the period.
	// Notes: If "mode" is "challenge", "managed_challenge", or "js_challenge", Cloudflare will use the zone's Challenge Passage time and you should not provide this value.
	// The time in seconds during which Cloudflare will perform the mitigation action. Must be an integer value greater than or equal to the period.
	// Notes: If "mode" is "challenge", "managed_challenge", or "js_challenge", Cloudflare will use the zone's Challenge Passage time and you should not provide this value.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type ActionObservation struct {

	// (String) The action to perform.
	// The action to perform.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (Attributes) A custom content type and reponse to return when the threshold is exceeded. The custom response configured in this object will override the custom error for the zone. This object is optional.
	// Notes: If you omit this object, Cloudflare will use the default HTML error page. If "mode" is "challenge", "managed_challenge", or "js_challenge", Cloudflare will use the zone challenge pages and you should not provide the "response" object. (see below for nested schema)
	Response *ResponseObservation `json:"response,omitempty" tf:"response,omitempty"`

	// (Number) The time in seconds during which Cloudflare will perform the mitigation action. Must be an integer value greater than or equal to the period.
	// Notes: If "mode" is "challenge", "managed_challenge", or "js_challenge", Cloudflare will use the zone's Challenge Passage time and you should not provide this value.
	// The time in seconds during which Cloudflare will perform the mitigation action. Must be an integer value greater than or equal to the period.
	// Notes: If "mode" is "challenge", "managed_challenge", or "js_challenge", Cloudflare will use the zone's Challenge Passage time and you should not provide this value.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type ActionParameters struct {

	// (String) The action to perform.
	// The action to perform.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (Attributes) A custom content type and reponse to return when the threshold is exceeded. The custom response configured in this object will override the custom error for the zone. This object is optional.
	// Notes: If you omit this object, Cloudflare will use the default HTML error page. If "mode" is "challenge", "managed_challenge", or "js_challenge", Cloudflare will use the zone challenge pages and you should not provide the "response" object. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Response *ResponseParameters `json:"response,omitempty" tf:"response,omitempty"`

	// (Number) The time in seconds during which Cloudflare will perform the mitigation action. Must be an integer value greater than or equal to the period.
	// Notes: If "mode" is "challenge", "managed_challenge", or "js_challenge", Cloudflare will use the zone's Challenge Passage time and you should not provide this value.
	// The time in seconds during which Cloudflare will perform the mitigation action. Must be an integer value greater than or equal to the period.
	// Notes: If "mode" is "challenge", "managed_challenge", or "js_challenge", Cloudflare will use the zone's Challenge Passage time and you should not provide this value.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type BypassInitParameters struct {
}

type BypassObservation struct {

	// (String) The name of the response header to match.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The value of the response header, which must match exactly.
	// The URL to bypass.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type BypassParameters struct {
}

type HeadersInitParameters struct {

	// (String) The name of the response header to match.
	// The name of the response header to match.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The operator used when matching: eq means "equal" and ne means "not equal".
	// The operator used when matching: `eq` means "equal" and `ne` means "not equal".
	Op *string `json:"op,omitempty" tf:"op,omitempty"`

	// (String) The value of the response header, which must match exactly.
	// The value of the response header, which must match exactly.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeadersObservation struct {

	// (String) The name of the response header to match.
	// The name of the response header to match.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The operator used when matching: eq means "equal" and ne means "not equal".
	// The operator used when matching: `eq` means "equal" and `ne` means "not equal".
	Op *string `json:"op,omitempty" tf:"op,omitempty"`

	// (String) The value of the response header, which must match exactly.
	// The value of the response header, which must match exactly.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeadersParameters struct {

	// (String) The name of the response header to match.
	// The name of the response header to match.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The operator used when matching: eq means "equal" and ne means "not equal".
	// The operator used when matching: `eq` means "equal" and `ne` means "not equal".
	// +kubebuilder:validation:Optional
	Op *string `json:"op,omitempty" tf:"op,omitempty"`

	// (String) The value of the response header, which must match exactly.
	// The value of the response header, which must match exactly.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LimitInitParameters struct {

	// (Attributes) The action to perform when the threshold of matched traffic within the configured period is exceeded. (see below for nested schema)
	Action *ActionInitParameters `json:"action,omitempty" tf:"action,omitempty"`

	// (Attributes List) Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs. (see below for nested schema)
	Bypass []BypassInitParameters `json:"bypass,omitempty" tf:"bypass,omitempty"`

	// (Attributes) Determines which traffic the rate limit counts towards the threshold. (see below for nested schema)
	Match *MatchInitParameters `json:"match,omitempty" tf:"match,omitempty"`

	// (Number) The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
	// The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// (Number) The threshold that will trigger the configured mitigation action. Configure this value along with the period property to establish a threshold per period.
	// The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type LimitObservation struct {

	// (Attributes) The action to perform when the threshold of matched traffic within the configured period is exceeded. (see below for nested schema)
	Action *ActionObservation `json:"action,omitempty" tf:"action,omitempty"`

	// (Attributes List) Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs. (see below for nested schema)
	Bypass []BypassObservation `json:"bypass,omitempty" tf:"bypass,omitempty"`

	// (String) An informative summary of the rate limit. This value is sanitized and any tags will be removed.
	// An informative summary of the rate limit. This value is sanitized and any tags will be removed.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) When true, indicates that the rate limit is currently disabled.
	// When true, indicates that the rate limit is currently disabled.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// (String) The unique identifier of the rate limit.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes) Determines which traffic the rate limit counts towards the threshold. (see below for nested schema)
	Match *MatchObservation `json:"match,omitempty" tf:"match,omitempty"`

	// (Number) The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
	// The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// (Number) The threshold that will trigger the configured mitigation action. Configure this value along with the period property to establish a threshold per period.
	// The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// (String) Identifier
	// Identifier
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type LimitParameters struct {

	// (Attributes) The action to perform when the threshold of matched traffic within the configured period is exceeded. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Action *ActionParameters `json:"action,omitempty" tf:"action,omitempty"`

	// (Attributes List) Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Bypass []BypassParameters `json:"bypass,omitempty" tf:"bypass,omitempty"`

	// (Attributes) Determines which traffic the rate limit counts towards the threshold. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Match *MatchParameters `json:"match,omitempty" tf:"match,omitempty"`

	// (Number) The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
	// The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// (Number) The threshold that will trigger the configured mitigation action. Configure this value along with the period property to establish a threshold per period.
	// The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
	// +kubebuilder:validation:Optional
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// (String) Identifier
	// Identifier
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type MatchInitParameters struct {

	// (Attributes List) (see below for nested schema)
	Headers []HeadersInitParameters `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Attributes) (see below for nested schema)
	Request *RequestInitParameters `json:"request,omitempty" tf:"request,omitempty"`

	// (Attributes) A custom content type and reponse to return when the threshold is exceeded. The custom response configured in this object will override the custom error for the zone. This object is optional.
	// Notes: If you omit this object, Cloudflare will use the default HTML error page. If "mode" is "challenge", "managed_challenge", or "js_challenge", Cloudflare will use the zone challenge pages and you should not provide the "response" object. (see below for nested schema)
	Response *MatchResponseInitParameters `json:"response,omitempty" tf:"response,omitempty"`
}

type MatchObservation struct {

	// (Attributes List) (see below for nested schema)
	Headers []HeadersObservation `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Attributes) (see below for nested schema)
	Request *RequestObservation `json:"request,omitempty" tf:"request,omitempty"`

	// (Attributes) A custom content type and reponse to return when the threshold is exceeded. The custom response configured in this object will override the custom error for the zone. This object is optional.
	// Notes: If you omit this object, Cloudflare will use the default HTML error page. If "mode" is "challenge", "managed_challenge", or "js_challenge", Cloudflare will use the zone challenge pages and you should not provide the "response" object. (see below for nested schema)
	Response *MatchResponseObservation `json:"response,omitempty" tf:"response,omitempty"`
}

type MatchParameters struct {

	// (Attributes List) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Headers []HeadersParameters `json:"headers" tf:"headers,omitempty"`

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Request *RequestParameters `json:"request,omitempty" tf:"request,omitempty"`

	// (Attributes) A custom content type and reponse to return when the threshold is exceeded. The custom response configured in this object will override the custom error for the zone. This object is optional.
	// Notes: If you omit this object, Cloudflare will use the default HTML error page. If "mode" is "challenge", "managed_challenge", or "js_challenge", Cloudflare will use the zone challenge pages and you should not provide the "response" object. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Response *MatchResponseParameters `json:"response,omitempty" tf:"response,omitempty"`
}

type MatchResponseInitParameters struct {

	// (Boolean) When true, only the uncached traffic served from your origin servers will count towards rate limiting. In this case, any cached traffic served by Cloudflare will not count towards rate limiting. This field is optional.
	// Notes: This field is deprecated. Instead, use response headers and set "origin_traffic" to "false" to avoid legacy behaviour interacting with the "response_headers" property.
	// When true, only the uncached traffic served from your origin servers will count towards rate limiting. In this case, any cached traffic served by Cloudflare will not count towards rate limiting. This field is optional.
	// Notes: This field is deprecated. Instead, use response headers and set "origin_traffic" to "false" to avoid legacy behaviour interacting with the "response_headers" property.
	OriginTraffic *bool `json:"originTraffic,omitempty" tf:"origin_traffic,omitempty"`
}

type MatchResponseObservation struct {

	// (Boolean) When true, only the uncached traffic served from your origin servers will count towards rate limiting. In this case, any cached traffic served by Cloudflare will not count towards rate limiting. This field is optional.
	// Notes: This field is deprecated. Instead, use response headers and set "origin_traffic" to "false" to avoid legacy behaviour interacting with the "response_headers" property.
	// When true, only the uncached traffic served from your origin servers will count towards rate limiting. In this case, any cached traffic served by Cloudflare will not count towards rate limiting. This field is optional.
	// Notes: This field is deprecated. Instead, use response headers and set "origin_traffic" to "false" to avoid legacy behaviour interacting with the "response_headers" property.
	OriginTraffic *bool `json:"originTraffic,omitempty" tf:"origin_traffic,omitempty"`
}

type MatchResponseParameters struct {

	// (Boolean) When true, only the uncached traffic served from your origin servers will count towards rate limiting. In this case, any cached traffic served by Cloudflare will not count towards rate limiting. This field is optional.
	// Notes: This field is deprecated. Instead, use response headers and set "origin_traffic" to "false" to avoid legacy behaviour interacting with the "response_headers" property.
	// When true, only the uncached traffic served from your origin servers will count towards rate limiting. In this case, any cached traffic served by Cloudflare will not count towards rate limiting. This field is optional.
	// Notes: This field is deprecated. Instead, use response headers and set "origin_traffic" to "false" to avoid legacy behaviour interacting with the "response_headers" property.
	// +kubebuilder:validation:Optional
	OriginTraffic *bool `json:"originTraffic,omitempty" tf:"origin_traffic,omitempty"`
}

type RequestInitParameters struct {

	// (List of String) The HTTP methods to match. You can specify a subset (for example, ['POST','PUT']) or all methods (['_ALL_']). This field is optional when creating a rate limit.
	// The HTTP methods to match. You can specify a subset (for example, `['POST','PUT']`) or all methods (`['_ALL_']`). This field is optional when creating a rate limit.
	Methods []*string `json:"methods,omitempty" tf:"methods,omitempty"`

	// (List of String) The HTTP schemes to match. You can specify one scheme (['HTTPS']), both schemes (['HTTP','HTTPS']), or all schemes (['_ALL_']). This field is optional.
	// The HTTP schemes to match. You can specify one scheme (`['HTTPS']`), both schemes (`['HTTP','HTTPS']`), or all schemes (`['_ALL_']`). This field is optional.
	Schemes []*string `json:"schemes,omitempty" tf:"schemes,omitempty"`

	// (String) The URL pattern to match, composed of a host and a path such as example.org/path*. Normalization is applied before the pattern is matched. * wildcards are expanded to match applicable traffic. Query strings are not matched. Set the value to * to match all traffic to your zone.
	// The URL pattern to match, composed of a host and a path such as `example.org/path*`. Normalization is applied before the pattern is matched. `*` wildcards are expanded to match applicable traffic. Query strings are not matched. Set the value to `*` to match all traffic to your zone.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type RequestObservation struct {

	// (List of String) The HTTP methods to match. You can specify a subset (for example, ['POST','PUT']) or all methods (['_ALL_']). This field is optional when creating a rate limit.
	// The HTTP methods to match. You can specify a subset (for example, `['POST','PUT']`) or all methods (`['_ALL_']`). This field is optional when creating a rate limit.
	Methods []*string `json:"methods,omitempty" tf:"methods,omitempty"`

	// (List of String) The HTTP schemes to match. You can specify one scheme (['HTTPS']), both schemes (['HTTP','HTTPS']), or all schemes (['_ALL_']). This field is optional.
	// The HTTP schemes to match. You can specify one scheme (`['HTTPS']`), both schemes (`['HTTP','HTTPS']`), or all schemes (`['_ALL_']`). This field is optional.
	Schemes []*string `json:"schemes,omitempty" tf:"schemes,omitempty"`

	// (String) The URL pattern to match, composed of a host and a path such as example.org/path*. Normalization is applied before the pattern is matched. * wildcards are expanded to match applicable traffic. Query strings are not matched. Set the value to * to match all traffic to your zone.
	// The URL pattern to match, composed of a host and a path such as `example.org/path*`. Normalization is applied before the pattern is matched. `*` wildcards are expanded to match applicable traffic. Query strings are not matched. Set the value to `*` to match all traffic to your zone.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type RequestParameters struct {

	// (List of String) The HTTP methods to match. You can specify a subset (for example, ['POST','PUT']) or all methods (['_ALL_']). This field is optional when creating a rate limit.
	// The HTTP methods to match. You can specify a subset (for example, `['POST','PUT']`) or all methods (`['_ALL_']`). This field is optional when creating a rate limit.
	// +kubebuilder:validation:Optional
	Methods []*string `json:"methods,omitempty" tf:"methods,omitempty"`

	// (List of String) The HTTP schemes to match. You can specify one scheme (['HTTPS']), both schemes (['HTTP','HTTPS']), or all schemes (['_ALL_']). This field is optional.
	// The HTTP schemes to match. You can specify one scheme (`['HTTPS']`), both schemes (`['HTTP','HTTPS']`), or all schemes (`['_ALL_']`). This field is optional.
	// +kubebuilder:validation:Optional
	Schemes []*string `json:"schemes,omitempty" tf:"schemes,omitempty"`

	// (String) The URL pattern to match, composed of a host and a path such as example.org/path*. Normalization is applied before the pattern is matched. * wildcards are expanded to match applicable traffic. Query strings are not matched. Set the value to * to match all traffic to your zone.
	// The URL pattern to match, composed of a host and a path such as `example.org/path*`. Normalization is applied before the pattern is matched. `*` wildcards are expanded to match applicable traffic. Query strings are not matched. Set the value to `*` to match all traffic to your zone.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ResponseInitParameters struct {

	// (String) The response body to return. The value must conform to the configured content type.
	// The response body to return. The value must conform to the configured content type.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// (String) The content type of the body. Must be one of the following: text/plain, text/xml, or application/json.
	// The content type of the body. Must be one of the following: `text/plain`, `text/xml`, or `application/json`.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`
}

type ResponseObservation struct {

	// (String) The response body to return. The value must conform to the configured content type.
	// The response body to return. The value must conform to the configured content type.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// (String) The content type of the body. Must be one of the following: text/plain, text/xml, or application/json.
	// The content type of the body. Must be one of the following: `text/plain`, `text/xml`, or `application/json`.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`
}

type ResponseParameters struct {

	// (String) The response body to return. The value must conform to the configured content type.
	// The response body to return. The value must conform to the configured content type.
	// +kubebuilder:validation:Optional
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// (String) The content type of the body. Must be one of the following: text/plain, text/xml, or application/json.
	// The content type of the body. Must be one of the following: `text/plain`, `text/xml`, or `application/json`.
	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`
}

// LimitSpec defines the desired state of Limit
type LimitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LimitParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LimitInitParameters `json:"initProvider,omitempty"`
}

// LimitStatus defines the observed state of Limit.
type LimitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LimitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Limit is the Schema for the Limits API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare-upjet}
type Limit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bypass) || (has(self.initProvider) && has(self.initProvider.bypass))",message="spec.forProvider.bypass is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.period) || (has(self.initProvider) && has(self.initProvider.period))",message="spec.forProvider.period is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.threshold) || (has(self.initProvider) && has(self.initProvider.threshold))",message="spec.forProvider.threshold is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   LimitSpec   `json:"spec"`
	Status LimitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LimitList contains a list of Limits
type LimitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Limit `json:"items"`
}

// Repository type metadata.
var (
	Limit_Kind             = "Limit"
	Limit_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Limit_Kind}.String()
	Limit_KindAPIVersion   = Limit_Kind + "." + CRDGroupVersion.String()
	Limit_GroupVersionKind = CRDGroupVersion.WithKind(Limit_Kind)
)

func init() {
	SchemeBuilder.Register(&Limit{}, &LimitList{})
}
